<doc id="889" url="https://ru.wikipedia.org/wiki?curid=889" title="Динамика (физика)">
Динамика (физика)

Дина́мика ( «сила, мощь») — раздел механики, в котором изучаются причины изменения механического движения, тогда как способы описать движение изучает кинематика. В классической механике этими причинами являются силы. Динамика оперирует также такими понятиями, как масса, импульс, момент импульса, энергия.
Также динамикой нередко называют, применительно к другим областям физики (например, к теории поля), ту часть рассматриваемой теории, которая более или менее прямо аналогична динамике в механике, противопоставляясь обычно кинематике (к кинематике в таких теориях обычно относят, например, соотношения, получающиеся из преобразований величин при смене системы отсчёта).
Иногда слово динамика применяется в физике и не в описанном смысле, а в более общелитературном: для обозначения просто процессов, развивающихся во времени, зависимости от времени каких-то величин, не обязательно имея в виду конкретный механизм или причину этой зависимости.
Динамика, базирующаяся на законах Ньютона, называется "классической" динамикой. Классическая динамика описывает движения объектов со скоростями от долей миллиметров в секунду до километров в секунду.
Однако эти методы перестают быть справедливыми для движения объектов очень малых размеров (см. квантовая механика) и при движениях со скоростями, близкими к скорости света (см. релятивистская механика). Такие движения подчиняются другим законам.
С помощью законов динамики изучается также движение сплошной среды, т. е. упруго и пластически деформируемых тел, жидкостей и газов.
В результате применения методов динамики к изучению движения конкретных объектов возник ряд специальных дисциплин: небесная механика, баллистика, динамика корабля, самолёта и т. п.
Эрнст Мах считал, что основы динамики были заложены Галилеем.
Основная задача динамики.
Исторически деление на прямую и обратную задачу динамики сложилось следующим образом.
Законы Ньютона.
Классическая динамика основана на трёх основных законах Ньютона:
где "formula_3" — ускорение тела, "formula_4" — силы, приложенные к материальной точке, а formula_5 — её масса, или
В классической (ньютоновской) механике масса материальной точки полагается постоянной во времени и независящей от каких-либо особенностей её движения и взаимодействия с другими телами.
Второй закона Ньютона можно также сформулировать с использованием понятия импульса:
В инерциальных системах отсчёта производная импульса материальной точки по времени равна действующей на него силе.
где formula_8 — импульс (количество движения) точки, formula_9 — её скорость, а formula_10 — время.
При такой формулировке, как и ранее, полагают, что масса материальной точки неизменна во времени.
Если при этом рассматриваются взаимодействующие материальные точки, то обе эти силы действуют вдоль прямой, их соединяющей. Это приводит к тому, что суммарный момент импульса системы состоящей из двух материальных точек в процессе взаимодействия остаётся неизменным.
Таким образом, из второго и третьего законов Ньютона могут быть получены законы сохранения импульса и момента импульса
Законы Ньютона в неинерциальных системах отсчёта.
Существование инерциальных систем отсчёта лишь постулируется первым законом Ньютона. Реальные системы отсчёта, связанные, например, с Землёй или с Солнцем, не обладают в полной мере свойством инерциальности в силу их кругового движения. Вообще говоря, экспериментально доказать существование ИСО невозможно, поскольку для этого необходимо наличие свободного тела (тела на которое не действуют никакие силы), а то, что тело является свободным, может быть показано лишь в ИСО. Описание же движения в неинерциальных системах отсчёта, движущихся с ускорением относительно инерциальных, требует введения т. н. фиктивных сил таких как сила инерции, центробежная сила или сила Кориолиса. Эти «силы» не обусловлены взаимодействием тел, то есть по своей природе не являются силами и вводятся лишь для сохранения формы второго закона Ньютона:
где formula_14 — сумма всех фиктивных сил, возникающих в неинерциальной системе отсчёта.
Описание динамики исходя из принципа наименьшего действия.
Многие законы динамики могут быть описаны исходя не из законов Исаака Ньютона, а из принципа наименьшего действия.
Формулы некоторых сил, действующих на тело.
или в векторной форме:
вблизи земной поверхности:
Деление динамики по типам объекта исследования.
Изучением же условий равновесия механических систем занимается статика.
Динамика деформируемых тел:
Наиболее же общие свойства макроскопических систем изучает термодинамика, достижения которой учитываются в механике.

</doc>
<doc id="890" url="https://ru.wikipedia.org/wiki?curid=890" title="Статика">
Статика

Ста́тика (от , «неподвижный») — раздел механики, в котором изучаются условия равновесия механических систем под действием приложенных к ним сил и возникших моментов.
Аксиомы статики.
Система сил, приложенная к телу или материальной точке, называется уравновешенной или эквивалентной нулю, если тело под действием этой системы находится в состоянии покоя или движется по инерции.
Основные понятия.
Про тело говорят, что оно находится в равновесии, если оно покоится или движется равномерно и прямолинейно относительно выбранной инерциальной системы отсчёта.
В статике материальные тела считают абсолютно твёрдыми, т.к. изменение размеров тел обычно мало по сравнению с начальными размерами.
Связи.
На тело влияют внешние силы, а также другие материальные тела, ограничивающие перемещение данного тела в пространстве. Такие тела называют связями. Сила, с которой связь действует на тело, ограничивая его перемещение, называется реакцией связи. Для записи условия равновесия системы связи убирают, а реакции связей заменяют на равные им силы.
Например, если тело закреплено на шарнире, то шарнир является связью. Реакцией связи при этом будет сила, проходящая через ось шарнира.
Системы сил.
Если систему сил, действующих на твёрдое тело, можно заменить на другую систему сил, не изменяя механического состояния тела, то такие системы сил называются эквивалентными.
Для любой системы сил, приложенных к твёрдому телу, можно найти эквивалентную систему сил, состоящую из силы, приложенной в заданной точке (центре приведения), и пары сил (теорема Пуансо). Эта сила называется главным вектором системы сил, а момент, создаваемый парой сил — главным моментом относительно выбранного центра приведения.
Главный вектор равен векторной сумме всех сил системы и не зависит от выбранного центра приведения. Главный момент равен сумме моментов всех сил системы относительно центра приведения.
Условие равновесия твёрдого тела.
Твёрдое тело находится в равновесии, если сумма всех сил, приложенных к данному телу, и их моментов равны нулю или главный вектор и главный момент системы сил, приложенных к телу, равны нулю.
Условие равновесия системы тел.
Для записи условия равновесия системы, состоящей из твёрдых тел, систему разделяют на отдельные части, и записывают уравнения равновесия как для всей системы, так и для её частей. При этом возможны несколько эквивалентных вариантов записи условий равновесия в зависимости от выбора частей системы, для которых записываются уравнения.
Из первого закона Ньютона следует, что если геометрическая сумма всех внешних сил, приложенных к телу, равна нулю, то тело находится в состоянии покоя или совершает равномерное прямолинейное движение. В этом случае принято говорить, что силы, приложенные к телу, уравновешивают друг друга. При вычислении равнодействующей все силы, действующие на тело, можно прикладывать к центру масс.
Чтобы невращающееся тело находилось в равновесии, необходимо, чтобы равнодействующая всех сил, приложенных к телу, была равна нулю.
Рисунок 1.14.1.
Равновесие твёрдого тела под действием трёх сил. При вычислении равнодействующей все силы приводятся к одной точке C
На рис. 1.14.1 дан пример равновесия твёрдого тела под действием трёх сил. Точка пересечения O линий действия сил и не совпадает с точкой приложения силы тяжести (центр масс C), но при равновесии эти точки обязательно находятся на одной вертикали. При вычислении равнодействующей все силы приводятся к одной точке.
Если тело может вращаться относительно некоторой оси, то для его равновесия недостаточно равенства нулю равнодействующей всех сил.
Вращающее действие силы зависит не только от её величины, но и от расстояния между линией действия силы и осью вращения.
Длина перпендикуляра, проведённого от оси вращения до линии действия силы, называется плечом силы.
Произведение модуля силы на плечо d называется моментом силы M. Положительными считаются моменты тех сил, которые стремятся повернуть тело против часовой стрелки (рис. 1.14.2).
Правило моментов: тело, имеющее неподвижную ось вращения, находится в равновесии, если алгебраическая сумма моментов всех приложенных к телу сил относительно этой оси равна нулю:*
Связь с другими науками.
Статика является разделом теоретической механики.
Статика является базой для науки о сопротивлении материалов.

</doc>
<doc id="891" url="https://ru.wikipedia.org/wiki?curid=891" title="Абсолютно упругое тело">
Абсолютно упругое тело

Абсолю́тно упру́гое те́ло в механике — частный случай деформируемого тела, которое после прекращения действия причины, вызвавшей его деформацию, полностью восстанавливает исходные размеры и форму, то есть в нём отсутствует остаточная деформация. Можно сказать, что абсолютно упругое тело — это тело, не обладающее диссипацией. Абсолютно упругих тел не существует, но эта абстракция полезна при решении многих физических задач, а также задач в сопротивлении материалов.
Большинство реальных тел можно считать абсолютно упругими, если вызываемые внешней силой деформации относительно малы.

</doc>
<doc id="893" url="https://ru.wikipedia.org/wiki?curid=893" title="Классическая механика">
Классическая механика

Класси́ческая меха́ника — вид механики (раздела физики, изучающего законы изменения положений тел в пространстве со временем и причины, его вызывающие), основанный на законах Ньютона и принципе относительности Галилея. Поэтому её часто называют «нью́тоновой меха́никой».
Классическая механика подразделяется на:
Существует несколько эквивалентных способов формального математического описания классической механики:
На рубеже XIX—XX вв. были выявлены пределы применимости классической механики. Выяснилось, что она даёт исключительно точные результаты, но только в тех случаях, когда применяется к телам, скорости которых много меньше скорости света, а размеры значительно превышают размеры атомов и молекул, и при расстояниях или условиях, когда скорость распространения гравитации можно считать бесконечной (обобщением классической механики на тела, двигающиеся с произвольной скоростью, является релятивистская механика, а на тела, размеры которых сравнимы с атомными, — квантовая механика; квантовые релятивистские эффекты рассматриваются квантовой теорией поля).
Тем не менее, классическая механика сохраняет своё значение, поскольку она:
Классическую механику можно использовать для описания движения очень широкого класса физических объектов: и обыденных предметов макромира (таких, как волчок и бейсбольный мяч), и объектов астрономических размеров (таких, как планеты и звёзды), и многих микроскопических объектов.
Основные понятия.
Классическая механика оперирует несколькими основными понятиями и моделями. Среди них:
Основные законы.
Принцип относительности Галилея.
Основным принципом, на котором базируется классическая механика, является принцип относительности, сформулированный Г. Галилеем на основе эмпирических наблюдений. Согласно этому принципу существует бесконечно много систем отсчёта, в которых свободное тело покоится или движется с постоянной по модулю и направлению скоростью. Эти системы отсчёта называются инерциальными и движутся друг относительно друга равномерно и прямолинейно. Во всех инерциальных системах отсчёта свойства пространства и времени одинаковы, и все процессы в механических системах подчиняются одинаковым законам. Этот принцип можно также сформулировать как отсутствие абсолютных систем отсчёта, то есть систем отсчёта, каким-либо образом выделенных относительно других.
Законы Ньютона.
Основой классической механики являются три закона Ньютона (формулируя данные законы, Ньютон применял термин «тело», хотя фактически речь в них идёт о материальных точках).
Первый закон устанавливает наличие свойства инертности у материальных тел и постулирует наличие таких систем отсчёта, в которых движение свободного тела происходит с постоянной скоростью (такие системы отсчёта называются инерциальными).
Второй закон Ньютона на основе эмпирических фактов постулирует связь между величиной силы, ускорением тела и его инертностью (характеризуемой массой). В математической формулировке второй закон Ньютона чаще всего записывается в следующем виде:
где formula_10 — результирующий вектор сил, действующих на тело; formula_11 — вектор ускорения тела; "m" — масса тела.
Второй закон Ньютона может быть также записан в терминах изменения импульса материальной точки formula_12:
При записи закона в такой форме, как и ранее, полагают, что масса материальной точки неизменна во времени.
Второго закона Ньютона недостаточно для описания движения частицы. Дополнительно требуется описание силы formula_14, полученное из рассмотрения сущности физического взаимодействия, в котором участвует тело.
Третий закон Ньютона уточняет некоторые свойства введённого во втором законе понятия силы. Им постулируется наличие для каждой силы, действующей на первое тело со стороны второго, равной по величине и противоположной по направлению силы, действующей на второе тело со стороны первого. Наличие третьего закона Ньютона обеспечивает выполнение закона сохранения импульса для системы тел.
Закон сохранения импульса.
Закон сохранения импульса является следствием законов Ньютона для замкнутых систем (то есть систем, на которые не действуют внешние силы или равнодействующая внешних сил равна нулю). Фундаментальной основой данного закона служит свойство "однородности пространства", а взаимосвязь закона сохранения импульса и данного свойства выражается теоремой Нётер.
Закон сохранения энергии.
Закон сохранения энергии является следствием законов Ньютона для замкнутых консервативных систем (то есть систем, в которых действуют только консервативные силы). Фундаментальной основой данного закона служит свойство "однородности времени", причём взаимосвязь закона сохранения энергии и данного свойства снова выражается теоремой Нётер.
Распространение на протяжённые тела.
Классическая механика также включает в себя описание сложных движений протяжённых неточечных объектов. Распространение законов ньютоновой механики на такие объекты было в основном заслугой Л. Эйлера. Современная формулировка законов Эйлера также использует аппарат трёхмерных векторов.
Позднее развивается аналитическая механика, основная идея которой — описание механической системы как единого объекта, использующее аппарат многомерной геометрии. Есть две основные (во многом альтернативные) формулировки классической аналитической механики: лагранжева механика и гамильтонова механика. В этих теориях понятие «сила» отходит на второй план, а упор при описании механических систем делается на другие физические величины — такие, как энергия или действие.
Приведённые выше выражения для импульса и кинетической энергии действительны только при отсутствии значительного электромагнитного вклада. В электромагнетизме второй закон Ньютона для провода с током нарушается, если не учитывать вклад электромагнитного поля в импульс системы; такой вклад выражается через вектор Пойнтинга, поделённый на "c"2, где "c" — это скорость света в свободном пространстве.
История.
Античность.
Классическая механика зародилась в древности и начала формироваться в качестве самостоятельной отрасли, ранее других областей физики, главным образом в связи с проблемами, которые возникали при строительстве (подъёмные и транспортные машины, пирамиды древнего Египта), ремесленном производстве, судоходстве и военном деле (стенобитные и метательные машины). В странах Ближнего Востока были известны все так называемые «простые машины»: рычаг, наклонная плоскость, блок, клин, винт. Однако от них не осталось никаких письменных записей. В древнем Китае в I в. н. э. был изобретён первый в мире сейсмоскоп.
Первым из разделов механики, получившим развитие, стала статика, основы которой были заложены в работах Архимеда в III веке до н. э.. Им были сформулированы правило рычага, теорема о сложении параллельных сил, введено понятие центра тяжести, заложены основы гидростатики (сила Архимеда).
Средние века.
В XIV веке французский философ Жан Буридан разработал теорию импетуса. В дальнейшем её развил ученик Жана — епископ Альберт Саксонский.
Новое время.
XVII век.
Динамика как раздел классической механики начала развиваться только в XVII веке. Его основы были заложены Галилео Галилеем, который первым правильно решил задачу о движении тела под действием заданной силы. На основе эмпирических наблюдений им были открыты закон инерции и принцип относительности. Помимо этого, Галилеем внесён вклад в зарождение теории колебаний и науки о сопротивлении материалов.
Христиан Гюйгенс проводил исследования в области теории колебаний, в частности изучал движение точки по окружности, а также колебания физического маятника. В его работах были также впервые сформулированы законы упругого удара тел.
Заложение основ классической механики завершилось работами Исаака Ньютона, сформулировавшего в наиболее общей форме законы механики и открывшего закон всемирного тяготения. Им же в 1684 году был установлен закон вязкого трения в жидкостях и газах.
Также в XVII веке, в 1660 году, был сформулирован закон упругих деформаций, носящий имя своего первооткрывателя Роберта Гука.
XVIII век.
В XVIII веке зарождается и интенсивно развивается аналитическая механика. Её методы для задачи о движении материальной точки были разработаны Леонардом Эйлером, которые заложили основы динамики твёрдого тела. Эти методы основываются на принципе виртуальных перемещений и на принципе Д’Аламбера. Разработку аналитических методов завершил Лагранж, которому удалось сформулировать уравнения динамики механической системы в наиболее общем виде: с использованием обобщённых координат и импульсов. Помимо этого, Лагранж принял участие в заложении основ современной теории колебаний.
Альтернативный метод аналитической формулировки классической механики основывается на принципе наименьшего действия, который впервые был высказан Мопертюи по отношению к одной материальной точке и обобщён на случай системы материальных точек Лагранжем.
Также в XVIII веке в работах Эйлера, Даниила Бернулли, Лагранжа и Д’Аламбера были разработаны основы теоретического описания гидродинамики идеальной жидкости.
XIX век.
В XIX веке развитие аналитической механики происходит в работах Остроградского, Гамильтона, Якоби, Герца и др. В теории колебаний Раусом, Жуковским и Ляпуновым была разработана теория устойчивости механических систем. Кориолис разработал теорию относительного движения, доказав теорему о разложении ускорения на составляющие. Во второй трети XIX века происходит выделение кинематики в отдельный раздел механики (хотя впервые мысль о целесообразности такого выделении кинематики была высказана ещё Эйлером в 1776 г.).
Особенно значительны в XIX веке были успехи в области механики сплошной среды. Навье и Коши в общей форме сформулировали уравнения теории упругости. В работах Навье и Стокса были получены дифференциальные уравнения гидродинамики с учётом вязкости жидкости. Наряду с этим происходит углубление знаний в области гидродинамики идеальной жидкости: появляются работы Гельмгольца о вихрях, Кирхгофа, Жуковского и Рейнольдса о турбулентности, Прандтля о пограничных эффектах. Сен-Венан разработал математическую модель, описывающую пластические свойства металлов.
Новейшее время.
В XX веке интерес исследователей переключается на нелинейные эффекты в области классической механики. Ляпунов и Анри Пуанкаре заложили основы теории нелинейных колебаний. Мещерский и Циолковский провели анализ динамики тел переменной массы. Из механики сплошной среды выделяется аэродинамика, основы которой разработаны Жуковским. В середине XX века активно развивается новое направление в классической механике — теория хаоса. Важными также остаются вопросы устойчивости сложных динамических систем, механика дискретных систем, теория гироскопических и инерциальных систем, теория механизмов и машин, механика тел переменной массы, механика деформируемого твёрдого тела, гидроаэродинамика, газовая динамика, неевклидова механика.
Ограничения применимости классической механики.
Предсказания классической механики становятся неточными для систем, скорость которых приближается к скорости света (поведение таких систем должно описываться релятивистской механикой), или для очень малых систем, где действуют законы квантовой механики. Для описания поведения систем, в которых существенны и релятивистские, и квантовые эффекты, применяется релятивистская квантовая теория поля. Для систем с очень большим количеством составляющих, или степеней свободы, классическая механика также не может быть адекватной, и в этом случае используются методы статистической механики.
Классическая механика является самосогласованной теорией, то есть в её рамках не существует утверждений, противоречащих друг другу. В целом она является совместимой и с другими «классическими» теориями (такими, как классическая электродинамика и классическая термодинамика), однако в конце XIX века выявились некоторые несоответствия между этими теориями; преодоление этих несоответствий знаменовало становление современной физики. В частности:

</doc>
<doc id="895" url="https://ru.wikipedia.org/wiki?curid=895" title="США">
США



</doc>
<doc id="896" url="https://ru.wikipedia.org/wiki?curid=896" title="Рыбы">
Рыбы

Рыбы  — обширная группа водных челюстноротых позвоночных животных, ранее считавшаяся надклассом. Рыбы характеризуются жаберным дыханием на всех этапах постэмбрионального развития организма. С точки зрения кладистики четвероногие являются специализированными лопастепёрыми рыбами. Тем не менее, поскольку традиционно понятие «рыбы» относится к парафилетической группе, не включающей четвероногих, в современной систематике рыбы отсутствуют как таксон.
Рыбы обитают как в солёных, так и в пресных водоёмах — от глубоких океанических впадин до горных ручьёв. Рыбы играют важную роль в большинстве водных экосистем как составляющая пищевых цепей. Многие виды рыб употребляются человеком в пищу и поэтому имеют большое промысловое значение.
Современные рыбы имеют размеры от () до (китовая акула).
В мире известно видов рыб (по состоянию на 2020 год), однако постоянно описываются новые — каждый год описывается около 300—500 новых для науки видов. В России обитает около видов, в том числе в пресных водах встречается более 280 видов.
Изучению рыб посвящён раздел зоологии — ихтиология.
Название.
Слово «рыба» (древнерусск. "рыба") происходит от праславянского *"ryba" неясной этимологии. Сопоставляется с д.-в.-н. "rûppa", "rûpa" «гусеница», также «налим», ср.-в.-н. "ruppe", "rûpe" «налим». По Фасмеру, слово является табуистическим названием вместо более древнего *"zъvь", ср. лит. "žuvìs" «рыба», греч. "ἰχθῦς" (ср. "ихтиология" — «наука о рыбах») «рыба», арм. "jukn", которое, ввиду созвучия с глаголом «звать», рыбаки старались не употреблять.
Латинское же название рыб, , ед. ч. , происходит, по-видимому, от праиндоевропейского *"pisk-", от которого произошло и англ., то есть «рыба».
Происхождение и эволюция.
Считалось, что наиболее древние бесчелюстные животные, напоминающие рыб, известны из раннего ордовика (около 450—470 млн лет назад). Тем не менее в 1999 году в китайской провинции Юньнань были найдены окаменелости рыбообразного существа "Haikouichthys" из группы бесчелюстных возрастом около 530 миллионов лет (ранний кембрий). Возможно, подобные формы были предками всех позвоночных.
Отличием первых рыб от бесчелюстных стали челюсти, производное одной из жаберных дуг. Кроме челюстей, рыбы имеют парные плавники, внутреннее ухо с тремя полукружными каналами и жаберные дуги. Несмотря на появление первых челюстноротых рыб ещё в ордовике, они занимали подчиненное положение вплоть до девона. Таким образом, рыбы и бесчелюстные существовали больше 100 млн лет в условиях преобладания бесчелюстных, в отличие от настоящего времени. Хрящевые рыбы появились на рубеже силура и девона, около 420 млн лет назад, и достигли расцвета в карбоне. Лопастепёрые рыбы обитают в мировых океанах как минимум с девона; не исключено, что они существовали уже в силуре. "Guiyu oneiros" — самая ранняя известная лопастепёрая рыба.
Более половины всех живущих ныне видов позвоночных, а именно, согласно базе данных "FishBase", около 31 тысячи видов, относятся к рыбам. Число признанных видов продолжает меняться вследствие открытий новых видов, а также таксономических ревизий отдельных групп. Ныне живущие рыбы представлены тремя классами: хрящевые рыбы (Chondrichthyes), лопастепёрые (Sarcopterygii) и лучепёрые рыбы (Actinopterygii). Два последних класса составляют группу костных рыб.
Современных хрящевых рыб делят на два подкласса: Holocephali (цельноголовые) и Elasmobranchii (пластиножаберные, куда входят акулы и скаты). Ныне существует 900—1000 видов хрящевых рыб.
Анатомия и физиология.
Внешние покровы.
Внешние покровы рыб представлены кожей с чешуёй (у некоторых рыб чешуя отсутствует). Как и у всех других позвоночных, кожа рыб делится на дерму и эпидермис (верхний слой кожи эктодермального происхождения, состоящий из эпителиальной ткани). Эпидермис у рыб неороговевающий. Железы в эпидермисе вырабатывают мукусоподобный секрет (слизь), который защищает внешние покровы животного.
В формировании чешуи основную роль играет внутренний слой кожи — дерма. Хрящевые рыбы имеют плакоидную чешую, которая гомологична зубам всех позвоночных; перемещаясь в ходе эволюции на челюсти, плакоидные чешуи, собственно, и превращаются в зубы у акул и скатов. Плакоидная чешуя состоит из дентина, который формирует основу чешуй, а сверху покрыта эмалью. По химическому составу дентин и эмаль акул схожи с дентином и эмалью зубов человека. Утраченные плакоидные чешуи не возобновляются, но при росте рыбы их количество увеличивается. Плавниковые шипы некоторых хрящевых рыб (например, у черноморского катрана) тоже являются преобразованными плакоидными чешуями.
Костистым рыбам присуще несколько разных типов чешуи.
Ганоидная чешуя имеется у наиболее примитивных из лучепёрых рыб, например осетровых. Она сформирована костяными пластинками, которые сверху покрыты пластом похожего на дентин вещества — ганоина; часто такая чешуя покрывает тело рыбы сплошным защитным панцирем, как у представителей семейств Polypteridae и Lepisosteidae.
Для ископаемых и современных кистеперых и двоякодышащих рыб характерна космоидная чешуя, внешняя поверхность которой образована пластом космина (откуда происходит название), а сверх него — дентина. Космин подстилается пластом губчатой кости. У современных видов кистепёрых и двоякодышащих рыб внешний дентиновый и внутренний губчатый пласты постепенно редуцируются: у современных видов рода Латимерия на поверхности чешуи сохранились лишь одиночные бугорки дентина.
Окраска рыб может варьировать в очень широких пределах: от однотонной практически всех возможных цветов до маскировочной «камуфляжной» или, наоборот, подчёркнуто яркой «предупреждающей».
Скелет и мышечная система.
Опорно-двигательная система рыб — система органов и тканей рыб, которая позволяет им изменять своё положение в окружающей среде и осуществлять движение. Части опорно-двигательной системы, благодаря эволюционным видоизменениям, приспособлены также и для выполнения других специализированных функций.
В отличие от наземных позвоночных, череп которых состоит из сращённых костей, более чем 40 костных элементов черепа рыб могут двигаться независимо. Это позволяет вытягивать челюсти, раздвигать их в стороны, опускать жаберный аппарат и дно ротовой полости.
Подвижные элементы крепятся к более жёстко сочленённому нейрокраниуму, который окружает головной мозг. Нейрокраниум костных рыб в эволюции возникает из хрящевого черепа хрящевых рыб, к которому прирастают кожные костные пластинки.
Челюсти в классах костных и хрящевых рыб эволюционно образовались из третьей пары жаберных дуг (о чём свидетельствуют рудименты первых двух пар дуг у акул — так называемые губные хрящи).
У костистых рыб челюсти несут основные группы зубов на переднечелюстной ("premaxilla") и верхнечелюстной костях ("maxilla", верхняя челюсть»), на "dentale" и "articulare" (нижняя челюсть).
Несколько специализированных групп костей формируют дно ротовой полости и соединяют челюсти с другими элементами черепа. Наиболее рострально (впереди) расположена гиоидная дуга, которая играет важную роль при изменении объёма ротовой полости. За ней идут жаберные дуги, которые несут жаберные дыхательные структуры, и наиболее каудально расположены так называемые глоточные челюсти, которые также могут нести зубы.
Во время питания мышцы, которые опускают комплекс нижней челюсти, смещают этот комплекс таким образом, что челюсти выдвигаются вперед. При этом в ротовой полости создаётся всасывающая сила за счёт опускания дна рта. Жаберные крышки при этом закрывают жабры. Такая комбинация движений приводит к всасыванию воды и втягиванию пищи в рот.
Движущая сила при плавании рыб создаётся плавниками: парными (грудные и брюшные) и непарными (спинной, анальный, хвостовой). При этом у костных рыб плавники состоят из костных (у некоторых примитивных — из хрящевых) лучей, соединённых перепонкой. Присоединённые к основным лучам мышцы могут разворачивать или свёртывать плавник, изменять его ориентацию или генерировать волнообразные движения. Хвостовой плавник, который у большинства рыб является основным движителем, поддерживается набором специальных сплюснутых костей (уростиль и др.) и ассоциированных с ними мышц в дополнение к боковым мышцам туловища. По соотношению размеров верхней и нижней лопасти хвостовой плавник может быть гомоцеркальным (когда обе лопасти имеют равную величину; это характерно для большинства лучепёрых рыб) или гетероцеркальным (когда одна лопасть, обычно верхняя, больше другой; характерно для акул и скатов, а также осетровых; у таких представителей костных рыб как меченосцы хвостовой плавник гетероцеркальный с большей нижней лопастью).
Позвоночник рыб состоит из отдельных, несращённых позвонков. Позвонки рыб амфицельные (то есть обе их торцевые поверхности вогнутые), между позвонками находится хрящевая прослойка; невральные дуги, расположенные сверху над телами позвонков, формируют позвоночный канал, защищающий спинной мозг. Позвоночник делится на два отдела: туловищный и хвостовой. От позвонков туловища в стороны отходят рёберные отростки, к которым крепятся рёбра. В хвостовом отделе позвоночника боковых отростков нет, зато кроме невральной дуги имеется сосудистая (гемальная) дуга, которая прикрепляется к позвонку снизу и защищает проходящий в ней большой кровеносный сосуд — брюшную аорту. От невральных и гемальных дуг вертикально вверх и вниз отходят заострённые остистые отростки.
Плавники.
Плавники рыб служат главным образом основными движителями для активного плавания, а также для стабилизации положения и маневрирования в толще воды и даже для опоры и хождения по грунту. В процессе эволюции строение плавников у некоторых рыб изменилось для выполнения иных жизненных функций. Например брюшные плавники или анальный плавник либо их отдельные лучи или части могут быть преобразованы в особые копулятивные органы, служащие для внутреннего оплодотворения. Первый луч спинного плавника у некоторых глубоководных рыб-хищников может быть превращён в своеобразное удилище — илиций, служащее для приманивания потенциальных жертв. Различают парные и непарные плавники.
К непарным плавникам относятся: спинной плавник (, обозначается заглавной латинской буквой D), который может быть представлен у разных рыб числом от одного до трёх, крайне редко отсутствует вовсе; анальный, или подхвостовой, плавник (, обозначается буквой A), может быть у разных рыб в количестве от одного до двух, изредка отсутствует вовсе; хвостовой плавник (, обозначается буквой C) у некоторых рыб отсутствует; жировой плавник (), встречающийся у некоторых групп рыб.
Парные плавники, по сути, представляют собой парные конечности, опирающиеся на соответствующие им внутренние скелетные элементы — пояса плавников. У подавляющего большинства рыб представлены двумя парами плавников: грудным плавником (, обозначается латинской буквой P) и брюшным плавником (, обозначается заглавной латинской буквой V). У некоторых рыб могут отсутствовать брюшные, а в редких случаях — и грудные плавники. По положению на туловище обычно различают 3 основных типа брюшных плавников: абдоминальные — расположены в средней части тела позади грудных плавников, торакальные — расположены под грудными плавниками, и югулярные — расположены впереди грудных плавников на горле.
Мышцы.
В правую и левую стороны от позвоночника отходит мембрана из соединительной ткани, которая называется горизонтальной септой (перегородкой) и разделяет мышцы тела рыбы, называемые миомерами, на дорсальную (верхнюю) и вентральную (нижнюю) части.
Плавание рыб осуществляется благодаря сокращению мышц, которые соединяются сухожилиями с позвоночником. Миомеры в теле рыбы имеют форму конусов, вложенных один в другой, и разделённых перегородками соединительной ткани (миосептами). Сокращение миомеров через сухожилие передаётся на позвоночник, побуждая его к волнообразному движению (ундуляции) по всей длине тела или лишь в хвостовом его отделе.
В целом мускулатура рыб представлена двумя типами мышц. «Медленные» мышцы используются при спокойном плавании. Они содержат много миоглобина, который обуславливает их красный цвет. Метаболизм в них в основном аэробный, то есть в них происходит полное окисление питательных веществ. Такие красные мышцы могут долго не утомляться и потому используются при долгом монотонном плавании. В отличие от красных, «быстрые» белые мышцы с преимущественно гликолитиновым метаболизмом способны к быстрому, но кратковременному сокращению. Они используются при быстрых внезапных рывках; при этом они могут давать большую, чем красные мышцы, мощность, но быстро утомляются.
У многих рыб мышцы могут выполнять также и некоторые другие функции кроме движения. У некоторых видов они участвуют в терморегуляции (термогенезе). У тунцов (Scombridae) благодаря активности мускулатуры температура мозга поддерживается на более высоком уровне, чем температура других частей тела, когда тунцы охотятся на кальмаров в глубоких холодных водах.
Электрические токи, которые генерируются при сокращении мышц, используются слонорылом как коммуникационный сигнал; у электрических скатов электрические импульсы, генерированные видоизменёнными мышцами, используются для поражения других животных. Модификация мышечных клеток для выполнения функции электрической батареи эволюционно происходила независимо и неоднократно в разных таксонах: глазных мышц у рыб-звездочётов (Uranoscopidae), жевательной мускулатуры (электрические скаты) или осевой мускулатуры (электрические угри).
Нервная система и органы чувств.
Головной мозг рыб принято делить на три большие части: передний, средний и задний мозг. Передний мозг состоит из конечного мозга и промежуточного мозга. На ростральном (переднем) конце конечного мозга расположены обонятельные луковицы, которые получают сигналы от обонятельных рецепторов. Обонятельные луковицы обычно увеличены у рыб, которые активно используют нюх, например у акул. В коре среднего мозга находятся оптические доли. Задний отдел подразделяется на собственно задний мозг (к нему относится мост и мозжечок) и продолговатый мозг.
Спинной мозг проходит внутри нервных дуг позвонков по всей длине позвоночника рыбы. Аналогично миомерам и позвоночнику, в строении спинного мозга наблюдается сегментация. В каждом сегменте тела сенсорные нейроны входят в спинной мозг через дорсальные корешки, а двигательные нейроны выходят из него через вентральные.
Глаза рыб по своему строению очень схожи с глазами других позвоночных. Важное отличие глаза рыб от глаза млекопитающих заключается в том, что для аккомодации рыбы не изменяют кривизну хрусталика, а приближают его к сетчатке или отдаляют от неё. Структура сетчатки у рыб варьирует в зависимости от места их обитания: у глубоководных видов глаза приспособлены для восприятия света преимущественно красной части спектра, а рыбы, которые живут на мелководье, воспринимают более широкий спектр. У некоторых глубоководных рыб, например у жемчужноглазовых, глаз имеет телескопическое строение, позволяющее улавливать в дисфотической зоне (сумеречной зоне) океана самый минимальный свет. Кроме того, у этих рыб имеется совершенно уникальный «жемчужный орган», внешне представляющий собой белое пятно на поверхности глаза, которое, будучи связанным со вторичной сетчаткой, заметно расширяет сектор обычного поля зрения рыб. Имеются также много видов слепых рыб — морских глубоководных или пресноводных «пещерных» (подземных) рыб, утративших полностью или частично функцию зрения. В 2011 году был обнаружен очередной новый вид подобных слепых рыб — "Bangana musaei".
Обоняние и вкус позволяют рыбам ориентироваться в химическом составе окружающей среды. Способность рыб к ощущению химических сигналов хорошо иллюстрируют лососи, которые, идя на нерест из моря к речным системам, определяют по запаху воды именно тот ручей или реку, в котором когда-то сами вышли из икры. Обонятельные рецепторы рыб расположены в ноздрях. Они, в отличие от ноздрей других позвоночных, не соединяются с носоглоткой (хоаны есть только у двоякодышащих рыб). Вкусовые рецепторы у многих рыб есть не только в ротовой полости, но и на жаберных структурах, усиках и даже плавниках и просто на поверхности тела.
Механорецепторы рыб содержатся во внутреннем ухе (парные органы слуха и равновесия), а также органах боковой линии. Внутреннее ухо пластиножаберных (акул и скатов) и костистых рыб состоит из трёх полукружных каналов, расположенных в трёх взаимно перпендикулярных плоскостях, и трёх камер, каждая из которых содержит отолиты. Некоторые виды рыб (например, серебряный карась и разные виды сомов) имеют комплекс косточек (веберов аппарат), соединяющий ухо с плавательным пузырём. Благодаря этой адаптации внешние вибрации усиливаются плавательным пузырём, как резонатором. Отолит в третьей камере обеспечивает рыбе ориентацию в пространстве.
Перемещение воды по поверхности рыбы ощущается структурами, которые называются нейромастами. Эти органы могут быть рассеяны поодиночке или собраны под чешуёй в совокупность каналов, которые называются боковой линией. Нейромасты включают полушарие гелевой консистенции (капулу) и сенсорные волосовидные клетки, а также синапсы нервных волокон, которые находятся на волосовидных клетках. Ток воды отгибает волосовидные клетки, вызывая нервные импульсы. Эти импульсы позволяют составить довольно подробную картину окружающей среды: некоторые виды рыб, лишённые глаз, целиком ориентируются и перемещаются, полагаясь только на органы боковой линии.
Электрорецепция и электрические органы.
Ощущение электрического поля — электрорецепция — присуще многим видам рыб, не только тем, которые могут сами генерировать электрические разряды. Электрические сигналы улавливаются с помощью специальных ямок на поверхности тела. Эти ямки заполнены гелеподобным веществом, которое проводит электрический ток и содержит в себе электрорецепторные клетки, которые образуют синапсы с нейронами.
По характеру вырабатываемых электрических импульсов рыб делят на неэлектрических (большинство рыб), слабоэлектрических (мормиры, гимнарх), и сильноэлектрических (электрические сом, угорь, скат).
Неэлектрические рыбы в результате нервно-мышечной деятельности создают слабые электрические импульсы 100—200 мк. В косяке рыб образуется общее биоэлектрическое поле, сформированное суммированными электрическими полями отдельных особей, которое влияет на поведение и ориентацию рыб. У неэлектрических рыб (за исключением хрящевых, некоторых осетровых, сомовых) электрорецепторы отсутствуют. Они воспринимают электрический ток, который действует на другие рецепторы и свободные нервные окончания.
Слабо- и сильноэлектрические рыбы воспринимают электрические поля с помощью электрорецепторов боковой линии. Специализированные электрические органы служат им для защиты, нападения на добычу и ориентации. Они представляют собой парные, симметрично расположенные по бокам тела структуры, состоящие из пластинок, собранных в столбики. У скатов электрические органы, составляющие до 25 % массы тела, похожи на пчелиные соты. Каждый орган состоит из приблизительно 600 вертикальных призм, имеющих 6 граней. Каждую призму образуют примерно 40 электрических дисковидных пластинок, отделённых студенистой соединительной тканью. Каждая призма является отдельной электрической батареей.
Нервными центрами электрических органов у рыб являются электрические доли продолговатого мозга и спинной мозг.
Кровеносная система и газообмен.
У большинства рыб один круг кровообращения и двухкамерное сердце. У двоякодышащих рыб два круга кровообращения и неполные перегородки в предсердии и желудочке. Кровеносная система замкнутая, транспортирует кровь от сердца через жабры и ткани тела. В отличие от сердца других позвоночных, сердце рыб не приспособлено для отделения (даже частичного) обогащённой кислородом крови (артериальной) от необогащённой (венозной). Структурно сердце рыб представляет собой последовательную серию из камер, заполненных венозной кровью: венозный синус, предсердие, желудочек и артериальный конус. Камеры сердца разделены клапанами, которые позволяют крови при сокращении сердца двигаться только в одном направлении (от венозного синуса к артериальному конусу), но не наоборот.
Основным органом газообмена рыб являются жабры, которые расположены по сторонам ротовой полости. У костистых рыб они закрыты жаберной крышкой, у других классов — свободно приоткрываются наружу. Во время вентиляции жабр вода попадает в ротовую полость через рот, а потом проходит между жаберными дугами и выходит наружу из-под жаберных крышек. Анатомически жабры состоят из полупроницаемых мембран и кровеносных сосудов, которые расположены на костных жаберных дугах. Специфической структурой, приспособленной для газообмена, являются жаберные лепестки, где под тонким эпителием находятся сильно разветвлённые капилляры.
В дополнение к жабрам рыбы могут использовать и другие способы газообмена. На стадии личинки значительная часть газообмена осуществляется через кожу; несколько видов рыб имеют «лёгкие», где сохраняется увлажнённый воздух (амия); некоторые виды могут дышать воздухом непосредственно (гурами).
Пищеварительная система и питание.
Пищу рыбы захватывают и удерживают зубами (обычно недифференцированными), находящимися во рту. Изо рта через глотку и далее через пищевод пища попадает в желудок, где подвергается обработке ферментами, содержащимися в желудочном соке. После желудка пища попадает в тонкую кишку с протоками печени и поджелудочной железы, а оттуда через анальное отверстие или клоаку выводятся наружу непереработанные остатки пищи.
Рыбам присущ широкий спектр пищевых объектов и способов питания. В целом все рыбы могут быть разделены на растительноядных, хищников, детритофагов и всеядных. Растительноядные рыбы могут питаться как макро-, так и микроводорослями, а также водными цветковыми растениями. Некоторые из таких рыб приспособлены к питанию планктоном, фильтруя его специализированными жаберными тычинками на жаберных дугах: так, разные виды толстолобиков ("Hypophthalmichthys molitrix", "Hypophthalmichthys nobilis") питаются исключительно за счёт этого ресурса и являются строго определёнными рыбами-фильтраторами микроскопических водорослей, которые живут в толще воды. Морские рыбы из семейства Pomacentridae питаются бентосными макроводорослями, причём каждая рыба имеет определённый участок, где она вырывает все водоросли, оставляя для роста только те виды, которыми питается,— при этом не вырывая их во время питания, а лишь частично объедая.
Хищные рыбы используют в качестве пищевого ресурса широчайший спектр объектов. Планктонные фильтраторы (такие как китовая акула) отфильтровывают зоопланктон из толщи воды; кроме того, рыбы могут питаться ракообразными, моллюсками, плоскими, круглыми и кольчатыми червями, а также другими рыбами. Наиболее специализированными из хищных рыб являются те, которые питаются эктопаразитами других рыб (Labridae, Chaetodontidae и прочие): они выбирают паразитов и отмершие кусочки кожи с поверхности тела рыб-«клиентов», которые специально посещают места обитания «чистильщиков».
Многие виды рыб изменяют тип питания на протяжении жизни: например, в молодом возрасте питаются планктоном, а позже — рыбами или крупными беспозвоночными.
Выделительная система и осморегуляция.
Жизнь в водной среде приводит к ряду проблем с осморегуляцией, с которыми сталкиваются как пресноводные, так и морские рыбы. Осмотическое давление крови рыб может быть как ниже (у морских рыб), так и выше (у пресноводных), чем осмотическое давление внешней среды. Хрящевые рыбы — изоосмотические, но при этом в их организме концентрация солей намного ниже, чем в окружающей среде. Выравнивание осмотического давления при этом достигается благодаря повышенному содержанию мочевины и триметиламиноксида (ТМАО) в крови. Поддержание низкой концентрации солей в организме хрящевых рыб осуществляется благодаря выделению солей почками, а также специализированной ректальной железой, которая соединяется с пищеварительным трактом. Ректальная железа концентрирует и выводит как ионы натрия, так и хлорид-ионы из крови и тканей организма.
Костистые рыбы не являются изоосмотическими. Большая эпителиальная поверхность жабр, необходимая для эффективного выполнения функции газообмена, потребовала выработки специальных эволюционных механизмов противодействия осмотическому стрессу в гипо- или гипертонической среде.
Жабры костистых рыб играют ведущую роль в осморегуляции, благодаря "хлоридным" эпителиальным клеткам, позволяющим осуществлять вывод или задержку ионов хлора и натрия за счёт активности Na +-K+-ATPa. Хлоридные клетки за счёт активности таких ферментов, как трансаминазы и глутаматдегидрогеназы, играют важную роль в экскреции азотсодержащих продуктов жизнедеятельности.
Морские костистые рыбы с низкой (относительно окружающей среды) концентрацией ионов в организме постоянно теряют воду, которая под действием осмотического давления выходит из их тканей наружу. Эти потери компенсируются за счёт питья и фильтрации солёной воды. Катионы натрия и хлорид-ионы выводятся из крови через хлоридные клетки жаберного эпителия, в то время как катионы магния и сульфатные анионы выводятся почками. Пресноводные рыбы сталкиваются с противоположной проблемой (поскольку у них концентрация солей в организме выше, чем в окружающей среде). Осмотическое давление у них выравнивается благодаря захвату ионов из водной среды через жаберные мембраны, а также благодаря выделению большого количества мочевины.
Виды рыб, мигрирующие между средами с большой разницей осмотического давления, направление переноса солей через жаберный эпителий изменяется в зависимости от солёности среды: в гипертонических средах организм экскретирует, а в гипотонической среде перестраивается на поглощение солей. Экспериментально установлено, что процесс физиологической адаптации организма рыбы, это процесс постепенный, приводящий к значительной перестройке биохимических компонентов и морфологии жаберного эпителия.
В осморегуляторных изменениях таких рыб, как лососёвые, задействован стероидный гормон стресса кортизол, который отвечает за переход на гипертонические среды обитания (то есть переход с пресной воды в солёную), а также пролактин, отвечающий за переход на гипотоническую среду обитания (из морской в пресную).
Размножение.
Типы.
Двуполое размножение.
Двуполое размножение — наиболее обычная и распространённая форма. При этом способе репродукции оба пола чётко разделены. У некоторых видов очень ярко выражены вторичные половые признаки и наблюдается половой диморфизм. Характеристики вторичных половых признаков обычно проявляет только один пол (в большинстве случаев — самцы). Они не относятся к половому созреванию, могут интенсифицироваться на протяжении брачного сезона и не оказывают содействия индивидуальному выживанию. Вторичные половые признаки могут проявляться в виде различий в размерах тела, частей тела (например, удлинённые плавники), строения тела (например, выросты на голове), расположении зубов, окраске, а также встречаются в виде отличий между акустическими, химическими, электрическими и другими характеристиками самцов и самок. Двуполое размножение может быть моногамным, полигамным и промискуитетом.
Гермафродитизм.
У рыб-гермафродитов пол может меняться в течение жизни: они функционируют то как мужская, то как женская особь (случайно или последовательно). Есть две формы последовательного изменения пола — протоандрия и протогиния. Протоандрические гермафродиты — это особи, которые в начале своей жизни являются самцами, а позднее претерпевают кардинальные перестройки половой системы и становятся полностью функциональными самками. Такая форма преобразования пола широко распространена в семействе морских окуней (Serranidae). Все губаны (Labridae) являются протогиническими гермафродитами, когда все самцы являются преобразованными с возрастом самками. В этом семействе на смену пола могут влиять как факторы окружающей среды, так и социальные отношения в популяции. Социальная структура губанов заключается в наличии гаремов, которые состоят из самок и одного большого самца. Внутри группа структурирована по размеру, с самцом на верхушке иерархии. Если изъять из группы самку, другие самки (низшие по рангу) будут изменять своё иерархичное положение, обычно сдвигаясь на одну позицию вверх. Если же изъять из группы самца, самая крупная самка гарема старается занять его место, агрессивно отгоняя самцов, которые контролируют другие гаремы. Если ей это удаётся и никому из окружающих самцов не удаётся присоединить этот гарем к собственному, то эта самка начинает демонстрировать поведение самца, и после около 14 дней её половая система полностью изменяется, начиная продуцировать мужские половые клетки.
В таксонах, где половая принадлежность обусловлена социальной структурой, процесс изменения пола широко варьирует, и одна и та же особь может изменять пол несколько раз на протяжении жизни. С другой стороны, существуют таксоны (например, полосатые окуни, жёлтый окунь, большинство груперов), где половая принадлежность особей чередуется, но не испытывает влияния социальной структуры.
Случайные гермафродиты могут продуцировать как яйцеклетки, так и сперматозоиды — они потенциально имеют возможность самооплодотворения. Известны лишь три вида из отряда Cyprinodontiformes, которые функционируют как самооплодотворяющие гермафродиты: два вида рода "Cynolebias" и вид "Rivulus marmoratus". При этом самооплодотворение у "Rivulus marmoratus" является внутренним и в результате приводит к появлению гомозиготных, генетически идентичных потомков.
Более обычная форма случайного гермафродитизма наблюдается в родах "Hypoplectrus" и "Serranus" семейства окунёвых (Percidae). Хотя эти рыбы способны продуцировать сперматозоиды и яйцеклетки одновременно, на протяжении одного нереста они функционируют как представители только одного пола. Учитывая то, что один акт нереста может длиться несколько часов, рыбы одной пары могут обмениваться половыми ролями и продуцировать поочередно яйцеклетки (икру) или сперматозоиды (молоки).
Гиногенез.
Гиногенез считается особой разновидностью партеногенеза, который в чистом виде у рыб не встречается. При гиногенезе роль сперматозоида сводится к механической функции, запускающей процесс дробления яйца и эмбрионального развития. С помощью гиногенеза размножаются некоторые популяции или виды рыб, представленные в природе одними самками. Такие однополые формы рыб называют также спермопаразитами, которые для собственного размножения используют сперму самцов других, обычно близких бисексуальных видов, участвуя с ними в совместном нересте. При этом роль самцов других видов заключается лишь в продуцировании сперматозоидов, которые чисто механически активируют начало дробления яйца самки-спермопаразита, проникая внутрь её яйца через микропиле во внешней мембране (хорион), но не сливаются с женским геномом. Такой тип размножения также называют клонально-гиногинетическим. При этом все потомки одной самки становятся самками-клонами, генетически идентичными с материнской особью. Подобное размножение отмечено у карпообразных (Cypriniformes): у некоторых европейских полиплоидных популяций серебряного карася "Carassius gibelio", некоторых стабильных восточно-европейских полиплоидных форм щиповок рода "Cobitis", отдельных представителей карпозубообразных (Cyprinodontiformes), например в роде "Poeciliopsis," и некоторых других рыб.
Формы размножения.
В дополнение к трём типам размножения существуют три его разные формы внутри каждого типа: яйцерождение, яйцеживорождение и живорождение.
При яйцерождении в процессе нереста мужские и женские гаметы вымётываются в воду, где происходит оплодотворение. Иногда оплодотворение может быть и внутренним (как у скорпен — Scorpenidae, и американских сомов — Auchenipteridae), но самка после этого вымётывает оплодотворённую икру. На протяжении развития зародыш использует как желток яйца, так и имеющиеся в яйце капли жиров.
При яйцеживорождении, яйца всё время находятся в организме самки, оплодотворение внутреннее. Несмотря на нахождение яиц в теле самки, между материнским организмом и зародышем не возникает плацентарного контакта или контакта кругов кровообращения. Вместе с тем зародыш во время своего развития питается запасами питательных веществ, которые имеются в яйце. Мальки выходят из яиц внутри материнского организма, после чего немедленно выходят наружу. Наиболее известными рыбами, которым присуща такая форма размножения, являются представители Poeciliidae — широко распространённые в аквариумах гуппи и меченосцы. Эта форма размножения характерна также для латимерии.
Размножение в форме живорождения во многом подобно яйцеживорождению, но при этом между яйцом и материнским организмом возникает плацентарный контакт или контакт между их кругами кровообращения. Таким образом, эмбрион при развитии получает необходимые питательные вещества из организма матери. Наиболее обычна данная форма размножения для акул, но она присуща также и некоторым костистым рыбам, например жителям горных водоёмов из семейства Goodeidae и представителям семейства Embiotocidae.
Нерестовые миграции.
Некоторые виды рыб совершают регулярные миграции в подходящие для нереста места. Такие виды рыб могут иметь сложный аппарат осморегуляции, и в зависимости от того, в гипертоническую или гипотоническую среду совершается миграция, виды называются катадромными ( «вниз», «блуждающий») или анадромными ( «обратно», «блуждающий»), соответственно.
В ходе миграции к местам нереста лосось не питается, и истощается настолько, что уровень липидов в мышцах снижается с 10% до уровня десятых долей процента.
Установлено, что особи некоторых видов возвращаются именно в ту реку, в которой они появились, причём находят «свою» реку рыбы по запаху.
Забота о потомстве.
Не характерная для рыб забота о потомстве наблюдается преимущественно у видов в приливно-отливной зоне, в узких заливах и бухтах, а также в реках и озёрах.
Самец пятнадцатииглой морской колюшки сооружает своеобразное гнездо из кусочков водорослей, скрепляя их специальным секретом. Потом он загоняет в гнездо самок, которые откладывают икру, а самец остаётся охранять икру и молодь.
Самка горчака может вытягивать своеобразный яйцеклад в длинную трубку и откладывает икру в мантийную полость пресноводных двустворчатых моллюсков. Самец выпускает сперму рядом с моллюском, и когда тот захватывает корм, втягивая в себя воду, икра оплодотворяется.
Особое приспособление имеется у самца австралийского гулливерова куртуса. Самец вынашивает икринки у себя на лбу. Гроздья икринок, прикреплённых клейкими нитевидными выростами с обоих концов, крепко удерживаются крючком, образованным лучами его спинного плавника.
Сложное поведение, связанное с заботой о потомстве, развилось у морских игл и морских коньков.
Обитающие в бассейне реки Амазонки дискусы выкармливают малька выделениями на боках.
Болезни.
Как и другие животные, рыбы могут болеть инфекционными и инвазионными заболеваниями (гельминтозы и другие). Для предотвращения болезней у них есть множество защитных средств. Неспецифическая защита включает кожу и чешуйки, а также слой слизи, выделяемый эпидермисом, который задерживает и подавляет рост микроорганизмов. Если патогенные микроорганизмы нарушают эти защитные механизмы, организм рыбы реагирует неспецифической воспалительной реакцией. В последние годы вакцины стали широко использоваться в аквакультуре, а также с декоративными рыбами, например вакцины против фурункулеза у выращиваемого лосося и вирус герпеса кои у кои.
Факторы развития злокачественных новообразований у рыб - биологические (бактерии и вирусы), наследственные, химические (ядовитые органические вещества и соединения тяжёлых металлов, растворенные в воде), физические (естественные и антропогенные радиоактивные вещества, оказавшиеся в природных водах). 
Некоторые виды используют рыб-чистильщиков для удаления внешних паразитов. Наиболее известными из них являются голубые губаны-чистильщики рода Labroides, обитающие на коралловых рифах в Индийском и Тихом океанах. Поведение при очистке наблюдалось у ряда групп рыб, включая интересный случай между двумя цихлидами одного и того же рода, Etroplus maculatus, чистильщиком, и гораздо более крупным Etroplus suratensis.
Иммунная система.
Бесчелюстные рыбы полагаются на участки лимфатической системы в других органах для производства иммунных клеток. Например, эритроциты, макрофаги и плазматические клетки образуются в передней почке (или пронефросе) и некоторых областях кишечника (где созревают гранулоциты). Они напоминают примитивный костный мозг у карги. Хрящевые рыбы (акулы и скаты) обладают более развитой иммунной системой. У них есть три уникальных специализированных органа: эпигональные органы (лимфоидная ткань, похожая на кости млекопитающих), которые окружают гонады, орган Лейдига в стенках пищевода и спиральный клапан в кишечнике. В этих органах содержатся типичные иммунные клетки (гранулоциты, лимфоциты и плазматические клетки). Они также обладают идентифицируемым тимусом и хорошо развитой селезенкой (их самый важный иммунный орган), где развиваются и хранятся различные лимфоциты, плазматические клетки и макрофаги. Хондростиевые рыбы (осетровые, веслоногие рыбы и бичиры) обладают основным участком для производства гранулоцитов в массе, которая связана с мозговыми оболочками (мембранами, окружающими центральную нервную систему). Их сердце часто покрыто тканью, содержащей лимфоциты, ретикулярные клетки и небольшое количество макрофагов. Хондростеальная почка является важным кроветворным органом, в котором развиваются эритроциты, гранулоциты, лимфоциты и макрофаги.
Как и у хондростеевых рыб, основные иммунные ткани костистых рыб (или телеостеи) включают почку (особенно переднюю почку), в которой содержится множество различных иммунных клеток. Кроме того, рыбы-телеосты обладают тимусом, селезенкой и рассеянными иммунными областями в тканях слизистой оболочки (например, в коже, жабрах, кишечнике и гонадах). Как и иммунная система млекопитающих, эритроциты, нейтрофилы и гранулоциты, как полагают, находятся в селезенке, в то время как лимфоциты являются основным типом клеток, обнаруживаемых в тимусе. В 2006 году лимфатическая система, аналогичная таковой у млекопитающих, была описана у одного вида костистых рыб, данио-рерио. Хотя это ещё не подтверждено, эта система, по-видимому, будет там, где наивные (нестимулированные) Т-клетки накапливаются в ожидании встречи с антигеном.
В- и Т-лимфоциты, несущие иммуноглобулины и Т-клеточные рецепторы, соответственно, обнаружены у всех челюстных рыб. Действительно, адаптивная иммунная система в целом эволюционировала у предка всех челюстных позвоночных.
Классификация.
В ранних классификациях рыб рассматривали как класс либо надкласс позвоночных, в который включали все известные группы хрящевых, костных и прочих рыб. В настоящее время учёные-систематики рассматривают рыб как парафилетическую группу, так как помимо остальных в неё включают лопастепёрых рыб, среди ископаемых представителей которых были предки наземных позвоночных — четвероногих (Tetrapoda), которые рыбами не являются.
Современных рыб разделяют на 3 класса: хрящевые, лучепёрые и лопастепёрые рыбы. Ещё во второй половине XX века последние две группы в качестве подклассов включались в класс костных рыб, однако в последние десятилетия большинством ихтиологов рассматриваются как самостоятельные классы. Тем не менее, некоторые авторитетные исследователи в последние годы склонны снова объединять лучепёрых и лопастепёрых рыб в один класс Osteichthyes.
Отношения основных подгрупп рыб представлены ниже:
Экология рыб.
Рыбы живут в воде, которая занимает огромные пространства. Около 361 млн км², или 71 % всей поверхности земного шара, занято морями и океанами, и 2,5 млн км² — внутренними водоёмами. Рыбы распространены от высокогорных водоёмов (более 6000 м над уровнем океана) до наибольших глубин Мирового океана (11022 м). Рыбы встречаются также в полярных водах и тропических зонах.
В настоящее время рыбы — господствующая группа животных в водных биоценозах. Наряду с китообразными, они завершают цепи питания.
Рыбы приспособились к различным условиям водной среды. Факторы, влияющие на них, делятся на:
К наиболее важным абиотическим факторам относятся температура воды, солёность, содержание газов и др.
По местам обитания различают морских, пресноводных и проходных рыб.
При достаточно большом разнообразии видов образа жизни всех рыб можно включить в состав нескольких экотипов:
Многие виды рыб содержатся в неволе — в аквариумах. Содержание и разведение аквариумных рыб в некоторых случаях помогает сохранить редкие их виды, вымирающие в исконных местах обитания.
Экономическое значение и угрозы.
В экономическом отношении значительную роль играет рыболовный промысел, разведение рыб как объектов аквакультуры и торговля аквариумными декоративными рыбами.
В 1961 году в водоёмы бассейна р. Сырдарьи был успешно интродуцирован белый амур для борьбы растительной биомассой каналов и коллекторов, являвшихся биопомехой , что в значительной степени позволило восстановить судоходство на реке.
Экономическая деятельность человека способна поставить под угрозу численность популяций тех или иных видов напрямую или опосредованно, через загрязнение вод, интродуцирование чужих видов, изменение русел рек и изменение климата.
Рыбы в культуре и искусстве.
В мифологии.
Рыбы, как и киты, в древности считавшиеся рыбами, наряду с другими животными играют свою роль в мифологии и религии различных народов мира.

</doc>
<doc id="899" url="https://ru.wikipedia.org/wiki?curid=899" title="GNU FDL">
GNU FDL

GNU Free Documentation License ("лицензия свободной документации GNU"), или просто GNU FDL (GFDL) — копилефт-лицензия, разработанная Фондом свободного программного обеспечения как дополнение к GNU GPL, популярной лицензии для свободного ПО. Как и GNU GPL, она даёт лицензиату права на воспроизведение, распространение и изменение исходной работы, однако требует, чтобы все копии и производные работы также распространялись под GFDL.
Черновик лицензии был опубликован в конце 1999 года.
GNU FDL исходно предназначалась для пользовательских руководств, учебников и другой документации, обычно сопровождающей компьютерные программы. Несмотря на это, лицензия GFDL может использоваться для любых документов, вне зависимости от тематики. Так, содержимое всех текстов Википедии раньше публиковалось на основе лицензии GNU FDL без неизменяемых разделов. На данный момент для новых статей используется Creative Commons BY-SA.
Не существует официального перевода GNU FDL на русский язык, поэтому юридическую силу имеет только англоязычный вариант.
Принципы лицензии.
Если автор произведения или его правообладатель публикует произведение под данной лицензией, тем самым он предлагает любому широкие права на это произведение: лицензия допускает воспроизведение, распространение и изменение исходной работы, в том числе и в коммерческих целях. Со своей стороны лицензиат обязуется соблюдать условия лицензии. Эти условия включают в себя, в частности, обязательное указание имени автора или авторов.
Вместе с тем авторы, в соответствии с условиями лицензии, могут отказаться от указания имени или их упоминания в производных работах.
Кроме того, будучи основанной на концепции копилефта, GNU FDL требует, чтобы любые копии защищённого ею текста (в том числе производные работы) распространялись на тех же самых условиях, без добавления дополнительных ограничений. Каждая копия должна сопровождаться исходным текстом лицензии (ссылкой в электронном виде или печатной версией при печати на бумажных носителях). При публикации документа в «непрозрачном» формате в количестве свыше 100 экземпляров каждая копия должна сопровождаться копией в «прозрачном» формате либо ссылкой на неё.
Лицензиат, нарушающий условия лицензии, автоматически теряет все предоставленные ему лицензией права.
Неизменяемые разделы.
GFDL предусматривает возможность существования в документе неизменяемых разделов (также говорят «инвариантные секции», ). Эти разделы должны сохраняться в неизменном виде во всех производных работах. Их удаление тоже недопустимо. Они предназначены исключительно для описания отношения к, и связи авторов и издателей с произведением, так как Ричард Столлман считал, что изменение произведений, выражающих мнение, означает искажение утверждений автора.
С марта 2006 года проектом Debian было решено считать FDL условно свободной — только при отсутствии неизменяемых разделов в лицензии к данному документу. Википедия тоже не допускает существования неизменяемых разделов.
Критика.
Существует достаточно серьёзная критика GNU FDL. В частности, FDL:

</doc>
<doc id="903" url="https://ru.wikipedia.org/wiki?curid=903" title="753 год">
753 год



</doc>
<doc id="906" url="https://ru.wikipedia.org/wiki?curid=906" title="1941 год">
1941 год

События.
1941 год ознаменовался вступлением Советского Союза и Соединённых Штатов Америки во Вторую мировую войну и началом реализации нацистской Германией политики «Окончательного решения еврейского вопроса». События в Пёрл-Харборе и на Дальнем Востоке спровоцировали самую серьёзную в истории человечества глобальную конфронтацию, поставившую мир на грань выживания — превращение европейской войны в конфликт планетарного масштаба.
Персоны года.
Человек года по версии журнала Time — Франклин Рузвельт, президент США.
Родились.
"См. также: "
Скончались.
"См. также: "
"Список умерших в 1941 году"

</doc>
<doc id="907" url="https://ru.wikipedia.org/wiki?curid=907" title="Эхоконференция">
Эхоконференция

Эхоконфере́нция ("жарг." эха, эхехеха) — форма общения в сети Фидонет, разновидность телеконференций. По своему внешнему виду и функциональным возможностям, социальному составу и т. д. напоминает группу новостей в сети Интернет, однако использует совсем другие средства доставки — эхобон, построенный по принципам FTN.
Разновидностью эхоконференции является файл-эхоконференция (фэха), предназначенная исключительно для передачи двоичных файлов.
Наиболее близким аналогом эхоконференций являются группы новостей — в том виде, как они были приняты в сети Usenet. Функциональным аналогом файл-эхоконференции (но с трафиком, бо́льшим на несколько порядков) являются группы иерархии alt.binaries.
Технические свойства.
У каждой эхи есть своё уникальное имя. Название большинства русскоязычных эх состоит из префикса области распространения (города или страны; например, SPB, MO, KIEV, RU, SU) и одного или нескольких слов, отражающих тематику эхи. Поля обычно разделяются точкой (например, SPB.LEEI или RU.ANEKDOT). Эти правила не обязательны, из них существуют исключения — например, русскоязычная эха HUMOR.FILTERED.
В англоязычных частях сети слова в названиях конференций обычно разделяются символами подчёркивания (что с технической точки зрения является таким же допустимым символом, как буква или точка) и не имеют префиксов — например, ASCII_ART.
Изначально эха находится на какой-либо определённой ноде, и если подписчиком этой эхи не является аплинк этой ноды (узел, которому нода раздаёт свои эхи для дальнейшей их раздачи по Фидонету; чаще всего таким узлом является какой-нибудь хаб), тогда сообщения эхи могут читать лишь поинты и линки этой ноды и такую эху называют локальной эхой (или просто локалкой). Как только сообщения эхи начинают поступать на аплинка и её подписчиками уже являются другие ноды и их линки и поинты, эха обретает более или менее глобальное хождение.
Правила эх и модерирование.
Если глобальная эха является тематической, то в ней обычно существуют некоторые правила поведения (обычно явно прописанные в виде некоторого документа), а также есть назначенный (или выбранный) человек, следящий за соблюдением этих правил, — модератор. Также у модератора часто есть помощники — комодераторы.
Эхи, где есть легитимный модератор, называются "модерируемыми" и могут быть приняты на бекбон (, «хребет»; другое название — "эхобон") — условное виртуальное пространство, физическим воплощением которого является файл со списком эх, помещённых на бекбон, и данными модератора (фидошное имя, адрес, название станции). Эхи, принятые на бекбон R50, считаются "бонными", а их модераторы признаются официально утверждёнными координатором региона. В случае злостного нарушения правил это даёт модератору право требовать от узлов сети, предоставляющих доступ к эхе, технического отключения нарушителя.
Любого подписчика, нарушившего правила, модератор может предупредить, «наградить» (в эхах с русскоязычными модераторами) или отключить. Слово «наградить» написано в кавычках, так как никаких общепринятых поощрений в Фидо не существует, а под «наградами» понимаются разные степени предупреждения, выраженные в особой комбинации символов. Обычно используются следующие символы:
Реже используется:
В случае принятия модератором (или комодератором) решения о выставлении награды соответствующее письмо помещается в эху, а также нетмейлом уходит к нарушителю и его аплинку.
В случае если эха небонная и немодерируемая, то «награды» подписчикам никто не раздаёт, даже если он всех очень сильно раздражает. В этом случае есть два способа: либо настроить на этого подписчика твит, тогда все письма, посланные подписчиком в эху, не будут отображаться программой; либо же, если есть уверенность, что подписчик раздражает большую часть конференции, — пожаловаться его аплинку, ну а если подписчик к тому же грубо нарушает полиси (Устав сети) — пожаловаться координатору, или, как говорят, написать комплейн (, жалоба). Однако совершенно не факт, что жалобы приведут к чему-либо хорошему.

</doc>
<doc id="908" url="https://ru.wikipedia.org/wiki?curid=908" title="Фидо (значения)">
Фидо (значения)

Фидо́:

</doc>
<doc id="909" url="https://ru.wikipedia.org/wiki?curid=909" title="Модем">
Модем

Моде́м (акроним, составленный из слов модулятор и демодулятор) — устройство, применяющееся в системах связи для физического сопряжения информационного сигнала со средой его распространения, где он не может существовать без адаптации.
Модулятор в модеме осуществляет модуляцию (что является основным отличием модема от роутера — тот модуляции и демодуляции не осуществляет, если не имеет встроенного модема) несущего сигнала при передаче данных, то есть изменяет его характеристики в соответствии с изменениями входного информационного сигнала, демодулятор осуществляет обратный процесс при приёме данных из канала связи. Модем выполняет функцию оконечного оборудования линии связи. Само формирование данных для передачи и обработки принимаемых данных осуществляет т. н. терминальное оборудование (в его роли может выступать и персональный компьютер).
Модемы широко применяются для связи компьютеров через телефонную сеть ("телефонный модем"), кабельную сеть ("кабельный модем"), радиоволны (, радиорелейная связь). Ранее модемы применялись также в сотовых телефонах (пока не были вытеснены цифровыми способами передачи данных).
История.
Компания AT&amp;T Dataphone Modems в Соединённых Штатах Америки была частью SAGE (системы ПВО) в 1950-х годах. Она соединяла терминалы на различных воздушных базах, радарах и контрольных центрах с командными центрами SAGE, разбросанными по США и Канаде. SAGE использовала выделенные линии связи, но устройства на каждом конце этих линий были такими же по принципу действия, как и современные модемы.
Первым модемом для персональных компьютеров стало устройство Micromodem II для персонального компьютера Apple II, выпущенное в 1979 году компанией Hayes Microcomputer Products. Модем стоил 380 долл. и работал со скоростью 110/300 бит/с.
В 1981 году фирма Hayes выпустила модем Smartmodem 300 бит/с, система команд которого (Hayes-команды) стала стандартом де-факто в отрасли.
Виды компьютерных модемов.
Модемы различаются по исполнению (внешние или внутренние), по принципу работы (аппаратные или программные), по типу сети, к которой производится подключение, а также по поддерживаемым протоколам передачи данных.
Наибольшее распространение получили внутренние программные, внешние аппаратные и встроенные модемы.
Дополнительные функции.
Факс-модем — позволяет компьютеру, к которому он присоединён, принимать и передавать факсимильные изображения, как в чёрно-белом, так и в цветном виде, на другой факс-модем или обычный факс-аппарат.
Голосовой модем — с функцией оцифровки сигнала с телефонной линии и воспроизведения произвольного звука в линию. Часть голосовых модемов имеет встроенный микрофон.
Такой модем позволяет осуществить:

</doc>
<doc id="910" url="https://ru.wikipedia.org/wiki?curid=910" title="Компьютер">
Компьютер

&lt;noinclude&gt;
Компью́тер (,  — «вычислитель», от  — считать, вычислять) — функциональное устройство, способное выполнять значительный объём вычислений, включая многочисленные арифметические и логические операции, без вмешательства человека. Компьютер может быть как отдельным блоком, так и состоять из нескольких взаимосвязанных устройств. Является синонимом терминов «электронная вычислительная машина», «вычислительная система».
Компьютер функционирует под управлением компьютерных программ.
Использование компьютеров для различных целей описывается терминами «автоматизированный» (например, автоматизированный контроль или автоматизированное управление), «машинный» (например, машинная графика), «вычислительный» (например, вычислительная техника), иногда «цифровой» (например, цифровая экономика, цифровая валюта).
История терминологии.
Слово "компьютер" является производным от английских слов , , которые переводятся как «вычислять», «вычислитель» (английское слово, в свою очередь, происходит от латинского  — «вычислять»). Первоначально в английском языке это слово означало человека, производящего арифметические вычисления с привлечением или без привлечения механических устройств. В дальнейшем его значение было перенесено на сами машины, однако современные компьютеры выполняют множество задач, не связанных напрямую с математикой.
Впервые трактовка слова "компьютер" появилась в 1897 году в Оксфордском словаре английского языка. Его составители тогда понимали компьютер как "механическое" вычислительное устройство. В 1946 году словарь пополнился дополнениями, позволяющими разделить понятия цифрового, аналогового и электронного компьютера.
Понятие "компьютер" в целом является более общим, чем Электронно-вычислительная машина (ЭВМ); поскольку последняя является одним из способов реализации компьютера. ЭВМ подразумевает использование электронных компонентов в качестве её функциональных узлов, однако компьютер может быть устроен и на других принципах — он может быть механическим, биологическим, оптическим, квантовым и т. п., работая за счёт перемещения механических частей, движения электронов, фотонов или эффектов других физических явлений. Кроме того, по типу функционирования вычислительная машина может быть цифровой (ЦВМ) и аналоговой (АВМ). Однако все «неэлектронные» компьютеры являются или устаревшими, или крайне экзотическими, поэтому в русскоязычной практике термины «ЭВМ» и «компьютер» используются как синонимы. Так, Гражданский кодекс Российской Федерации систематически использует термин «ЭВМ» в значении «компьютер».
В настоящее время термин ЭВМ, как относящийся больше к вопросам конкретной физической реализации компьютера, почти вытеснен из бытового употребления и в основном используется инженерами цифровой электроники, как правовой термин в юридических документах, а также в историческом смысле — для обозначения компьютерной техники 1940—1980-х годов и больших вычислительных устройств, в отличие от персональных.
Экспоненциальное развитие компьютерной техники.
После изобретения интегральной схемы развитие компьютерной техники резко ускорилось. Этот эмпирический факт, замеченный в 1965 году соучредителем компании Intel Гордоном Е. Муром, назвали по его имени Законом Мура. Столь же стремительно развивается и процесс миниатюризации компьютеров. Первые электронно-вычислительные машины (например, такие, как созданный в 1946 году ЭНИАК) были огромными устройствами, весившими тонны, занимавшими целые комнаты и требовавшими большого количества обслуживающего персонала для успешного функционирования. Они были настолько дороги, что их могли позволить себе только правительства и большие исследовательские организации, и представлялись настолько экзотическими, что казалось, будто небольшая горстка таких систем сможет удовлетворить любые будущие потребности. В контрасте с этим, современные компьютеры — гораздо более мощные и компактные и гораздо менее дорогие — стали воистину вездесущими.
Архитектура и структура.
Архитектура компьютеров может изменяться в зависимости от типа решаемых задач. Оптимизация архитектуры компьютера производится с целью максимально реалистично математически моделировать исследуемые физические (или другие) явления. Так, электронные потоки могут использоваться в качестве моделей потоков воды при компьютерном моделировании (симуляции) дамб, плотин или кровотока в человеческом мозгу. Подобным образом сконструированные аналоговые компьютеры были обычны в 1960-х годах, однако сегодня стали достаточно редким явлением.
Результат выполненной задачи может быть представлен пользователю при помощи различных устройств ввода-вывода информации, таких как ламповые индикаторы, мониторы, принтеры, проекторы и т. п.
Квантовые ЭВМ.
Квантовый компьютер — вычислительное устройство, использующее явления квантовой суперпозиции и квантовой запутанности для передачи и обработки данных. Квантовый компьютер оперирует не битами, а кубитами. В результате он имеет возможность обрабатывать все возможные состояния одновременно, достигая огромного превосходства над обычными компьютерами в ряде алгоритмов.
Полноценный квантовый компьютер является пока гипотетическим устройством, сама возможность построения которого связана с серьёзным развитием квантовой теории. Разработки в данной области связаны с новейшими открытиями и достижениями современной физики. Сейчас реализованы лишь единичные экспериментальные системы, исполняющие фиксированный алгоритм небольшой сложности.
Первым практическим высокоуровневым языком программирования для такого вида компьютеров считается язык Quipper, основанный на Haskell (см. Квантовое программирование).
Конструктивные особенности.
Современные компьютеры используют весь спектр конструкторских решений, разработанных за всё время развития вычислительной техники Эти решения, как правило, не зависят от физической реализации компьютеров, а сами являются основой, на которую опираются разработчики. Ниже приведены наиболее важные вопросы, решаемые создателями компьютеров:
Цифровой или аналоговый.
Фундаментальным решением при проектировании компьютера является выбор, будет ли он цифровой или аналоговой системой. Если цифровые компьютеры работают с дискретными численными или символьными переменными, то аналоговые предназначены для обработки непрерывных потоков поступающих данных. Сегодня цифровые компьютеры имеют значительно более широкий диапазон применения, хотя их аналоговые собратья всё ещё используются для некоторых специальных целей. Следует также упомянуть, что здесь возможны и другие подходы, применяемые, к примеру, в импульсных и квантовых вычислениях, однако пока что они являются либо узкоспециализированными, либо экспериментальными решениями.
Примерами аналоговых вычислителей, от простого к сложному, являются: номограмма, логарифмическая линейка, астролябия, осциллограф, телевизор, аналоговый звуковой процессор, автопилот, мозг.
Среди наиболее простых дискретных вычислителей известен абак, или обыкновенные счёты; наиболее сложной из такого рода систем является суперкомпьютер.
Система счисления.
Примером компьютера на основе десятичной системы счисления является первая американская вычислительная машина Марк I.
Важнейшим шагом в развитии вычислительной техники стал переход к внутреннему представлению чисел в двоичной форме. Это значительно упростило конструкции вычислительных устройств и периферийного оборудования. Принятие за основу двоичной системы счисления позволило более просто реализовывать арифметические функции и логические операции.
Тем не менее, переход к двоичной логике был не мгновенным и безоговорочным процессом. Многие конструкторы пытались разработать компьютеры на основе более привычной для человека десятичной системы счисления. Применялись и другие конструктивные решения. Так, одна из ранних советских машин работала на основе троичной системы счисления, использование которой во многих отношениях более выгодно и удобно по сравнению с двоичной системой (проект троичного компьютера Сетунь был разработан и реализован талантливым советским инженером Н. П. Брусенцовым).
Под руководством академика Хетагурова Я. А. разработан «высоконадёжный и защищённый микропроцессор недвоичной системы кодирования для устройств реального времени», использующий систему кодирования 1 из 4 с активным нулём.
В целом, однако, выбор внутренней системы представления данных не меняет базовых принципов работы компьютера — любой компьютер может эмулировать любой другой.
Хранение программ и данных.
Во время выполнения вычислений часто бывает необходимо сохранить промежуточные данные для их дальнейшего использования. Производительность многих компьютеров в значительной степени определяется скоростью, с которой они могут читать и писать значения в (из) памяти и её общей ёмкости. Первоначально компьютерная память использовалась только для хранения промежуточных значений, но вскоре было предложено сохранять код программы в той же самой памяти (архитектура фон Неймана, она же «принстонская»), что и данные. Это решение используется сегодня в большинстве компьютерных систем. Однако для управляющих контроллеров (микро-ЭВМ) и сигнальных процессоров более удобной оказалась схема, при которой данные и программы хранятся в различных разделах памяти (гарвардская архитектура).
Программирование.
Способность машины к выполнению определённого изменяемого набора инструкций (программы) без необходимости физической переконфигурации является фундаментальной особенностью компьютеров. Дальнейшее развитие эта особенность получила, когда машины приобрели способность динамически управлять процессом выполнения программы. Это позволяет компьютерам самостоятельно изменять порядок выполнения инструкций программы в зависимости от состояния данных. Первую реально работающую программируемую вычислительную машину сконструировал немецкий инженер Конрад Цузе в 1941 году.
При помощи вычислений компьютер способен обрабатывать информацию по определённому алгоритму. Решение любой задачи для компьютера является последовательностью вычислений.
В большинстве современных компьютеров проблема сначала описывается в понятном им виде (при этом вся информация, как правило, представляется в двоичной форме — в виде единиц и нулей, хотя компьютер может быть реализован и на других основаниях, как целочисленных — например, троичный компьютер, так и нецелых), после чего действия по её обработке сводятся к применению простой алгебры логики. Достаточно быстрый электронный компьютер может быть применим для решения большинства математических задач, а также и большинства задач по обработке информации, которые могут быть сведены к математическим.
Было обнаружено, что компьютеры могут решить не любую математическую задачу. Впервые задачи, которые не могут быть решены при помощи компьютеров, были описаны английским математиком Аланом Тьюрингом.
Применение.
Первые компьютеры создавались исключительно для вычислений (что отражено в названиях «компьютер» и «ЭВМ»). Даже самые примитивные компьютеры в этой области во много раз превосходят людей (если не считать некоторых уникальных людей-счётчиков). Не случайно первым высокоуровневым языком программирования был Фортран, предназначенный исключительно для выполнения математических расчётов.
Вторым крупным применением были базы данных. Прежде всего, они были нужны правительствам и банкам. Базы данных требуют уже более сложных компьютеров с развитыми системами ввода-вывода и хранения информации. Для этих целей был разработан язык Кобол. Позже появились СУБД со своими собственными языками программирования.
Третьим применением было управление всевозможными устройствами. Здесь развитие шло от узкоспециализированных устройств (часто аналоговых) к постепенному внедрению стандартных компьютерных систем, на которых запускаются управляющие программы. Кроме того, всё бо́льшая часть техники начинает включать в себя управляющий компьютер.
Четвёртое. Компьютеры развились настолько, что стали главным информационным инструментом как в офисе, так и дома. Теперь почти любая работа с информацией зачастую осуществляется через компьютер — будь то набор текста или просмотр фильмов. Это относится и к хранению информации, и к её пересылке по каналам связи. Основное применение современных домашних компьютеров — навигация в Интернете и игры.
Пятое. Современные суперкомпьютеры используются для компьютерного моделирования сложных физических, биологических, метеорологических и других процессов и решения прикладных задач. Например, для моделирования ядерных реакций или климатических изменений. Некоторые проекты проводятся при помощи распределённых вычислений, когда большое число относительно слабых компьютеров одновременно работает над небольшими частями общей задачи, формируя таким образом очень мощный компьютер.
Наиболее сложным и слаборазвитым применением компьютеров является искусственный интеллект — применение компьютеров для решения таких задач, где нет чётко определённого более или менее простого алгоритма. Примеры таких задач — игры, машинный перевод текста, экспертные системы.

</doc>
<doc id="911" url="https://ru.wikipedia.org/wiki?curid=911" title="Вычислительная сеть">
Вычислительная сеть

Вычислительная сеть, или информационно-вычислительная сеть ("компьютерная сеть"), — система, обеспечивающая обмен данными между вычислительными устройствами — компьютерами, серверами, маршрутизаторами и другим оборудованием или программным обеспечением. Для передачи информации могут быть использованы различные среды передачи данных. Помимо совокупности физических устройств и физических средств передачи данных, вычислительная сеть может быть оверлейной или виртуальной, то есть логически самостоятельной выделенной сетью, использующей ресурсы другой физической сети — вычислительной (например, Интернет), телефонной сети, в том числе ТФОП и (или) среды передачи данных.
Классификация.
Существуют варианты классификации разных вычислительных сетей по назначению и характеристикам.
По территориальной распространённости:
По архитектуре:
По типу сетевой топологии:
По типу среды передачи:
По функциональному назначению:
По скорости передачи:
По сетевым операционным системам:
По необходимости поддержания постоянного соединения:
Оверлейные сети.
Примеры самостоятельных логических вычислительных сетей, использующих другие физические сети и среды передачи данных:
Стеки протоколов.
При реализации компьютерной сети могут использоваться различные наборы протоколов, некоторые из них:
Уровни.
Сетевая модель OSI
История.
Впервые в мире вычислительная сеть была применена в советском комплексе ПРО «Система А» (генеральный конструктор Г. В. Кисунько), возведённом в 1956—1960 годах в Казахстане, однако предложена раньше — например, в 1949 году для Semi-Automatic Ground Environment (реализована в конце 1950-х). В сеть были объединены разработанные Институтом точной механики и вычислительной техники АН СССР компьютеры «Диана I» и «Диана II» (создатели С. А. Лебедев, В. С. Бурцев).
В 1970-е годы в Великобритании была разработана система доступа к автоматизированным базам данных на основе использования телефонных каналов, телевизоров и клавиатуры, получившая название "видеотекс". Наибольшее развитие видеотекс получил во Франции, где эта система получила название "Минитель".
В это же время произошёл прорыв в области производства компьютерных компонентов. Успехи в разработке передачи данных между персональными компьютерами привели к созданию глобальной сети Интернет, предшественником которого была сеть ARPAnet, начавшая работать в 1969 году.
В 1980 году аспиранты университета Дьюка Джим Эллис и Том Траскотт создали компьютерную сеть Usenet. Они задумывали эту сеть как программное обеспечение для объявлений в своем университете. Однако эта сеть сразу заинтересовала и другие образовательные учреждения и вскоре превратилась во всеобщую систему дискуссионных групп.
В 1980-е годы среди энтузиастов компьютерных сетей были популярны BBS — технология общения пользователей компьютеров через коммутируемые телефонные сети. Она была создана в 1978 году.
В середине 1980-х годов положение дел в локальных сетях стало кардинально меняться. Утвердились стандартные технологии объединения компьютеров в сеть — Ethernet, Arcnet, Token Ring. Мощным стимулом для их развития послужили персональные компьютеры, являющиеся идеальными элементами для построения компьютерных сетей.
Глобальная компьютерная сеть.
Глобальная компьютерная сеть (, ) — компьютерная сеть, охватывающая большие территории и включающая в себя большое число компьютеров.
ГКС служат для объединения разрозненных сетей так, чтобы пользователи и компьютеры, где бы они ни находились, могли взаимодействовать со всеми остальными участниками глобальной сети.
Некоторые ГКС построены исключительно для частных организаций, другие являются средством коммуникации корпоративных ЛВС с сетью Интернет или посредством Интернет с удалёнными сетями, входящими в состав корпоративных. Чаще всего ГКС опирается на выделенные линии, на одном конце которых маршрутизатор подключается к ЛВС, а на другом коммутатор связывается с остальными частями ГКС. Основными используемыми протоколами являются TCP/IP, SONET/SDH, MPLS, ATM и Frame relay. Ранее был широко распространён протокол X.25, который может по праву считаться прародителем Frame relay.
ГКС связывает компьютеры, рассредоточенные на расстоянии сотен и тысяч километров. Часто используются уже существующие не очень качественные линии связи. Более низкие, чем в локальных сетях, скорости передачи данных (десятки килобит в секунду) ограничивают набор услуг передачей файлов, преимущественно не в оперативном, а в фоновом режиме, с использованием электронной почты. Для стойкой передачи дискретных данных применяются более сложные методы и оборудование, чем в локальных сетях.
Глобальные сети отличаются от локальных тем, что рассчитаны на неограниченное число абонентов и используют, как правило, не слишком качественные каналы связи и сравнительно низкую скорость передачи, а механизм управления обменом у них в принципе не может быть гарантированно скорым.
В глобальных сетях намного более важно не качество связи, а сам факт её существования. Правда, в настоящий момент уже нельзя провести чёткий и однозначный предел между локальными и глобальными сетями. Большинство локальных сетей имеют выход в глобальную сеть, но характер переданной информации, принципы организации обмена, режимы доступа к ресурсам внутри локальной сети, как правило, сильно отличаются от тех, что приняты в глобальной сети. И, хотя все компьютеры локальной сети в данном случае включены также и в глобальную сеть, специфику локальной сети это не отменяет. Возможность выхода в глобальную сеть остаётся всего лишь одним из ресурсов, поделённым пользователями локальной сети.

</doc>
<doc id="912" url="https://ru.wikipedia.org/wiki?curid=912" title="NNTP">
NNTP

NNTP () — представляет собой сетевой протокол распространения, запрашивания, размещения и получения групп новостей при взаимодействии между сервером групп новостей и клиентом.
Введение.
NNTP — протокол, разработанный для обмена сообщениями в телеконференциях.
По строению этот протокол во многом схож с протоколом приёма и передачи электронной почты SMTP.
Существует вариация протокола NNTP, называемая NNRP (Network News Readers Protocol). Она отличается только набором поддерживаемых команд, и предназначена для чтения конференций с сервера новостей клиентским ПО в режиме онлайн. Функционально NNTP ориентирован на то, что статьи отправляются подписчикам при их появлении на сервере, а NNRP — по запросу клиента. Соответственно, NNTP используется для обмена сообщениями между серверами новостей, а NNRP — для чтения сообщений с ньюссервера и создания новых сообщений.
За NNTP закреплён TCP-порт 119. При подключении к NNTP-серверу по SSL (т. н. NNTPS) используется порт 563.
NNTP предполагает, что серверы новостей имеют постоянное IP-подключение. Когда онлайн-технологии были менее распространены, серверы новостей обменивались новостями посредством uucp.
Протокол NNTP, как и SMTP, является текстовым, то есть все команды и ответы на них являются обычными текстовыми строками. Важной особенностью протокола NNTP является его эффективность в случае сложных графов связей между серверами новостей. Чтобы одно и то же сообщение не передавалось многократно, обычно отправляющий сервер сначала сообщает идентификатор нового сообщения, а само сообщение отправляет только после подтверждения принимающей стороны о том, что этого сообщения там ещё нет. В случае расширения stream NNTP эта концепция развивается ещё дальше: отправляющая сторона шлёт список идентификаторов новых статей, не дожидаясь ответа на каждый из них, и сами статьи, если принимающая запросила их по идентификаторам.
Часто серверы новостей держат постоянно открытыми одну или несколько NNTP-сессий, чтобы не открывать их каждый раз заново при получении новых сообщений.
Пример NNTP-сессии.
A: — отвечающая сторона, O: — вызывающая сторона
 A: (ожидает соединения)
 O: (Подключается к порту 119 сервера)
 A: 200 news.company.tld InterNetNews server INN 2.3.0 ready
 O: IHAVE &lt;ident@message&gt;
 A: 435 Duplicate
 O: IHAVE &lt;ident@another.message&gt;
 A: 335
 O: Newsgroups: test.group
 O: Subject: test
 O: Message-Id: &lt;ident@another.message&gt;
 O: From: Some Persone &lt;some@another.message&gt;
 O: Date: Wed, 25 Apr 2007 14:18:31 +0300
 O:
 O: message body
 O: .
 A: 235
 O: QUIT
 A: 205 .
 A: (закрывает соединение)
Клиенты групп новостей и серверы групп новостей.
Иногда говорят «клиент групп новостей» вместо «NNTP-клиент». Следует понимать, что NNTP-клиенты поддерживают протокол NNTP не в полной мере, а лишь его вариацию NNRP. На сегодняшний день доступны следующие клиентские программы:
Из серверного программного обеспечения известно:
Другие реализации можно попытаться найти в ODP.
Группы новостей.
Большинство групп новостей, распространяемых при помощи NNTP, принадлежит сети Usenet.
В Интернете существуют однако и другие группы новостей: предоставляемые шлюзами других сетей, частные и т. п.

</doc>
<doc id="913" url="https://ru.wikipedia.org/wiki?curid=913" title="Электронная почта">
Электронная почта

Электро́нная по́чта ( , от ) — технология и служба по пересылке и получению электронных сообщений (называемых «письма», «электронные письма» или «сообщения») между пользователями компьютерной сети (в том числе — Интернета).
Электронная почта по составу элементов и принципу работы практически повторяет систему обычной (бумажной) почты, заимствуя как термины (почта, письмо, конверт, вложение, ящик, доставка и другие), так и характерные особенности — простоту использования, задержки передачи сообщений, достаточную надёжность и, в то же время — отсутствие гарантии доставки.
Достоинствами электронной почты являются: легко воспринимаемые и запоминаемые человеком адреса, вида имя_пользователя@имя_домена (например somebody@example.com); возможность передачи как простого текста, так и форматированного, а также произвольных файлов (текстовые документы, медиафайлы, программы, архивы и т. д.); независимость серверов (в общем случае они обращаются друг к другу непосредственно); достаточно высокая надёжность доставки сообщения; простота использования человеком и программами, высокая скорость передачи сообщений.
Недостатки электронной почты: наличие такого явления, как спам (массовые рекламные и вирусные рассылки); возможные задержки доставки сообщения (до нескольких суток); ограничения на размер одного сообщения и на общий размер сообщений в почтовом ящике (персональные для пользователей).
В настоящее время любой начинающий пользователь может завести свой бесплатный электронный почтовый ящик, достаточно зарегистрироваться на одном из интернет-порталов.
Названия.
Если в Европе, Америке и др. регионах при написании используются только два варианта — «email» или «e-mail» (причём рекомендации о том, писать дефис или нет, разнятся: например, с марта 2011 года одно из стилистических руководств — AP Stylebook — рекомендует писать сокращение от «электронная почта» как «email», а не «e-mail»), то в русском языке присутствует значительная вариативность. Наиболее часто в кириллических текстах также используется «e-mail», то есть написание латиницей без транслитерации (визуальное восприятие других форм написания хуже), но можно встретить и другие написания:
Справочное бюро Грамота.ру сначала указывало, что рекомендуется писать e-mail (латиницей) или имейл (кириллицей), а затем стало рекомендовать только кириллическое написание имейл, как зафиксированное, например, в Русском орфографическом словаре РАН.
В словарях зафиксировано четыре вариантных написания: имейл, мейл и-мейл, и-мэйл.
Де-факто в официальных русскоязычных документах:
История.
Появление электронной почты можно отнести к 1965 году, когда сотрудники Массачусетского технологического института (MIT) Ноэль Моррис и Том Ван Влек написали программу mail для операционной системы CTSS ("Compatible Time-Sharing System"), установленную на компьютере IBM 7090/7094.
Общее развитие электронной почты шло через развитие локального взаимодействия пользователей на многопользовательских системах: пользователи могли, используя программу mail (или её эквивалент), пересылать друг другу сообщения в пределах одного мейнфрейма (большого компьютера). Следующий шаг был в возможности переслать сообщение пользователю на другой машине — для этого использовалось указание имени машины и имени пользователя на машине. Адрес мог записываться в виде codice_1 (пользователь joe на компьютере foo). Третий шаг для становления электронной почты произошёл в момент появления передачи писем через третий компьютер. В случае использования UUCP адрес пользователя включал в себя маршрут до пользователя через несколько промежуточных машин (например, codice_2 — письмо для joe через машину gate1, gate2 на машину foo). Недостатком такой адресации было то, что отправителю (или администратору машины, на которой работал отправитель) необходимо было знать точный путь до машины адресата.
После появления распределённой глобальной системы имён DNS для указания адреса стали использоваться доменные имена — codice_3 — пользователь user на машине example.com. Одновременно с этим происходило переосмысление понятия «на машине»: для почты стали использоваться выделенные серверы, на которые не имели доступ обычные пользователи (только администраторы), а пользователи работали на своих машинах, при этом почта приходила не на рабочие машины пользователей, а на почтовый сервер, откуда пользователи забирали свою почту по различным сетевым протоколам (среди распространённых на настоящий момент — POP3, IMAP, MAPI, веб-интерфейсы). Одновременно с появлением DNS была придумана система резервирования маршрутов доставки почты, а доменное имя в почтовом адресе перестало быть именем конкретного компьютера и стало просто фрагментом почтового адреса. За обслуживание домена могут отвечать многие серверы (возможно, физически размещённые на разных континентах и в разных организациях), а пользователи из одного домена могут не иметь между собой ничего общего (особенно подобное характерно для пользователей бесплатных серверов электронной почты).
Кроме того, существовали и другие системы электронной почты (некоторые из них существуют и сейчас), как то: Netmail в сети Фидонет, X.400 в сетях X.25. Доступ к ним из сети Интернет и обратно осуществляется через почтовый шлюз. Для маршрутизации почты в сетях X.25 в DNS предусмотрена специальная ресурсная запись c соответствующим названием X25 (код 19).
MxA-классификация.
В терминологии электронной почты выделяются следующие компоненты:
В случае использования выделенных серверов для хранения почты пользователей всё взаимодействие пользователя с сервером может происходить по протоколам, не укладывающимся в эту схему.
Почтовые серверы обычно выполняют функцию MTA и MDA. Некоторые почтовые серверы (программы) выполняют функцию как MTA, так и MDA, некоторые подразумевают разделение на два независимых сервера: сервер-MTA и сервер-MDA (при этом если для доступа к ящику используются различные протоколы, например POP3 и IMAP, то MDA, в свою очередь, может быть реализован либо как единое приложение, либо как набор приложений, каждое из которых отвечает за отдельный протокол).
Современная архитектура (SMTP).
Общепринятым в мире протоколом обмена электронной почтой является SMTP ( — простой протокол передачи почты). В общепринятой реализации он использует DNS для определения правил пересылки почты (хотя в частных системах, вроде Microsoft Exchange, SMTP может действовать, исходя из информации из других источников).
В различных доменах настроены свои, независимые друг от друга почтовые системы. У каждого почтового домена может быть несколько пользователей. (Однако фактически может быть так, что одна организация или персона владеет многими доменами, которые обслуживаются (физически) одной почтовой системой). Почта передаётся между узлами с использованием программ пересылки почты (, "MTA"; такими, как, например: sendmail, exim4, postfix, Microsoft Exchange Server, Lotus Domino и т. д.). Поведение систем при связи друг с другом строго стандартизировано, для этого используется протокол SMTP (и соблюдение этого стандарта, наравне со всеобщей поддержкой DNS всеми участниками, является основой для возможности связи «всех со всеми» без предварительных договорённостей). Взаимодействие почтовой системы и пользователей, в общем случае, никак не регламентируется и может быть произвольным, хотя существуют как открытые, так и закрытые (завязанные на ПО конкретных производителей) протоколы взаимодействия между пользователями и почтовой системой. Программа, работающая в почтовой системе и обслуживающая пользователей, называется MDA (, агент доставки почты). В некоторых почтовых системах MDA и MTA могут быть объединены в одну программу, в других системах могут быть разнесены в виде разных программ или вообще выполняться на различных серверах. Программа, с помощью которой пользователь осуществляет доступ, называется MUA (). В случае использования веб-интерфейса для работы с почтой, её функцию выполняет приложение веб-интерфейса, запускаемое на сервере.
Внутри заданной почтовой системы (обычно находящейся в рамках одной организации) может быть множество почтовых серверов, выполняющих как пересылку почты внутри организации, так и другие, связанные с электронной почтой задачи: фильтрацию спама, проверку вложений антивирусом, обеспечение автоответа, архивация входящей/исходящей почты, обеспечение доступа пользователям различными методами (от POP3 до ActiveSync). Взаимодействие между серверами в рамках одной почтовой системы может быть как подчинено общим правилам (использование DNS и правил маршрутизации почты с помощью протокола SMTP), так и следовать собственным правилам компании (используемого программного обеспечения).
Релеи.
DNS позволяет указать в качестве принимающего сервера (MX-запись) любой узел интернета, не обязательно являющийся частью доменной зоны домена получателя. Это может использоваться для настройки релеинга (пересылки) почты через третьи серверы. Сторонний сервер (например, более надёжный, чем серверы пользователя) принимает почту для домена пользователя и пересылает его на почтовые серверы пользователя, как только появляется возможность. Исторически контроля над тем, «кому пересылать» почту, не было (или этому не придавали должного значения) и серверы без подобного контроля передавали почту на любые домены. Такие серверы называются открытыми релеями (в настоящее время новые открытые релеи появляются в основном из-за ошибок в конфигурировании).
Для своих пользователей серверы почтовой системы являются релеями (пользователи отправляют почту не на серверы почтовой системы адресата, а на «свой» почтовый сервер, который передаёт письма далее). Во многих сетях провайдеров возможность отправлять письма по протоколу SMTP за пределы сети закрыта (из-за использования этой возможности троянами, вирусами). В этом случае провайдер предоставляет свой SMTP-сервер, через который и направляется вся почта за пределы сети. Открытым релеем при этом считается такой релей, который не проверяет, является ли пользователь «своим» (проверка может осуществляться как на основании сетевого адреса компьютера пользователя, так и на основании идентификации пользователя паролем/сертификатом).
Маршрутизация почты.
Почтовый сервер, получив почту (из локального источника или от другого сервера) проверяет, существуют ли специфичные правила для обработки почты (правила могут основываться на имени пользователя, на домене в адресе, на содержимом письма и т. д.), если специфичных правил не обнаружено, то проверяется, является ли почтовый домен "локальным" для сервера (то есть является ли сервер конечным получателем письма). Если является, то письмо принимается в обработку. Если же домен письма не является локальным, то применяется процедура маршрутизации почты (являющаяся основой для передачи писем между различными серверами в Интернете).
При маршрутизации используется только доменная часть адреса получателя (то есть часть, находящаяся после символа @). Для домена получателя ищутся все MX-записи. Они сортируются в порядке убывания приоритета. Если адрес почтового сервера совпадает с одним из узлов, указанных в MX-записях, — все записи с приоритетом, меньшим приоритета узла в MX-записи (а также MX-запись самого узла), отбрасываются, а доставка осуществляется на первый отвечающий узел (узлы пробуются в порядке убывания приоритета). Это сделано на случай, если почтовый сервер отправителя является релеем почтового сервера получателя. Если MX-запись для домена не найдена, то делается попытка доставить почту по A-записи, соответствующей домену. Если же записи о домене нет, то формируется сообщение о невозможности доставки (bounce message). Это сообщение формируется с codice_4 (RFC 5321), в поле «To» указывается отправитель исходного письма, в поле «From» — e-mail вида codice_5. Под именем сервера понимается имя хоста в Интернет, который сгенерировал уведомление. codice_4 позволяет защитить почтовые серверы от бесконечного хождения сообщений об ошибке между серверами — если сервер обнаруживает, что не может доставить письмо с пустым обратным адресом, то он уничтожает его. Сообщение о невозможности доставки также может формироваться через некоторое время. Это происходит в случае, если обнаруженная проблема определяется, как временная, но истекает время нахождения сообщения в очереди (RFC 5321, раздел 4.5.4.1. Sending Strategy).
Если сеть имеет различные DNS-серверы (например, внешние — в Интернете и локальные — в собственных пределах), то возможна ситуация, когда «внутренние» DNS-серверы в качестве наиболее приоритетного получателя указывают на недоступный в Интернете сервер, куда и перенаправляется почта с релея, указанного как узел-получатель для Интернета. Подобное разделение позволяет осуществлять маршрутизацию почты по общим правилам между серверами, не имеющими выхода в Интернет.
Протоколы получения.
После попадания почты на конечный сервер он осуществляет временное или постоянное хранение принятой почты. Существует две различные модели работы с почтой: концепция "почтового хранилища" ("ящика") и "почтового терминала".
POP3.
В концепции "почтового хранилища" почта на сервере хранится временно, в ограниченном объёме (аналогично почтовому ящику для бумажной почты), а пользователь периодически обращается к ящику и «забирает» письма (то есть почтовый клиент скачивает копию письма к себе и удаляет оригинал из почтового ящика). На основании этой концепции действует протокол POP3.
IMAP.
Концепция "почтового терминала" подразумевает, что вся корреспонденция, связанная с почтовым ящиком (включая копии отправленных писем), хранится на сервере, а пользователь обращается к хранилищу (иногда его по традиции также называют «почтовым ящиком») для просмотра корреспонденции (как новой, так и архива) и написания новых писем (включая ответы на другие письма). На этом принципе действует протокол IMAP и большинство веб-интерфейсов бесплатных почтовых служб. Подобное хранение почтовой переписки требует значительно бо́льших мощностей от почтовых серверов, в результате во многих случаях происходит разделение между почтовыми серверами, пересылающими почту, и серверами хранения писем.
Различия.
Основываясь на работе протоколов, можно разделить их по двум основным критериям:
В определённых условиях сервер хранения писем может быть настроен на поведение, подобное клиенту: такой сервер обращается к почтовому серверу по протоколу POP3 и забирает почту себе. Подобные решения используются обычно в малых организациях, в которых нет инфраструктуры для развёртывания полноценных почтовых серверов; в этом случае используется локальный сервер для хранения почты и почтовый сервер провайдера, предоставляющий услугу получения почты по POP3 (например, с помощью fetchmail). Основным недостатком подобного решения является задержка в доставке (так как забирающее почту ПО обращается на серверы с некоторой задержкой) — например, POP3 connector из Exchange 2003 Server в составе Windows SBS не позволяет через интерфейс конфигурирования выставить интервал менее 15 минут, так как чрезмерная частота проверок способна вызвать проблемы с нагрузкой на почтовый сервер. Некоторые почтовые серверы имеют средства для защиты от подобного поведения.
Структура письма.
При передаче по протоколу SMTP "электронное письмо" состоит из следующих частей.
Данные SMTP-конверта.
Данные SMTP-конверта содержат в себе параметры, которые задаются одноимёнными командами:
Заголовки письма.
Заголовки письма описываются стандартами RFC:
Заголовки отделяются от тела письма пустой строкой. Заголовки используются для журналирования прохождения письма и служебных пометок (иногда их называют кладжами). В Microsoft Outlook эти заголовки называются «Заголовки Интернет». В заголовках обычно указываются: почтовые серверы, через которые прошло письмо (каждый почтовый сервер добавляет информацию о том, от кого он получил это письмо), информацию о том, похоже ли это письмо на спам, информацию о проверке антивирусами, уровень срочности письма (может меняться почтовыми серверами). Также в заголовке обычно пишется программа, с помощью которой было создано письмо. Поскольку заголовки являются служебной информацией, то чаще всего почтовые клиенты скрывают их от пользователя при обычном чтении писем, но также предоставляют возможность увидеть эти заголовки, если возникает потребность в более детальном анализе письма. В случае, если письмо из формата SMTP конвертируется в другой формат (например, в Microsoft Exchange 2007 письма конвертируются в MAPI), то заголовки сохраняются отдельно, для возможности диагностики.
Заголовки обычно добавляются снизу вверх (то есть каждый раз, когда к сообщению нужно добавить заголовок, он дописывается первой строкой, перед всеми предыдущими).
Помимо служебной информации, заголовки письма также хранят и показываемую пользователю информацию, это обычно отправитель письма, получатель, тема и дата отправки.
Заголовки сообщения могут содержать только 7-битные символы. При необходимости использовать национальные символы в каких-то полях требуется использование кодировок. Как правило, это Base64 или Quoted-Printable.
Часто используемые заголовки.
Помимо стандартных, почтовые клиенты, серверы и роботы обработки почты могут добавлять свои собственные заголовки, начинающиеся с «X-» (например: codice_50, codice_51 или codice_52).
Тело письма.
Тело письма отделяется от заголовка пустой строкой. В не-smtp стандартах формат письма зависит от стандарта системы (например, MAPI), но перед «выходом» письма за пределы MAPI-совместимой системы (например, перед пересылкой через Интернет) обычно приводится к SMTP-совместимому виду (иначе маршрутизация письма была бы невозможной, так как стандартом передачи почты в Интернете является SMTP).
В теле сообщения допускаются только печатные символы. Потому для целей передачи бинарной информации (картинок, исполняемых файлов и т. п.) применяются кодировки, приводящие данные к 7-битному виду — Base64 или UUE. Кроме того, в самом начале существования e-mail ограничение было более жёстким — некоторые почтовые системы поддерживали только 7-битные сообщения. С целью работы с такими системами обычный текст, при наличии национальных символов, так же, может кодироваться в 7-битный вид. Для этого используются Base64 или Quoted-Printable. Однако почтовые системы, которые могут работать только с 7-битными сообщениями, сейчас вряд ли существуют.
Цепочки писем.
Благодаря наличию в письме уникального идентификатора, а также тому, что подавляющее большинство почтовых клиентов при ответе на письмо копируют его идентификатор в поле codice_53 («в ответ на»), появляется возможность достоверной группировки писем по "цепочке" (). В разных почтовых клиентах это реализовано по-разному. Например, Microsoft Outlook позволяет найти все связанные с заданным письма, а веб-интерфейс Gmail группирует сообщения на основании данных о цепочке в единый объект. Некоторые почтовые клиенты (например, mutt) позволяют структурировать цепочки (образующиеся обычно в почтовых рассылках, когда в беседе участвует много подписчиков) в форме дерева (вопрос породил несколько ответов, на каждый из которых дали комментарий — это сформировало несколько ветвей дерева). Также такие клиенты обычно умеют принудительно резать цепочки при смене темы сообщения (считая, что смена темы сообщения означает новое обсуждение, хотя, быть может, и вызванное предыдущей беседой).
Шифрование почты.
Для шифрования почты в настоящий момент широко применяются два стандарта: S/MIME (использующий инфраструктуру открытых ключей) и OpenPGP (использующий сертификаты со схемой доверия, группирующегося вокруг пользователя).
Ранее также существовали стандарты и PEM, но, из-за несовместимости друг с другом и неудобства использования, они не прижились.
Стандарты S/MIME и OpenPGP позволяют обеспечить три вида защиты: защиту от изменения, неотзывную подпись и конфиденциальность (шифрование). Дополнительно, S/MIME третьей версии позволяет использовать защищённое квитирование (при котором квитанция о получении письма может быть сгенерирована успешно только в том случае, когда письмо дошло до получателя в неизменном виде).
Оба стандарта используют симметричные криптоалгоритмы для шифрования тела письма, а симметричный ключ шифруют с использованием открытого ключа получателя. Если письмо адресуется группе лиц, то симметричный ключ шифруется по очереди каждым из открытых ключей получателей (и иногда, для удобства, открытым ключом отправителя, чтобы он имел возможность прочитать отправленное им письмо).
Коммерческое использование.
В настоящий момент существуют следующие модели коммерческого применения почтовых систем:
Почтовые рассылки.
Почтовая система позволяет организовать сложные системы, основанные на пересылке почты от одного ко многим абонентам, это:
Для управления почтовыми рассылками используются "менеджеры почтовых рассылок". Помимо ведения списка адресов и выполнения отсылки заданного сообщения, они обеспечивают фильтрацию писем, возможности премодерации писем перед помещением в рассылку, ведение архивов, управление подпиской/отпиской, рассылку дайджестов (краткого содержимого) вместо всего объёма рассылки.
Примеры программ управления рассылками:
Спам.
Спам — разновидность почтовой рассылки с целью рекламы (часто нежелательной) того или иного товара или услуги, аналог бумажной рекламы, бесплатно распространяемой по почтовым ящикам жилых домов.
По мере роста популярности электронной почты, она (наравне с новостными группами usenet), начала использоваться для рассылки незапрошенных рекламных сообщений, аналогично тому, как раскидываются рекламные брошюры в обычные почтовые ящики. Однако, в отличие от существенной стоимости бумажной рассылки, отправка значительного количества (миллионов и миллиардов) сообщений практически ничего не стоит отправителю. Это привело к непропорциональному росту количества и размера рекламных рассылок (по некоторым данным, спам в настоящее время составляет 70—90 % от всех почтовых сообщений, то есть превысил объём полезной почтовой нагрузки в 2—10 раз).
Для рассылки спама в настоящий момент активно используются все возможные технические ухищрения: открытые релеи, ремейлеры, прокси-серверы, бесплатные серверы электронной почты (допускающие автоматизацию отправки почты), ботнеты, поддельные сообщения о невозможности доставки.
По мере ужесточения запрета на размещение рекламы, сообщения разделились на легитимные рассылки (на которые обычно подписывается пользователь и от которых он может отказаться в любой момент) и нелегитимные (собственно, и называемые спамом). Для борьбы со спамом были разработаны различные механизмы (чёрные списки отправителей, серые списки, требующие повторного обращения почтового сервера для отправки, контекстные фильтры). Одним из последствий внедрения средств борьбы со спамом стала вероятность «ошибочно положительного» решения относительно спама, то есть часть писем, не являющихся спамом, стала помечаться как спам. В случае агрессивной антиспам-политики (уничтожение писем, кажущихся спамом, в автоматическом режиме без уведомления отправителя/получателя) это приводит к трудно обнаруживаемым проблемам с прохождением почты.
Законодательное регулирование в России.
Федеральный закон № 152-ФЗ «О персональных данных».
Популярнейшие сервисы электронной почты.
Большинство популярных сервисов электронной почты предоставляется IT-компаниями вместе с другими веб-продуктами: поисковыми системами, облачными хранилищами данных и т. д.
Популярнейшие русскоязычные сервисы электронной почты разработаны компаниями Google (Gmail), Яндекс (Яндекс.Почта), Mail.Ru (Mail.ru), Microsoft (Hotmail и Outlook).

</doc>
<doc id="914" url="https://ru.wikipedia.org/wiki?curid=914" title="BBS">
BBS

BBS ([],  — электронная доска объявлений) — широко использовавшийся в эпоху веб 1.0 способ общения пользователей компьютеров через коммутируемые телефонные сети.
Оператор, обеспечивающий обслуживание станции и ее администрирование — системный оператор (жарг. сисоп, от ). Распространенные названия для BBS среди русскоязычных пользователей: , , . Среди системных операторов было распространено название или (последнее чаще относилось к системе с установленным на ней FTN-обеспечением помимо BBS).
История.
Первая BBS появилась в Чикаго в 1978 году. Соответствующую программу написали и . В СССР первая Kremlin BBS, была создана в середине 1990 года семейной парой Тадеушом и Еленой Радиушами, сотрудниками издававшегося в Москве советско-польского журнала "Компьютер".
Первыми пользователями BBS стали компьютерные энтузиасты, потом появились и коммерческие BBS, на которых фирмы рассказывали о своих услугах, публиковали меню и позволяли делать заказы. На BBS появились однопользовательские и многопользовательские онлайн игры, чаты и форумы. Но одним из главных недостатков этой технологии было то, что для подключения к удалённым компьютерам требовалось набирать телефонный номер из другого региона или даже другой страны, после чего оплачивать счёта за междугороднюю или международную связь. С появлением технологии WWW началось вытеснение BBS.
Технологии.
BBS могли быть как автономными, так и связанными с другими BBS (обычно через Фидонет).
Для доступа к BBS необходимы телефонная сеть, модем и программа-терминал (minicom, Y-term, , Telix, Hyper Terminal, Terminate, Telemax и другие). Некоторые BBS доступны также (или исключительно) через Интернет по протоколу telnet.
Пользователь BBS запускает программу-терминал, инициирует в этой программе телефонный звонок на номер BBS, после соединения BBS предлагает авторизоваться (ввести логин и пароль) либо зарегистрироваться как новому пользователю и после успешного логина пользователя предоставляет ему доступ:
В дополнение к онлайновому доступу к конференциям были разработаны способы оффлайнового чтения конференций с помощью и . Пользователь соединялся с BBS, скачивал на свой компьютер файл-пакет с сообщениями, отсоединялся. Читал сообщения, писал ответные и новые сообщения в конференции, которые затем программой "QWK" или "Blue Wave" собирались в пакет. В наиболее свободное время работы BBS пользователь снова соединялся с BBS, закачивал на неё пакет со своими сообщениями и скачивал пакет с сообщениями, которые оставили на BBS другие пользователи за время, прошедшее с его предыдущего звонка на BBS. Для организации BBS необходимо специальное программное обеспечение.
Представление.
Работа с большинством BBS производится с помощью терминальной программы в текстовом режиме.
Могут использоваться режимы «простой текст» (8-битные символы без цветовых кодов и очистки экрана), ANSI (текстовое расширение ASCII с возможностью цветового выделения, позволяющий создавать псевдографические рисунки) и (более эффективный двоичный протокол с возможностью передачи растровой графики). Для улучшения восприятия и оформления на BBS помимо текста широко использовались рисунки, выполненные посредством ANSI-графики. Кроме чисто прикладных функций (обмен файлами, сообщениями — см. «Типичные функции BBS») немаловажен был эстетический фактор: со вкусом оформленная и с хорошим наполнением BBS привлекала больше пользователей. Обмен впечатлениями от оформления и обсуждение посещенных BBS было нередким в локальных экохонференциях, эхоконференциях Fido и альтернативных сетей. &lt;br&gt;Позже был разработан протокол , поддерживающий векторную графику и указательные устройства ввода, не получивший широкого распространения на территории Российской Федерации. Официальный редактор RIPscrip был платным, а вскоре BBS уступили популярность Всемирной паутине с HTML.
Уровни доступа.
У каждого зарегистрированного пользователя на BBS может быть установлен уровень доступа, как правило от twit (самый нижний уровень, при котором доступ вообще закрыт) до SySop (с полными правами). В зависимости от этого уровня может варьироваться суточное время доступа к станции и лимит времени на сессию, лимит на скачивание файлов (суточный и сессионный), возможность создания сообщений и привилегии в различных почтовых областях и группах почтовых областей, режим использования чата с системным оператором и т. п. Уровни доступа и привилегии реализуется различными механизмами в зависимости от используемого программного обеспечения BBS. Так, Maxumus использует символьные обозначения уровней доступа («twit», «limited», «normal» и др.), а в RemoteAccess уровень доступа задается 16-битным беззнаковым числом. Помимо этого, реализована система контроля и управления пользовательскими флажками, представляющими собой набор из 32 логических переменных для каждого пользователя. Система флажков позволяет менять степень взаимодействия пользователей даже одного числового уровня доступа, например, при сохранении единых временных лимитов, привилегированным пользователям может быть предоставлен доступ к скрытым пунктам меню, почтовым и файловым областям и расширенные права работы в них. Система IN-MENU наследует механизм уровней доступа RemoteAccess, предоставляя дополнительно возможность выполнить индивидуальный скрипт для каждого пользователя или группы. Tornado BBS поддерживает числовой уровень доступа и систему флажков, задаваемых строкой латинских символов, поэтому их может быть 25 — по числу букв латинского алфавита.
Программное обеспечение для организации BBS.
Под организацией BBS подразумевается процесс создания, функционирования и обслуживания станции. Крайне редко программное обеспечение для организации BBS представляет собой программу из одного исполняемого файла. В большинстве случаев используется комплекс связанного ПО: собственно программа по обеспечению коммуникации через канал связи и предоставления пользователям доступа к интерфейсу BBS; утилиты настройки и конфигурирования параметров станции, языковых файлов, станционных меню; утилиты по обработке файловой и почтовых баз; утилиты по обслуживанию базы учётных записей; индексаторы нодлистов и пр. К примеру, в базовую поставку RemoteAccess BBS входит 7 дополнительных программ. Для распространенных систем BBS существует множество (тысячи) дополнительных утилит и онлайн-модулей (так называемые , созданных пользователями.
Примечательные BBS.
США
Valve Software BBS 4258225251

</doc>
<doc id="916" url="https://ru.wikipedia.org/wiki?curid=916" title="BeOS">
BeOS

BeOS — операционная система, история которой начинается в 1991 году. Изначально разрабатывалась как базовая ОС для BeBox. К выгодным отличиям BeOS от других популярных в то время систем относят многопоточность, микроядерность, поддержку многопроцессорных архитектур, 64-битную журналируемую файловую систему, крайне удобный и простой пользовательский интерфейс.
В настоящее время энтузиасты создали операционную систему Haiku с открытым исходным кодом для замены BeOS.
История.
Создание компании Be Inc..
Корпорация Be Inc. была создана в 1990 году бывшим исполнительным директором Apple Жаном-Луи Гассье с целью создать компьютерную систему нового поколения (заметим, что Гассье пошёл по пути основателя Apple Стива Джобса и его платформы NeXT). На подъёме энтузиазма Гассье и его соратники объединились, чтобы сделать простой в использовании, надёжный компьютер, свободный от пережитков прошлого. "Планировалось создать именно компьютер", операционная система была только побочной целью. Например, файловая система не должна была содержать каталогов вообще, все файлы лежали на диске без распределения по каталогам, а принадлежность к той или иной программе определялась на основе атрибутов — информации о файле, не записанной в самом файле.
BeBox.
Первые версии BeOS работали только на специально созданных компьютерах BeBox, которые тоже производились компанией Be Inc. Отличительными особенностями этих компьютеров были многопроцессорность (в одной из версий компьютера стояло 7 процессоров, в другой — 2), в двухпроцессорной версии — индикаторы загрузки процессоров на передней панели системного блока (известные также под названием Blinkenlights), тёмно-синий цвет системного блока и 37-битный порт на задней панели, известный под названием «GeekPort», с простым и удобным управлением для программиста — чтобы поощрять создание внешних устройств под BeOS. BeBox назывались «Silicon Graphics для нищих» из-за их мощности, позволяющей использовать BeBox в качестве графической рабочей станции при относительно невысокой стоимости. Первые прототипы BeBox строились на процессорах , пока их не сняли с производства. Тогда Ве решила перейти на процессоры PowerPC. С 1995 до 1997 всего было продано около двух тысяч компьютеров BeBox, большинство из которых работают и по сей день. Один из них можно увидеть в компьютерном музее в Бостоне. 30 января 1997 Be Inc. объявила, что сворачивает производство оборудования, и BeBox больше не выпускались.
PowerPC.
После того как было свёрнуто производство BeBox, операционной системе BeOS понадобилась новая платформа. Поскольку она к тому времени уже работала на PowerPC, в качестве новой платформы были выбраны компьютеры Macintosh фирмы Apple Computer, Inc. Портирование BeOS на Macintosh заняло два дня.
К тому времени традиционная операционная система компьютеров Макинтош (System или Classic) безнадёжно устарела, а проект разработки новой, современной системы (Copland) провалился, поэтому исполнительный директор Apple Гил Амелио начал переговоры о покупке Be Inc. Переговоры сорвались, поскольку Жан-Луи Гассье просил $200 миллионов, а Apple готова была потратить не более 125. Совет директоров Apple решил, что лучше выбрать NeXTSTEP и купил NeXT в 1996 году за $429 миллионов, вернув руководство основателю компании Стиву Джобсу.
Затем Apple перестала делиться с Be Inc. спецификациями своих новых компьютеров, поэтому BeOS запускается лишь на некоторых Power Macintosh (на других моделях работа возможна только в эмуляторе). В 1997 году Power Computing поставлял BeOS вместе со своей серией клонов Macintosh, которые могли по выбору пользователя грузиться в Mac OS или BeOS.
Intel.
После неудачи с Apple Be Inc. решила перенести систему на обычные процессоры Intel, и, начиная с издания BeOS 3 (примерно 1997 г. также вышли издания 4, 4.5 и 5), эта операционная система работает на обычных IBM PC-совместимых компьютерах. Этот шаг был сделан с целью набрать группу последователей и занять свою нишу на рынке ОС. Минимальные требования для установки (не менявшиеся с тех пор) — процессор Intel Pentium, 32 мегабайта оперативной памяти, 500 мегабайтов на жёстком диске, клавиатура и мышь: последнее является системным требованием, потому что без неё в BeOS работать нельзя — в отличие от, например, Microsoft Windows, в которой без указательного устройства ввода работать трудно, но можно.
Версия BeOS R5 стала последней версией BeOS, выпущенной компанией Be Inc. Впервые для широкой публики была выпущена бесплатная версия — Personal edition, которую каждый желающий мог установить на свой компьютер. Она широко распространялась в виде CD-приложений к журналам (в том числе и в России) и была выложена на сайте компании. Кроме того, было достигнуто соглашение с ведущими производителями компьютеров о предустановке BeOS в качестве второй системы, наряду с Windows.
Неудачный менеджмент привёл к тому, что бесплатная версия (BeOS 5 Personal Edition) успешно конкурировала с платной (BeOS 5 Professional). Попытка Be Inc. выпустить бесплатную версию оказалась неудачной с маркетинговой точки зрения: состав бесплатного пакета был таков, что почти полностью дублировал платную и продажи последней неуклонно падали — BeOS 5 Personal Edition распространялась как Windows-программа, устанавливавшаяся в логический раздел на одном из дисков компьютера и предполагалась только для ознакомительных целей, однако включала в себя весь инструментарий, необходимый для разбивки диска, установки системы в отдельный раздел и установки загрузчика, позволявшего выбрать загрузку Windows или BeOS.
Корпорация Microsoft надавила на производителей компьютеров (Hitachi, Compaq), и они отказались от предустановки двух систем на производимые машины. Малоизвестная операционная система так и не стала популярной среди пользователей. 8 сентября 2003 года Microsoft выплатила Be Inc. $23.3 миллиона по иску о нарушении антимонопольного законодательства.
В 2002 году компания Be Inc. объявила себя банкротом и продала всю свою интеллектуальную собственность фирме Palm за 11 млн долларов, куда перешла также и основная часть бывших работников Be Inc.
Cobalt.
В Palm бывшие разработчики BeOS работали над шестой версией операционной системы PalmOS для наладонников, опираясь на сделанные ещё в рамках BeOS наработки операционной системы BeIA (BeOS for Internet Appliances) для мобильных устройств.
Шестая версия Palm OS, называемая PalmOS Cobalt, вышла в свет в 2004 году, однако не пошла на серийные устройства и работала только на прототипах. После разделения компании Palm на PalmOne и PalmSource, с последующим приобретением последней компанией , работы по Cobalt были прекращены, и начата разработка новой ОС для устройств Palm на базе Linux. Все права на систему сейчас принадлежат ACCESS Co., Ltd.
Скорее всего, часть разработчиков BeOS приняли участие в создании Palm webOS, так как новая ОС, основанная на ядре Linux и выпущенная в 2009 году, использует ту же концепцию API-интерфейса для Web-приложений, которая впервые появилась в BeIA ещё в 2000 году.
Современность.
Несмотря на использование передовых на время существования Be Inc. технологий, BeOS не смогла набрать достаточной массы пользователей и приложений для дальнейшего существования. В настоящее время среди нескольких проектов по возрождению BeOS наибольшие шансы на успех у Haiku team. Группа энтузиастов, среди которых несколько бывших инженеров Be Inc. пишет бинарно-совместимую с BeOS операционную систему с открытыми исходными кодами (в данный момент доступна бета-версия Haiku R1/Beta4 (2022г).
Незадолго до поглощения Be Inc. Palm немецкая компания , по собственному заявлению, приобрела у Be Inc. исходные коды BeOS, однако официальный правообладатель, японская компания , опровергла эти сведения. История до сих пор остаётся тёмной. Наверняка известно только, что у yellowTab была лицензия от Be Inc. на перепродажу и модификацию BeOS. Вскоре появилась созданная yellowTab операционная система Zeta, являющаяся изменённой версией BeOS 5.1 или операционной системой, созданной на основе полученных от Be Inc. исходных кодов для BeOS нового поколения (последнее, однако, маловероятно). В начале 2005 года в Ганновере на CeBIT была показана первая версия Zeta. Zeta успешно продавалась; на середину 2005 года было продано больше 80 тыс. копий — это больше, чем было продано копий BeOS за все годы существования Be Inc.
В 2006 году компания yellowTAB подверглась процедуре банкротства, и права на распространение Zeta перешли к немецкой компании , которая в 2007 году отказалась от дальнейшего распространения и поддержки Zeta из-за недостаточного объёма продаж и возможных проблем с правами на исходный код и распространение этой ОС.
Cosmoe является интерфейсом для Linux, который может выполнять приложения BeOS. Cosmoe был с открытым исходным кодом. Последний релиз Cosmoe был в 2004 году.
Существует также операционная система BlueEyedOS, основанная на модифицированной версии ядра Linux, которая могла выполнять приложения BeOS после их перекомпиляции. Релизы BlueEyedOS не выходят с 2003 года.
BeOS R5.1d0.
BeOS R5.1d0 или Dano/EXP (также известна как "EXP", "Dano", "EXP/Dan0" или "Dan0", "«Подарок»" в русскоязычном BeOS-сообществе) — кодовое имя сборки незавершенного релиза R5.1, утекшего из Be Inc. Дата сборки — день закрытия последней, 15 ноября 2001 года. В Dano реализованы OpenGL, новый сетевой стек (BONE), оконные украшения, XML kit, новый USB-стек, поддержка подсказок, новыx принтеров, новые шрифты, обновлённые Media kit, Interface Kit и app_server, новые драйвера (например, поддержка Adaptec U160 SCSI контроллеров и улучшенная поддержка SB128) и пр.
Существует мнение, согласно которому Be Inc. двигалась в сторону открытия BeOS, в пользу чего свидетельствует замена некоторых проприетарных компонентов на открытые аналоги (замена собственного MP3-кодировщика на Lame, RSA Encryption Engine в NetPositive на OpenSSL).

</doc>
<doc id="918" url="https://ru.wikipedia.org/wiki?curid=918" title="Beatles">
Beatles



</doc>
<doc id="920" url="https://ru.wikipedia.org/wiki?curid=920" title="Delphi (язык программирования)">
Delphi (язык программирования)

Delphi (Де́лфи, произносится ) — императивный, структурированный, объектно-ориентированный, высокоуровневый язык программирования со строгой статической типизацией переменных. Основная область использования — написание прикладного программного обеспечения.
Этот язык программирования является диалектом языка Object Pascal. Изначально язык Object Pascal относился к несколько другому языку, который был разработан в фирме Apple в 1986 году группой Ларри Теслера. Однако, начиная с Delphi 7, в официальных документах компании Borland название Delphi стало использоваться для обозначения языка, ранее известного как Object Pascal.
Целевая платформа.
Изначально среда разработки Delphi была предназначена исключительно для разработки приложений Microsoft Windows, затем был реализован вариант для платформ Linux (под торговой маркой Kylix), однако после выпуска в 2002 году Kylix 3 его разработка была прекращена, и вскоре было объявлено о поддержке Microsoft .NET, которая, в свою очередь, была прекращена с выходом Delphi 2007.
В настоящее время, наряду с поддержкой разработки 32 и 64-разрядных программ для Windows, реализована возможность создавать приложения для Apple macOS (начиная с Embarcadero Delphi XE2), iOS (включая симулятор, начиная с XE4 посредством собственного компилятора), Google Android (начиная с Delphi XE5), а также Linux Server x64 (начиная с версии 10.2 Tokyo).
Независимая, сторонняя реализация среды разработки проектом Lazarus (Free Pascal, в случае компиляции в режиме совместимости с Delphi) позволяет использовать его для создания приложений на Delphi для таких платформ, как Linux, macOS и Windows CE.
Также предпринимались попытки использования языка в проектах GNU (например, Notepad GNU) и написания компилятора для GCC (GNU Pascal).
Используется для написания интернет сервисов IIS.
Философия и отличия от популярных прикладных языков программирования.
При создании языка (и здесь качественное отличие от языка C) не ставилось задачи обеспечить максимальную производительность исполняемого кода или лаконичность исходного кода для экономии оперативной памяти. Изначально язык ставил во главу угла стройность и высокую читаемость, поскольку был предназначен для обучения дисциплине программирования. Эта изначальная стройность в дальнейшем, как по мере роста аппаратных мощностей, так и в результате появления новых парадигм, упростила расширение языка новыми конструкциями.
Так, сложность объектного C++, по сравнению с Си, выросла весьма существенно и затруднила его изучение в качестве первого языка программирования, чего нельзя сказать об Object Pascal относительно Pascal.
Ниже перечислены некоторые отличия синтаксических конструкций Delphi от семейства C-подобных языков (C/C++/Java/C#):
Платформы .NET и Java значительно упростили разработку программ за счёт введения «сборщика мусора», который разрешает программисту не заботиться о высвобождении памяти, занимаемой объектами, которые вышли из области видимости работающего кода программы. Это, с "одной" стороны, значительно уменьшило проблему так называемых «утечек памяти» (когда уже ненужные, — и недостижимые по причине утраты адреса данные занимают оперативную память), но, с "другой" стороны, потребовало от платформы реализовать сложный и ресурсоёмкий алгоритм «сборки мусора» — который традиционно реализован как нахождение достижимых объектов и высвобождение остальных. На практике, чтобы выполнить "исчерпывающий" анализ достижимости объектов, сборщик мусора в некоторые моменты времени приостанавливает работу программы (всех её потоков), что приводит к кратковременной потере отзывчивости. Частота и длительность таких остановок напрямую зависит от объёма доступной оперативной памяти (пока есть свободная память, сборщик мусора старается не проводить блокирующий анализ), а также от числа задействованных в программе объектов (таким образом, лучше иметь несколько «больших» объектов, чем много — маленьких).
Ситуация ухудшается по мере роста количества задействованных в программе потоков — ведь исчерпывающий анализ достижимости требует полного останова. Таким образом, явная выгода — решение проблемы «утечек памяти» и, в целом, автоматическое управление временем жизни объектов — породила "неявную" проблему масштабирования и «провалов» производительности. Эта проблема малозаметна в простых программах, но по мере роста сложности и объёма кодовой базы становится всё более острой — то есть на финальном этапе разработки. Сложные программные комплексы, как правило, имеют привязку к реальному времени, так и требования к отзывчивости.
Попытки снизить издержки сборки мусора могут привести к существенному искажению стиля программирования. В Delphi не существует автоматического управления памятью: (в "классических" компиляторах языка) экземпляры классов создаются и удаляются вручную, тогда как для некоторых типов — интерфейсов, строк и динамических массивов — задействован механизм подсчёта ссылок. Ни один из этих подходов, вообще говоря, не гарантирует отсутствия утечек памяти, но, с другой стороны, проблема отзывчивости неактуальна, временные издержки управления памяти малы, и, что важнее, очевидны. Также, при отсутствии утечек общий объём задействованной оперативной памяти существенно меньше, чем у аналогичных приложений, полагающихся на сборщик мусора.
История языка.
Object Pascal — результат развития языка Турбо Паскаль, который, в свою очередь, развился из языка Паскаль. Паскаль был полностью процедурным языком, Турбо Паскаль, начиная с версии 5.5, добавил в Паскаль объектно-ориентированные свойства, а в Object Pascal — динамическую идентификацию типа данных с возможностью доступа к метаданным классов (то есть к описанию классов и их членов) в компилируемом коде, также называемую интроспекцией — данная технология получила обозначение RTTI. Так как все классы наследуют функции базового класса TObject, то любой указатель на объект можно преобразовать к нему, после чего воспользоваться методом ClassType и функцией TypeInfo, которые и обеспечат интроспекцию.
Также отличительным свойством Object Pascal от C++ является то, что объекты по умолчанию располагаются в динамической памяти. Однако можно переопределить виртуальные методы NewInstance и FreeInstance класса TObject. Таким образом, абсолютно любой класс может осуществить «желание» «где хочу — там и буду лежать». Соответственно организуется и «многокучность».
Object Pascal (Delphi) является результатом функционального расширения Turbo Pascal.
Delphi оказал огромное влияние на создание концепции языка C# для платформы .NET. Многие его элементы и концептуальные решения вошли в состав С#. Одной из причин называют переход Андерса Хейлсберга, одного из ведущих разработчиков Дельфи, из компании Borland Ltd. в Microsoft Corp.
Delphi for .NET — среда разработки Delphi, а также язык Delphi (Object Pascal), ориентированные на разработку приложений для .NET.
Первая версия полноценной среды разработки Delphi для .NET — Delphi 8. Она позволяла писать приложения только для .NET. Delphi 2006 поддерживает технологию MDA с помощью ECO (Enterprise Core Objects) версии 3.0.
В марте 2006 года компания Borland приняла решение о прекращении дальнейшего совершенствования интегрированных сред разработки JBuilder, Delphi и C++ Builder по причине убыточности этого направления. Планировалась продажа IDE-сектора компании. Группа сторонников свободного программного обеспечения организовала сбор средств для покупки у Borland прав на среду разработки и компилятор.
Однако в ноябре того же года было принято решение отказаться от продажи IDE-бизнеса. Тем не менее разработкой IDE продуктов теперь будет заниматься новая компания — CodeGear, которая будет финансово полностью подконтрольна Borland.
В августе 2006 года Borland выпустил облегчённую версию RAD Studio под именем Turbo: Turbo Delphi (для Win32 и .NET), Turbo C#, Turbo C++.
В марте 2008 года было объявлено о прекращении развития этой линейки продуктов.
В марте 2007 года CodeGear порадовала пользователей обновлённой линейкой продуктов Delphi 2007 for Win32 и выходом совершенно нового продукта Delphi 2007 for PHP.
В июне 2007 года CodeGear представила свои планы, то есть опубликовала так называемый «roadmap».
25 августа 2008 года компания Embarcadero, новый хозяин CodeGear, опубликовала пресс-релиз на Delphi for Win32 2009. Версия привнесла множество нововведений в язык, как то:
Вышедшая в 2011 году версия Delphi XE2 добавила компилятор Win64 и кросс-компиляцию для операционных систем фирмы Apple (MacOS X, iOS).
Вышедшая в 2013 году версия Delphi XE5 обеспечила кросс-компиляцию приложений для устройств на платформе ARM/Android.
Синтаксис языка.
Система типов.
Система типов в Delphi строгая, статическая.
Поддерживаются следующие типы данных:
Операторы.
Список операторов через пробел: codice_29codice_30codice_31codice_32codice_33codice_34codice_35
По типу возвращаемого значения "различаются" операторы целочисленного деления (codice_40 и codice_41) и оператор codice_39. Последний, применяемый как к целочисленным, так и к вещественным операндам, всегда в результате даёт вещественный тип.
Оператор сложения codice_36 используется также для конкатенации строк (когда используются встроенные строковые типы).
К битовым операторам целочисленных типов относятся также codice_50, codice_51 — операторы сдвига, соответствующие по смыслу одноимённым командам процессоров Intel x86.
Операторы codice_65 и codice_66 применяются к типам, допускающим полиморфное поведение — экземплярам класса и интерфейсам. Первый приводит безопасное(в смысле невозможности неверной интерпретации) приведение типа, а второй тестирует поддержку экземпляром класса или интерфейсом некоторого класса или интерфейса. Нужно помнить, что в отличие от языка C# неудавшееся приведение типа оператором codice_65 возбуждает исключение.
Оператор codice_70 разыменовывает указатель. Оператор codice_71 выполняет обратное действие, возвращая адрес переменной. Поддерживается простые операции сложения и вычитания над типизированными указателями, с учётом размера типов, на которые они указывают ("умная" арифметика указателей).
Классы.
В языке Object Pascal классы — это специальные типы данных, используемые для описания объектов. Соответственно объект, имеющий тип какого-либо класса, является экземпляром (instance) этого класса или переменной этого типа.
Класс представляет собой особый тип, имеющий в своём составе такие элементы, как поля, свойства и методы. Поля класса аналогичны полям записи и служат для хранения информации об объекте. "Методами" называются процедуры и функции, предназначенные как правило для обработки полей. "Свойства" занимают промежуточное положение между полями и методами.
Объектно-ориентированные особенности языка.
Инкапсуляция.
Объединение и скрытие объектных данных, а также обрабатывающих их методов, внутри конкретного класса от пользователя называется инкапсуляцией.
Наследование.
При создании новых типов объектов способность получить все свойства и методы от своих предков называют наследованием. Такие типы объектов наследуют после своего создания все поля, свойства, события, методы и прочее от своих предков. Наследование часто избавляет разработчиков от рутинной работы и позволяет, не мешкая, приступить к разработке чего-то нового. В отличие от C++, в Delphi не допускается множественное наследование. В Delphi есть возможность добавить методы в класс или запись, с помощью так называемого помощника класса или помощника записи (class helper или record helper), который, не являясь потомком от модифицируемого класса или записи, может добавлять в них дополнительные методы. Примером может служить объявленная в модуле System.SysUtils запись-помощник TStringHelper.
Полиморфизм.
Delphi реализует классическую модель полиморфизма, принятую в "прикладных" языках программирования, когда методы базового класса, а также ссылочные переменные типа базового класса,— способны манипулировать экземплярами классов-потомков на основе контракта, заданного в базовом классе. Контрактом в этом случае выступает объявление абстрактных методов в базовом классе.
Примеры.
Структура программы.
Каждая написанная программа на языке Delphi состоит из заголовка программы (program NewApplication;), поля используемых модулей Uses (к примеру, Uses Windows, Messages, SysUtils и т. д.), который может не входить в саму структуру, а также блоков описания и исполнения (начинаются составным оператором begin и заканчиваются end.).
Пример № 1.
Вывод сообщения «Hello, world!» в консольном приложении Delphi
Пример № 2.
Вывод сообщения «Hello, world!» в 32-разрядном GUI приложении Delphi
Пример № 3.
Динамическое создание списка строк и запись его в файл.
Известное программное обеспечение, созданное на Delphi.
Среди многих распространённых программных продуктов, написанных на Delphi::
Критика.
Критика языка на ранних этапах развития.
История критики Pascal восходит к 1981 году и работе Брайана Кернигана, аргументы которой в основном устарели по мере развития языка.
Нововведения для компиляции на мобильные платформы.
Некоторые изменения языка, осуществлённые компанией Embarcadero (разработчиком языка) в так называемых NextGen-компиляторах языка Delphi, намеренно "нарушили" совместимость с накопленной базой исходного кода. Эти изменения были отрицательно восприняты широким кругом опытных Delphi-разработчиков, поскольку, хотя и приближали язык к парадигме языков .NET, но "сломали" традицию высокой обратной совместимости и существенно затруднили перенос имеющегося исходного кода в программное обеспечение для мобильных платформ.
Указанные ниже изменения поставили под сомнение самую парадигму мультиплатформенной разработки на базе единого исходного кода, рекламируемую Embarcadero.
Со времён Pascal исторически сложилось, что встроенный строковый тип индексировался с базой в единицу: «нулевой» элемент строки возвращал длину строки. По мере введения новых («длинных» и «юникодных») строковых типов данный порядок индексации сохранялся, обеспечивая почти бесшовный перенос кодовой базы на обновлённые версии языка. Однако со введением nextgen-компиляции парадигма изменилась: в новых компиляторах строки стали индексироваться по нулевой базе, как и в семействе С-подобных языков (C++, C#, Java), при этом в «классических» компиляторах для Windows и Mac OS парадигма единичной индексации была сохранена.
Исторически классы и их экземпляры являются неявно-ссылочными структурными типами. Тем не менее, управление временем жизни экземпляра класса изначально выполнялось вручную — посредством явного вызова конструктора и деструктора (либо метода codice_87), и такая особенность сохраняется (по состоянию на 2018 год) в "классических" версиях компиляторов. Подсчёт ссылок работал лишь для классов, реализующих интерфейсы, и притом, в том только случае, когда манипуляции с такими классами производились посредством переменных интерфейсного типа.
До версии 10.4 компиляторы для мобильных платформ ввели подсчёт ссылок для всех экземпляров классов, тем самым в корне изменив парадигму управлением временем жизни объектов, поскольку «ручное» управление практически (за исключением некоторых весьма продвинутых техник) несовместимо с новой парадигмой.
С версии 10.4 введен единый механизм управления памятью, когда для мобильных, настольных и серверных используется классическая реализация управления памятью объектов. ARC-модель управления памятью model осталась для управления строками и ссылками на тип интерфейса на всех платформах.
Медленная эволюция языковых средств.
Многие разработчики рассматривают консервативность Delphi как достоинство, которое обеспечивает высокую переносимость кода, а также упрощает понимание языка начинающими программистами.
Однако в настоящее время ситуация такова, что "новые" технологии, парадигмы и даже языки программирования появляются (и набирают популярность) едва ли не каждый год. Развитие же языковых средств "не всегда" влечёт за собой отказ от обратной совместимости.
Ярким примером такого подхода является
До версии компилятора 33.0 (Delphi 10.3 Rio) объявление локальной переменной должно было "предшествовать" первой инструкции кода функции, причём инициализация локальных (стековых) переменных в месте объявления не допускается. Невозможен был также и вывод типа.
Для сравнения, объявление локальной переменной в любом месте функции поддерживалось в языке Си изначально, и было унаследовано практически всеми языками, которые придерживались Си-подобного стиля — C++, C#, Java и др.
Введение этого языкового средства в Delphi обсуждалось давно, но в то время не встретило понимания разработчиков языка.

</doc>
<doc id="922" url="https://ru.wikipedia.org/wiki?curid=922" title="DNS">
DNS

DNS ( «система доменных имён») — компьютерная распределённая система для получения информации о доменах. Чаще всего используется для получения IP-адреса по имени хоста (компьютера или устройства), получения информации о маршрутизации почты и/или обслуживающих узлах для протоколов в домене (SRV-запись).
Распределённая база данных DNS поддерживается с помощью иерархии DNS-серверов, взаимодействующих по определённому протоколу.
Основой DNS является представление об иерархической структуре имени и "зонах". Каждый сервер, отвечающий за имя, может "передать" ответственность за дальнейшую часть домена другому серверу (с административной точки зрения — другой организации или человеку), что позволяет возложить ответственность за актуальность информации на серверы различных организаций (людей), отвечающих только за «свою» часть доменного имени.
Начиная с 2010 года в систему DNS внедряются средства проверки целостности передаваемых данных, называемые "DNS Security Extensions" (DNSSEC). Передаваемые данные не шифруются, но их достоверность проверяется криптографическими способами. Внедряемый стандарт DANE обеспечивает передачу средствами DNS достоверной криптографической информации (сертификатов), используемых для установления безопасных и защищённых соединений транспортного и прикладного уровня.
Ключевые характеристики DNS.
DNS обладает следующими характеристиками:
DNS важна для работы Интернета, так как для соединения с узлом необходима информация о его IP-адресе, а для людей проще запоминать буквенные (обычно осмысленные) адреса, чем последовательность цифр. В некоторых случаях это позволяет использовать виртуальные серверы, например, HTTP-серверы, различая их по имени запроса. Первоначально преобразование между доменными и IP-адресами производилось с использованием специального текстового файла hosts, который составлялся централизованно и автоматически рассылался на каждую из машин в своей локальной сети. С ростом Сети возникла необходимость в эффективном, автоматизированном механизме, которым и стала DNS.
DNS была разработана Полом Мокапетрисом в 1983 году; оригинальное описание механизмов работы содержится в RFC 882 и RFC 883. В 1987 публикация RFC 1034 и RFC 1035 изменила спецификацию DNS и отменила RFC 882, RFC 883 и RFC 973 как устаревшие.
История.
Использование более простого и запоминающегося имени вместо числового адреса хоста относится к эпохе ARPANET. Стэнфордский исследовательский институт (теперь ) поддерживал текстовый файл HOSTS.TXT, который сопоставлял имена узлов с числовыми адресами компьютеров в ARPANET. За поддержание числовых адресов, называемых списком присвоенных номеров, отвечал Джон Постел в Институте информационных наук Университета Южной Калифорнии (ISI). Адреса назначались вручную. Чтобы запросить имя хоста и адрес и добавить компьютер в главный файл, пользователи связывались с сетевым информационным центром (NIC) SRI, руководимым Элизабет Фейнлер, по телефону, в рабочее время..
К началу 1980-х годов поддержание единой централизованной таблицы хостов стало медленным и громоздким, а развивающейся сети требовалась автоматическая система именования для решения технических и кадровых вопросов. Постел поставил перед собой задачу выработать компромисс между пятью конкурирующими предложениями для решения задачи, сформулированной . Мокапетрис вместо этого создал концепцию иерархической системы доменных имен.
Рабочая группа IETF опубликовала оригинальные спецификации в RFC 882 и RFC 883 в ноябре 1983 года.
В 1984 году четыре студента UC Berkeley, Дуглас Терри, Марк Пейнтер, Дэвид Риггл и Сонгниан Чжоу, написали первую версию сервера имен BIND (Berkeley Internet Name Daemon). В 1985 году Кевин Данлэп из DEC существенно пересмотрел реализацию DNS. Майк Карел, Фил Альмквист и Пол Викси поддерживали BIND с тех пор. В начале 1990-х годов BIND был перенесен на платформу Windows NT. Он широко распространен, особенно в Unix-системах, и по-прежнему является наиболее широко используемым программным обеспечением DNS в Интернете.
В ноябре 1987 года были приняты спецификации DNS — RFC 1034 и RFC 1035. После этого были приняты сотни RFC, изменяющих и дополняющих DNS.
Проблемы с безопасностью.
Первоначально проблемы безопасности не были основными соображениями при разработке программного обеспечения DNS или любого программного обеспечения для развёртывания в раннем Интернете, поскольку сеть не была открыта для широкой общественности. Однако рост Интернета в коммерческом секторе в 1990-х годах изменил требования к мерам безопасности для защиты целостности данных и аутентификации пользователей.
Несколько уязвимостей были обнаружены и использованы злоумышленниками. Одной из таких проблем является отравление кэша DNS, в котором данные распространяются на кэширующие преобразователи под предлогом того, что они являются авторитетным сервером происхождения, тем самым загрязняя хранилище данных потенциально ложной информацией и длительными сроками действия (время жизни). Впоследствии, запросы легитимных приложений могут быть перенаправлены на сетевые хосты, контролируемые злоумышленником.
DNS-ответы ранее не имели криптографической подписи, что давало возможность для множества вариантов атаки. Современные расширения системы безопасности доменных имен (DNSSEC) изменяют DNS, чтобы добавить поддержку криптографически подписанных ответов. Другие расширения, такие как TSIG, добавляют поддержку криптографической аутентификации между доверенными одноранговыми узлами и обычно используются для авторизации передачи зоны или операций динамического обновления.
Некоторые доменные имена могут использоваться для достижения эффектов спуфинга. Например, paypal.com и paypa1.com — это разные имена, но пользователи могут не различать их в графическом пользовательском интерфейсе в зависимости от выбранного шрифта пользователя. Во многих шрифтах буква l и цифра 1 выглядят очень похожими или даже идентичными. Эта проблема остро стоит в системах, которые поддерживают интернационализированные доменные имена, поскольку многие коды символов в ISO 10646 могут отображаться на типичных экранах компьютеров. Эта уязвимость иногда используется в фишинге.
Для подтверждения результатов DNS также могут использоваться такие методы, как обратный DNS с подтверждением прямых записей, но криптографически достоверными они не являются; при этом не учитывается вариант .
Терминология и принципы работы.
Ключевыми понятиями DNS являются:
Система DNS содержит иерархию DNS-серверов, соответствующую иерархии зон. Каждая зона поддерживается как минимум одним "авторитетным сервером DNS" (от  — авторитетный), на котором расположена информация о домене.
Имя и IP-адрес не тождественны — один IP-адрес может иметь множество имён, что позволяет поддерживать на одном компьютере множество веб-сайтов (это называется виртуальный хостинг). Обратное тоже справедливо — одному имени может быть сопоставлено множество IP-адресов: это позволяет создавать балансировку нагрузки.
Для повышения устойчивости системы используется множество серверов, содержащих идентичную информацию, а в протоколе есть средства, позволяющие поддерживать синхронность информации, расположенной на разных серверах. Существует 13 корневых серверов, их адреса практически не изменяются.
Протокол DNS использует для работы TCP- или UDP-порт 53 для ответов на запросы. Традиционно запросы и ответы отправляются в виде одной UDP-датаграммы. TCP используется, когда размер данных ответа превышает 512 байт, и для AXFR-запросов.
Рекурсия.
Термином рекурсия в DNS обозначают алгоритм поведения DNS-сервера: «выполнить от имени клиента полный поиск нужной информации во всей системе DNS, при необходимости обращаясь к другим DNS-серверам».
DNS-запрос может быть "рекурсивным" — требующим полного поиска, — и "нерекурсивным" (или "итеративным") — не требующим полного поиска.
Аналогично — DNS-сервер может быть "рекурсивным" (умеющим выполнять полный поиск) и "нерекурсивным" (не умеющим выполнять полный поиск). Некоторые программы DNS-серверов, например, BIND, можно сконфигурировать так, чтобы запросы одних клиентов выполнялись "рекурсивно", а запросы других — "нерекурсивно".
При ответе на "нерекурсивный" запрос, а также при неумении или запрете выполнять "рекурсивные" запросы, DNS-сервер либо возвращает данные о зоне, за которую он ответственен, либо возвращает ошибку. Настройки нерекурсивного сервера, когда при ответе выдаются адреса серверов, которые обладают большим объёмом информации о запрошенной зоне, чем отвечающий сервер (чаще всего — адреса корневых серверов), являются некорректными, и такой сервер может быть использован для организации DoS-атак.
В случае "рекурсивного" запроса DNS-сервер опрашивает серверы (в порядке убывания уровня зон в имени), пока не найдёт ответ или не обнаружит, что домен не существует (на практике поиск начинается с наиболее близких к искомому DNS-серверов, если информация о них есть в кэше и не устарела, сервер может не запрашивать другие DNS-серверы).
Рассмотрим на примере работу всей системы.
Предположим, мы набрали в браузере адрес codice_8. Браузер ищет соответствие этого адреса IP-адресу в файле "hosts". Если файл не содержит соответствия, то далее браузер спрашивает у сервера DNS: «какой IP-адрес у codice_8»?
Однако сервер DNS может ничего не знать не только о запрошенном имени, но и даже обо всём домене codice_6.
В этом случае сервер обращается к "корневому серверу" — например, 198.41.0.4. Этот сервер сообщает — «У меня нет информации о данном адресе, но я знаю, что 204.74.112.1 является ответственным за зону codice_3.» Тогда сервер DNS направляет свой запрос к 204.74.112.1, но тот отвечает «У меня нет информации о данном сервере, но я знаю, что 207.142.131.234 является ответственным за зону codice_6.» Наконец, тот же запрос отправляется к третьему DNS-серверу и получает ответ — IP-адрес, который и передаётся клиенту — браузеру.
В данном случае при разрешении имени, то есть в процессе поиска IP по имени:
Иногда допускается, чтобы запрошенный сервер передавал "рекурсивный" запрос «вышестоящему» DNS-серверу и дожидался готового ответа.
При "рекурсивной" обработке запросов все ответы проходят через DNS-сервер, и он получает возможность "кэшировать" их. Повторный запрос на те же имена обычно не идёт дальше "кэша" сервера, обращения к другим серверам не происходит вообще. Допустимое время хранения ответов в "кэше" приходит вместе с ответами (поле "TTL" ресурсной записи).
Рекурсивные запросы требуют больше ресурсов от сервера (и создают больше трафика), так что обычно принимаются от «известных» владельцу сервера узлов (например, провайдер предоставляет возможность делать рекурсивные запросы только своим клиентам, в корпоративной сети рекурсивные запросы принимаются только из локального сегмента). Нерекурсивные запросы обычно принимаются ото всех узлов сети (и содержательный ответ даётся только на запросы о зоне, которая размещена на узле, на DNS-запрос о других зонах обычно возвращаются адреса других серверов).
Обратный DNS-запрос.
DNS используется в первую очередь для преобразования символьных имён в IP-адреса, но он также может выполнять обратный процесс. Для этого используются уже имеющиеся средства DNS. Дело в том, что с записью DNS могут быть сопоставлены различные данные, в том числе и какое-либо символьное имя. Существует специальный домен codice_18, записи в котором используются для преобразования IP-адресов в символьные имена. Например, для получения доменного имени для адреса codice_19 можно запросить у DNS-сервера запись codice_20, и тот вернёт соответствующее символьное имя. Обратный порядок записи частей IP-адреса объясняется тем, что в IP-адресах старшие биты расположены в начале, а в доменных именах старшие (находящиеся ближе к корню) части расположены в конце.
Записи DNS.
Записи DNS, или ресурсные записи (, ), — единицы хранения и передачи информации в DNS. Каждая ресурсная запись состоит из следующих полей:
Наиболее важные типы DNS-записей:
Прочие записи:
Зарезервированные доменные имена.
Документ RFC 2606 (Reserved Top Level DNS Names — Зарезервированные имена доменов верхнего уровня) определяет названия доменов, которые следует использовать в качестве примеров (например, в документации), а также для тестирования. Кроме codice_29, codice_30 и codice_31, в эту группу также входят codice_32, codice_33 и др.
Интернациональные доменные имена.
Доменное имя может состоять только из ограниченного набора ASCII-символов, позволяя набрать адрес домена независимо от языка пользователя. ICANN утвердил основанную на Punycode систему IDNA, преобразующую любую строку в кодировке Unicode в допустимый DNS набор символов.
Программное обеспечение DNS.
Серверы имен:

</doc>
<doc id="926" url="https://ru.wikipedia.org/wiki?curid=926" title="E-mail">
E-mail



</doc>
<doc id="927" url="https://ru.wikipedia.org/wiki?curid=927" title="FTP">
FTP

FTP () — протокол передачи файлов по сети, появившийся в 1971 году задолго до HTTP и даже до TCP/IP, благодаря чему является одним из старейших прикладных протоколов. Изначально FTP работал поверх протокола NCP, на сегодняшний день широко используется для распространения ПО и доступа к удалённым хостам.
В отличие от TFTP, гарантирует передачу (либо выдачу ошибки) за счёт применения квитируемого протокола.
Протокол построен на архитектуре «клиент-сервер» и использует разные сетевые соединения для передачи команд и данных между клиентом и сервером. Пользователи FTP могут пройти аутентификацию, передавая логин и пароль открытым текстом, или же, если это разрешено на сервере, они могут подключиться анонимно. Можно использовать протокол SSH для безопасной передачи, шифрующей (скрывающей) логин и пароль, а также содержимое файла.
Первые клиентские FTP-приложения были интерактивными инструментами командной строки, реализующими стандартные команды и синтаксис. С тех пор были разработаны графические пользовательские интерфейсы для многих используемых по сей день операционных систем. Среди этих интерфейсов как компоненты программы общего веб-дизайна вроде Microsoft Expression Web, так и специализированные FTP-клиенты (например, FileZilla).
Описание протокола.
Достаточно яркая особенность протокола FTP в том, что он использует множественное (как минимум — двойное) подключение. При этом один канал является управляющим, через который поступают команды серверу и возвращаются его ответы (обычно через TCP-порт 21), а через остальные происходит собственно передача данных, по одному каналу на каждую передачу. Поэтому в рамках одной сессии по протоколу FTP можно передавать одновременно несколько файлов, причём в обоих направлениях. Для каждого канала данных открывается свой TCP порт, номер которого выбирается либо сервером, либо клиентом, в зависимости от режима передачи.
Протокол FTP (как и HTTP) имеет двоичный режим передачи, что сокращает накладные расходы трафика и уменьшает время обмена данными при передаче больших файлов.
Начиная работу через протокол FTP, клиент входит в сессию, и все операции проводятся в рамках этой сессии (проще говоря, сервер помнит текущее состояние). Протокол HTTP ничего не «помнит» — его задача — отдать данные и забыть, поэтому запоминание состояния при использовании HTTP осуществляется внешними по отношению к протоколу методами.
FTP работает на прикладном уровне модели OSI и используется для передачи файлов с помощью TCP/IP. Для этого должен быть запущен FTP-сервер, ожидающий входящих запросов. Компьютер-клиент может связаться с сервером Это соединение (поток управления) остаётся открытым на время сессии. Второе соединение (поток данных), может быть открыт как сервером из порта 20 к порту соответствующего клиента (активный режим), или же клиентом из любого порта к порту соответствующего сервера (пассивный режим), что необходимо для передачи файла данных. Поток управления используется для работы с сессией — например, обмен между клиентом и сервером командами и паролями с помощью telnet-подобного протокола. Например, «RETR имя файла» передаст указанный файл от сервера клиенту. Вследствие этой двухпортовой структуры FTP считается внешнеполосным протоколом, в отличие от внутриполосного HTTP.
Соединение и передача данных.
Протокол определён в RFC 959.
Сервер отвечает по потоку управления трёхзначными ASCII-кодами состояния с необязательным текстовым сообщением. Например, «200» (или «200 ОК») означает, что последняя команда была успешно выполнена. Цифры представляют код ответа, а текст — разъяснение или запрос. Текущая передача по потоку данных может быть прервана с помощью прерывающего сообщения, посылаемого по потоку управления.
FTP может работать в активном или пассивном режиме, от выбора которого зависит способ установки соединения. В активном режиме клиент создаёт управляющее TCP-соединение с сервером и отправляет серверу свой IP-адрес и произвольный номер клиентского порта, после чего ждёт, пока сервер запустит TCP-соединение с этим адресом и номером порта. В случае, если клиент находится за брандмауэром и не может принять входящее TCP-соединение, может быть использован пассивный режим. В этом режиме клиент использует поток управления, чтобы послать серверу команду PASV, и затем получает от сервера его IP-адрес и номер порта, которые затем используются клиентом для открытия потока данных с произвольного клиентского порта к полученному адресу и порту. Оба режима были обновлены в сентябре 1998 года для поддержки IPv6. В это время были проведены дальнейшие изменения пассивного режима, обновившие его до расширенного пассивного режима.
При передаче данных по сети могут быть использованы четыре представления данных:
Для текстовых файлов предоставлены различные форматы управления и настройки структуры записи. Эти особенности были разработаны для работы с файлами, содержащими Telnet или ASA-форматирование.
Передача данных может осуществляться в любом из трёх режимов:
Аутентификация.
FTP-аутентификация использует схему имя пользователя/пароль для предоставления доступа. Имя пользователя посылается серверу командой USER, а пароль — командой PASS. Если предоставленная клиентом информация принята сервером, то сервер отправит клиенту приглашение и начинается сессия. Пользователи могут, если сервер поддерживает эту особенность, войти в систему без предоставления учётных данных, но сервер может предоставить только ограниченный доступ для таких сессий.
Хост, обеспечивающий FTP-сервис, может предоставить анонимный доступ к FTP. Пользователи обычно входят в систему как «anonymous» (может быть регистрозависимым на некоторых FTP-серверах) в качестве имени пользователя. Хотя обычно пользователей просят прислать адрес их электронной почты вместо пароля, никакой проверки фактически не производится. Многие FTP-хосты, предоставляющие обновления программного обеспечения, поддерживают анонимный доступ.
FTP-ALG.
Специально для работы FTP-протокола через межсетевые экраны было сделано расширение NAT, называемое FTP-ALG, позволяющее транслировать входящие соединения от сервера к клиенту через NAT. В процессе такого соединения FTP-ALG подменяет передаваемые данные от клиента, указывая серверу истинный адрес и порт, с которым сможет соединиться сервер, а потом транслирует соединение от сервера от этого адреса клиенту на его адрес. Несмотря на все меры и нововведения, принятые для поддержки FTP-протокола, на практике функция FTP-ALG обычно отключается во всех роутерах и маршрутизаторах с целью обеспечения дополнительной безопасности от вирусных угроз.
NAT и обход брандмауэров.
FTP обычно передаёт данные при наличии соединения сервера с клиентом, после того как клиент отправил команду PORT. Это создаёт проблему как для NAT, так и для брандмауэров, которые не разрешают соединения из интернета к внутренним хостам. Для NAT дополнительной проблемой является то, что представление IP-адресов и номера порта в команде PORT относится к IP-адресу и порту внутреннего хоста, вместо публичного IP-адреса и NAT-порта. Существует два подхода к этой проблеме. Первый заключается в том, что FTP-клиент и FTP-сервер используют команду PASV, которая вызывает соединение для передачи данных, установленное от клиента к серверу. Второй подход — изменение для NAT значений команды PORT с помощью шлюза на прикладном уровне.
История.
Первая реализация протокола (1971 год) предусматривала обмен между клиентом и сервером сообщениями, состоящими из заголовка (72 бит) и данных переменной длины. Заголовок сообщения включал в себя запрос к FTP-серверу или ответ от него, тип и длину передаваемых данных. В качестве данных передавались параметры запроса (например, путь и имя файла), информация от сервера (например, список файлов в каталоге) и сами файлы. Таким образом, команды и данные передавались по одному и тому же каналу.
В 1972 году протокол был полностью изменён и принял вид, близкий к современному. Команды с параметрами от клиента и ответы сервера передаются по TELNET-соединению (канал управления), для передачи данных создаётся отдельное соединение (канал данных).
В последующих редакциях была добавлена возможность работы в пассивном режиме, передачи файлов между FTP-серверами, введены команды получения информации, смены текущего каталога, создания и удаления каталогов, сохранения файлов под уникальным именем. Некоторое время существовали команды для передачи электронной почты через FTP, однако впоследствии они были исключены из протокола.
В 1980 году FTP-протокол стал использовать TCP. Последняя редакция протокола была выпущена в 1985 году.
В 1997 году появилось дополнение к протоколу, позволяющее шифровать и подписывать информацию в канале управления и канале данных. В 1999 году выпущено дополнение, посвящённое интернационализации протокола, которое рекомендует использовать кодировку UTF-8 для команд и ответов сервера и определяет новую команду LANG, устанавливающую язык ответов.
Поддержка веб-браузерами.
Большая часть обычных веб-браузеров может извлекать файлы, расположенные на FTP-серверах, хотя они могут не поддерживать расширения протоколов вроде FTPS. Когда указан FTP-адрес, а не HTTP-адрес, доступный контент на удалённом сервере представляется аналогично остальному веб-контенту. Полностью функциональный FTP-клиент может быть запущен в Firefox как расширение FireFTP.
С 2020 года браузер Chrome (как, возможно, и другие) будет полностью лишён поддержки протокола FTP.
Синтаксис FTP URI описан в RFC1738, в форме: ftp://[&lt;пользователь&gt;[:&lt;пароль&gt;]@]&lt;хост&gt;[:&lt;порт&gt;]/&lt;путь&gt; (параметры в квадратных скобках необязательны). Например:ftp://public.ftp-servers.example.com/mydirectory/myfile.txt (недоступная ссылка)или:ftp://user001:secretpassword@private.ftp-servers.example.com/mydirectory/myfile.txt (недоступная ссылка)Более детально об указании имени пользователя и пароля написано в документации браузеров. По умолчанию, большинство веб-браузеров используют пассивный (PASV) режим, который лучше обходит брандмауэры конечного пользователя.
Безопасность.
FTP не разрабатывался как защищённый (особенно по нынешним меркам) протокол и имеет многочисленные уязвимости в защите. В мае 1999 авторы RFC 2577 свели уязвимости в следующий список проблем:
FTP не может зашифровать свой трафик, все передачи — открытый текст, поэтому имена пользователей, пароли, команды и данные могут быть прочитаны кем угодно, способным перехватить пакет по сети. Эта проблема характерна для многих спецификаций Интернет-протокола (в их числе SMTP, Telnet, POP, IMAP), разработанных до создания таких механизмов шифрования, как Обычное решение этой проблемы — использовать «безопасные», TLS-защищённые версии уязвимых протоколов (FTPS для FTP, TelnetS для Telnet и т. д.) или же другой, более защищённый протокол, вроде SFTP/SCP, предоставляемого с большинством реализаций протокола Secure Shell.
Безопасный FTP.
Существует несколько методов безопасной передачи файлов, которые иногда называются «Безопасным FTP».
FTPS.
Явный FTPS — расширение стандарта FTP, позволяющее клиентам требовать того, чтобы FTP-сессия была зашифрована. Это реализуется отправкой команды «AUTH TLS». Сервер обладает возможностью позволить или отклонить соединения, которые не запрашивают TLS. Это расширение протокола определено в спецификации RFC 4217. Неявный FTPS — устаревший стандарт для FTP, требующий использования SSL- или TLS-соединения. Этот стандарт должен был использовать отличные от обычного FTP порты.
SFTP.
SFTP, или «SSH File Transfer Protocol», не связан с FTP, за исключением того, что он тоже передаёт файлы и имеет аналогичный набор команд для пользователей. SFTP, или безопасный FTP, — это программа, использующая SSH (Secure Shell) для передачи файлов. В отличие от стандартного FTP он шифрует и команды, и данные, предохраняя пароли и конфиденциальную информацию от открытой передачи через сеть. По функциональности SFTP похож на FTP, но так как он использует другой протокол, клиенты стандартного FTP не могут связаться с SFTP-сервером и наоборот.
FTP через SSH (не SFTP).
FTP через SSH (не SFTP) относится к практике туннелирования обычной FTP-сессии через SSH-соединение. Поскольку FTP использует несколько TCP-соединений, туннелирование через SSH особенно затруднительно. Когда много SSH-клиентов пытаются установить туннель для канала управления (изначальное «клиент-сервер» соединение по порту 21), защищён будет только этот канал; при передаче данных программное обеспечение FTP на любом конце установит новые TCP-соединения (каналы данных), которые обойдут SSH-соединение и, таким образом, лишатся целостной защиты.
Иначе, для клиентского программного обеспечения SSH необходимо иметь определённые знания о FTP для отслеживания и перезаписи сообщений потока управления FTP и автономного открытия новых перенаправлений для потока данных FTP.
Программные пакеты, поддерживающие этот режим:
FTP через SSH иногда относят к безопасным FTP, но не стоит путать его с другими методами, такими как SSL/TLS (FTPS). Другие методы передачи файлов с помощью SSH и не связанные с FTP — SFTP и SCP. В каждом из них и учётные, и файловые данные всегда защищены протоколом SSH.
Коды ответов FTP.
Ниже представлено краткое описание кодов ответа, которые могут быть возвращены FTP-сервером. Эти коды были стандартизированы IETF в RFC 959. Как было сказано ранее, код ответа — трёхзначное число. Первая цифра отвечает за один из трёх исходов: успех, отказ или указание на ошибку либо неполный ответ.
Вторая цифра определяет тип ошибки:
Третья цифра окончательно специфицирует ошибку.
Пример.
В примере жирным шрифтом выделены команды, которые подаёт клиент; обычным шрифтом — сообщения сервера. Примечания отделены двумя слэшами:
 220 FTP server ready.
 220 Hello World!
 USER anonymous
 331 Anonymous login ok, send your complete email address as your password
 PASS ************
 230 Logged in anonymously.
 PASV
 227 Entering Passive Mode (192,168,254,253,233,92) //Клиент должен открыть соединение на переданный IP
 LIST
 150 Here comes the directory listing. // Сервер передаёт список файлов в каталог
 226 Directory send OK.
 CWD incoming
 250 Directory successfully changed.
 PASV
 227 Entering Passive Mode (192,168,254,253,207,56)
 STOR example.avi
 150 Ok to send data. // Клиент передаёт содержимое файла
 226 File receive OK.
 QUIT
 221 Goodbye.
Аргумент 192,168,254,253,207,56 означает, что соединение к серверу ожидается на узле с IP-адресом 192.168.254.253 на порту 207 « 8 + 56 = 53048 (где « — операция побитового сдвига, 207 записывается в младший разряд, а потом сдвигается в старший, чтобы в младший записать 
На многих FTP-серверах существует каталог (под названием incoming, upload и т. п.), открытый на запись и предназначенный для закачки файлов на сервер. Это позволяет пользователям наполнять сервера свежими данными.
FXP.
FXP ( — протокол обмена файлами) — способ передачи файлов между двумя FTP-серверами напрямую, без закачки файлов на компьютер пользователя. При FXP-сессии клиент открывает два FTP-соединения к двум разным серверам, запрашивая файл на первом сервере, указывая в команде PORT IP-адрес второго сервера.
Несомненным преимуществом поддержки стандарта FXP является то, что на конечных пользователей, желающих скопировать файлы с одного FTP-сервера на другой, уже не действует ограничение пропускной способности их собственного интернет-соединения. Нет необходимости скачивать себе файл, чтобы потом загрузить его на другой FTP-сервер. Таким образом, время передачи файлов будет зависеть только от скорости соединения между двумя удаленными FTP-серверами, которая в большинстве случаев заведомо больше «пользовательской».
FXP стал использоваться злоумышленниками для атак на другие серверы: в команде PORT указывается IP-адрес и порт атакуемого сервиса на компьютере жертвы, и командами RETR/STOR производится обращение на этот порт от лица FTP-сервера, а не атакующей машины, что позволяло устраивать масштабные DDoS-атаки с использованием сразу многих FTP-серверов, либо обходить систему безопасности компьютера жертвы, если он полагается только на проверку IP клиента и используемый для атаки FTP-сервер находится в доверенной сети или на шлюзе. В результате сейчас практически все серверы проверяют соответствие IP-адреса, указанного в команде PORT, IP-адресу FTP-клиента и по умолчанию запрещают использование там IP-адресов третьих сторон. Таким образом, использование FXP невозможно при работе с публичными FTP-серверами.

</doc>
<doc id="931" url="https://ru.wikipedia.org/wiki?curid=931" title="Gnutella">
Gnutella

Gnutella — полностью децентрализованная файлообменная сеть в рамках Интернета, потомок Napster, отличается принципиальным отсутствием центрального сервера. Сеть формируется, когда один пользователь Gnutella соединяется с другим пользователем, после чего они могут обмениваться доступной информацией. Обмениваться можно файлами любых форматов, есть множество удобных функций. В результате полной децентрализации сеть практически невозможно уничтожить, так как для этого потребуется вывести из строя каждый узел сети.
История появления сети Gnutella.
Первый клиент сети Gnutella был разработан Джастином Франкелем и Томом Пеппером из Nullsoft в начале 2000 года, вскоре после приобретения их компанией AOL. 14 марта программа была доступна для скачивания на серверах в Nullsoft. 
Первая версия программы давала возможность пользователю искать и обмениваться всеми видами файлов с другими владельцами Gnutella без участия каких-либо серверов. Это событие было заранее анонсировано на Slashdot и в этот день программу скачали тысячи людей. Исходный код должен был быть выпущен позже, в соответствии с GNU General Public License (GPL).
На следующий день AOL остановила распространение программы по правовым вопросам и отстранила Nullsoft от выполнения любой дальнейшей работы над проектом (официально AOL назвала Gnutella как «unauthorized freelance project» и открестились от него), после чего разработчики Gnutella, во главе с Джастином Френкелем, уволились. Но это не помешало распространению Gnutella, через несколько дней протокол был подвергнут реверс-инжинирингу и начали появляться свободные и открытые клоны. Этот изначальный процесс параллельного развития различных клиентов различными группами продолжается и сегодня.
Механизм работы.
При подключении клиент получает от узла, с которым ему удалось соединиться, список из пяти активных узлов; им отсылается запрос на поиск ресурса по ключевому слову. Узлы ищут у себя соответствующие запросу ресурсы и, если не находят их, пересылают запрос активным узлам вверх по «дереву» (топология сети имеет структуру графа типа «дерево»), пока не найдётся ресурс или не будет превышено максимальное число шагов. Такой поиск называется размножением запросов (query flooding).
Подобная реализация ведёт к экспоненциальному росту числа запросов и соответственно на верхних уровнях «дерева» может привести к отказу в обслуживании, что и наблюдалось неоднократно на практике. Разработчики усовершенствовали алгоритм, ввели правила, в соответствии с которыми запросы могут пересылать вверх по «дереву» только определённые узлы — так называемые выделенные (ultrapeers), остальные узлы сети (leaves) могут лишь опрашивать последние. Введена также система кеширующих узлов.
В таком виде сеть функционирует и сейчас, хотя недостатки алгоритма и слабые возможности расширяемости ведут к уменьшению её популярности.
Клиенты.
На 2007 год Gnutella являлась одной из наиболее популярных файлообменных сетей. Работа сети Gnutella непрерывно совершенствуется благодаря усилиям разработчиков множества клиентов сети:
Реакция со стороны FSF.
Название Gnutella первоначально было игрой слов GNU, так как разработчики планировали выпустить исходный код под лицензией GNU GPL, и Nutella — марки любимой ореховой пасты этих разработчиков. Однако, ни самая первая программа, ни соответствующие современные проекты не являются официальным проектом GNU, включая использующие протокол Gnutella gtk-gnutella, mutella и gnucleus. В рамках проекта GNU развивается собственная программа для одноранговых сетей - GNUnet. Кроме того, Фонд свободного программного обеспечения сосредоточен на свободе копирования и изменения программного обеспечения, в то время как Gnutella — это, прежде всего, сеть обмена музыкальными файлами. И хотя существует некоторое сходство в вопросах этики копирования программного обеспечения и музыкальных записей, FSF попросила разработчиков Gnutella изменить название программы для избежания путаницы.

</doc>
<doc id="935" url="https://ru.wikipedia.org/wiki?curid=935" title="HTTP">
HTTP

HTTP ( —
«протокол передачи гипертекста») — сетевой протокол прикладного уровня,
который изначально предназначался для получения с серверов гипертекстовых документов в формате HTML,
а с течением времени стал универсальным средством взаимодействия между узлами как Всемирной паутины, так и изолированных веб-инфраструктур.
Определение по основным документациям:
HTTP — протокол уровня приложений для распределённых, объединённых, гипермедийных информационных систем, используемый в глобальной информационной инициативе Всемирной паутины с 1990 года.
Основные свойства.
Основой HTTP является технология «клиент-сервер», то есть предполагается существование:
HTTP в настоящее время повсеместно используется во Всемирной паутине для получения информации с веб-сайтов. В 2006 году в Северной Америке доля HTTP-трафика превысила долю P2P-сетей и составила 46 %, из которых почти половина — это передача потокового видео и звука.
HTTP используется также в качестве «транспорта» для других протоколов прикладного уровня, таких как SOAP, XML-RPC, WebDAV.
Основным объектом манипуляции в HTTP является ресурс, на который указывает URI (Uniform Resource Identifier) в запросе клиента. Обычно такими ресурсами являются хранящиеся на сервере файлы, но ими могут быть логические объекты или что-то абстрактное. Особенностью протокола HTTP является возможность указать в запросе и ответе способ представления одного и того же ресурса по различным параметрам: формату, кодировке, языку и т. д. (в частности, для этого используется HTTP-заголовок). Именно благодаря возможности указания способа кодирования сообщения клиент и сервер могут обмениваться двоичными данными, хотя данный протокол является текстовым.
HTTP — протокол прикладного уровня; аналогичными ему являются FTP и SMTP. Обмен сообщениями идёт по обыкновенной схеме «запрос-ответ». Для идентификации ресурсов HTTP использует глобальные URI. В отличие от многих других протоколов, HTTP не сохраняет своего состояния. Это означает отсутствие сохранения промежуточного состояния между парами «запрос-ответ». Компоненты, использующие HTTP, могут самостоятельно осуществлять сохранение информации о состоянии, связанной с последними запросами и ответами (например, «куки» на стороне клиента, «сессии» на стороне сервера). Браузер, посылающий запросы, может отслеживать задержки ответов. Сервер может хранить IP-адреса и заголовки запросов последних клиентов. Однако сам протокол не осведомлён о предыдущих запросах и ответах, в нём не предусмотрена внутренняя поддержка состояния, к нему не предъявляются такие требования.
Большинство протоколов предусматривает установление TCP-сессии, в ходе которой один раз происходит авторизация, и дальнейшие действия выполняются в контексте этой авторизации. HTTP же устанавливает отдельную TCP-сессию на каждый запрос; в более поздних версиях HTTP было разрешено делать несколько запросов в ходе одной TCP-сессии, но браузеры обычно запрашивают только страницу и включённые в неё объекты (картинки, каскадные стили и т. п.), а затем сразу разрывают TCP-сессию. Для поддержки авторизованного (неанонимного) доступа в HTTP используются cookies; причём такой способ авторизации позволяет сохранить сессию даже после перезагрузки клиента и сервера.
При доступе к данным по FTP или по файловым протоколам тип файла (точнее, тип содержащихся в нём данных) определяется по расширению имени файла, что не всегда удобно. HTTP перед тем, как передать сами данные, передаёт заголовок «Content-Type: тип/подтип», позволяющий клиенту однозначно определить, каким образом обрабатывать присланные данные. Это особенно важно при работе с CGI-скриптами, когда расширение имени файла указывает не на тип присылаемых клиенту данных, а на необходимость запуска данного файла на сервере и отправки клиенту результатов работы программы, записанной в этом файле (при этом один и тот же файл в зависимости от аргументов запроса и своих собственных соображений может порождать ответы разных типов — в простейшем случае картинки в разных форматах).
Кроме того, HTTP позволяет клиенту прислать на сервер параметры, которые будут переданы запускаемому CGI-скрипту. Для этого же в HTML были введены формы.
Перечисленные особенности HTTP позволили создавать поисковые машины (первой из которых стала AltaVista, созданная фирмой DEC), форумы и Internet-магазины. Это коммерциализировало Интернет, появились компании, основным полем деятельности которых стало предоставление доступа в Интернет (провайдеры) и создание сайтов.
Программное обеспечение.
Всё программное обеспечение для работы с протоколом HTTP разделяется на три большие категории:
Для отличия конечных серверов от прокси в официальной документации используется термин «исходный сервер» (). Один и тот же программный продукт может одновременно выполнять функции клиента, сервера или посредника в зависимости от поставленных задач. В спецификациях протокола HTTP подробно описывается поведение для каждой из этих ролей.
Клиенты.
Первоначально протокол HTTP разрабатывался для доступа к гипертекстовым документам Всемирной паутины. Поэтому основными реализациями клиентов являются браузеры (агенты пользователя). Для просмотра сохранённого содержимого сайтов на компьютере без соединения с Интернетом были придуманы офлайн-браузеры. При нестабильном соединении для загрузки больших файлов используются менеджеры закачек; они позволяют в любое время докачать указанные файлы после потери соединения с веб-сервером. Некоторые виртуальные атласы (такие как Google Планета Земля и NASA World Wind) тоже используют HTTP.
Нередко протокол HTTP используется программами для скачивания обновлений.
Целый комплекс программ-роботов используется в поисковых системах Интернета. Среди них веб-пауки (краулеры), которые производят проход по гиперссылкам, составляют базу данных ресурсов серверов и сохраняют их содержимое для дальнейшего анализа.
Исходные серверы.
Основные реализации: Apache, Internet Information Services (IIS), nginx, (LSWS), Google Web Server, lighttpd.
Прокси-серверы.
Основные реализации: Squid, UserGate, Multiproxy, Naviscope, nginx.
Структура HTTP-сообщения.
Каждое HTTP-сообщение состоит из трёх частей, которые передаются в указанном порядке:
Тело сообщения может отсутствовать, но стартовая строка и заголовок являются обязательными элементами. Исключением является версия 0.9 протокола, у которой сообщение запроса содержит только стартовую строку, а сообщения ответа — только тело сообщения.
Для версии протокола 1.1 сообщение запроса обязательно должно содержать заголовок "Host".
Стартовая строка.
Стартовые строки различаются для запроса и ответа. Строка запроса выглядит так:
Здесь:
Чтобы запросить страницу данной статьи, клиент должен передать строку (задан всего один заголовок):
 Host: ru.wikipedia.org
Стартовая строка ответа сервера имеет следующий формат: codice_5, где:
Например, стартовая строка ответа сервера на предыдущий запрос может выглядеть так:
 HTTP/1.0 200 OK
Методы.
Метод HTTP () — последовательность из любых символов, кроме управляющих и разделителей, указывающая на основную операцию над ресурсом. Обычно метод представляет собой короткое английское слово, записанное заглавными буквами. Обратите внимание, что название метода чувствительно к регистру.
Сервер может использовать любые методы, не существует обязательных методов для сервера или клиента. Если сервер не распознал указанный клиентом метод, то он должен вернуть статус codice_6 (Not Implemented). Если серверу метод известен, но он неприменим к конкретному ресурсу, то возвращается сообщение с кодом codice_7 (Method Not Allowed). В обоих случаях серверу следует включить в сообщение ответа заголовок codice_8 со списком поддерживаемых методов.
Кроме методов codice_3 и codice_10, часто применяется метод codice_11.
OPTIONS.
Используется для определения возможностей веб-сервера или параметров соединения для конкретного ресурса. В ответ серверу следует включить заголовок codice_8 со списком поддерживаемых методов. Также в заголовке ответа может включаться информация о поддерживаемых расширениях.
Предполагается, что запрос клиента может содержать тело сообщения для указания интересующих его сведений. Формат тела и порядок работы с ним в настоящий момент не определён; сервер пока должен его игнорировать. Аналогичная ситуация и с телом в ответе сервера.
Для того, чтобы узнать возможности всего сервера, клиент должен указать в URI звёздочку — «codice_13». Запросы «codice_14» могут также применяться для проверки работоспособности сервера (аналогично «пингованию») и тестирования на предмет поддержки сервером протокола HTTP версии 1.1.
Результат выполнения этого метода не кэшируется.
GET.
Используется для запроса содержимого указанного ресурса. С помощью метода codice_3 можно также начать какой-либо процесс. В этом случае в тело ответного сообщения следует включить информацию о ходе выполнения процесса.
Клиент может передавать параметры выполнения запроса в URI целевого ресурса после символа «codice_16»:&lt;br&gt;codice_17
Согласно стандарту HTTP, запросы типа codice_3 считаются идемпотентными
Кроме обычного метода codice_3, различают ещё
Порядок выполнения подобных запросов определён стандартами отдельно.
HEAD.
Аналогичен методу codice_3, за исключением того, что в ответе сервера отсутствует тело. Запрос codice_10 обычно применяется для извлечения метаданных, проверки наличия ресурса (валидация URL) и чтобы узнать, не изменился ли он с момента последнего обращения.
Заголовки ответа могут кэшироваться. При несовпадении метаданных ресурса с соответствующей информацией в кэше — копия ресурса помечается как устаревшая.
POST.
Применяется для передачи пользовательских данных заданному ресурсу. Например, в блогах посетители обычно могут вводить свои комментарии к записям в HTML-форму, после чего они передаются серверу методом POST и он помещает их на страницу. При этом передаваемые данные (в примере с блогами — текст комментария) включаются в тело запроса. Аналогично с помощью метода codice_11 обычно загружаются файлы на сервер.
В отличие от метода codice_3, метод codice_11 не считается идемпотентным, то есть многократное повторение одних и тех же запросов codice_11 может возвращать разные результаты (например, после каждой отправки комментария будет появляться очередная копия этого комментария).
При результате выполнения codice_32 (Ok) в тело ответа следует включить сообщение об итоге выполнения запроса. Если был создан ресурс, то серверу следует вернуть ответ codice_33 (Created) с указанием URI нового ресурса в заголовке codice_34.
Сообщение ответа сервера на выполнение метода codice_11 не кэшируется.
PUT.
Применяется для загрузки содержимого запроса на указанный в запросе URI. Если по заданному URI не существует ресурса, то сервер создаёт его и возвращает статус codice_33 (Created). Если же ресурс был изменён, то сервер возвращает codice_32 (Ok) или codice_38 (No Content). Сервер не должен игнорировать некорректные заголовки codice_39, передаваемые клиентом вместе с сообщением. Если какой-то из этих заголовков не может быть распознан или недопустим при текущих условиях, то необходимо вернуть код ошибки codice_6 (Not Implemented).
Фундаментальное различие методов codice_11 и codice_42 заключается в понимании предназначений URI ресурсов. Метод codice_11 предполагает, что по указанному URI будет производиться обработка передаваемого клиентом содержимого. Используя codice_42, клиент предполагает, что загружаемое содержимое соответствует находящемуся по данному URI ресурсу.
Сообщения ответов сервера на метод codice_42 не кэшируются.
PATCH.
Аналогично PUT, но применяется только к фрагменту ресурса.
DELETE.
Удаляет указанный ресурс.
TRACE.
Возвращает полученный запрос так, что клиент может увидеть, какую информацию промежуточные серверы добавляют или изменяют в запросе.
CONNECT.
Преобразует соединение запроса в прозрачный TCP/IP-туннель, обычно чтобы содействовать установлению защищённого SSL-соединения через нешифрованный прокси.
Коды состояния.
Код состояния является частью первой строки ответа сервера. Он представляет собой целое число из трёх цифр. Первая цифра указывает на класс состояния. За кодом ответа обычно следует отделённая пробелом поясняющая фраза на английском языке, которая разъясняет человеку причину именно такого ответа. Примеры:
 201 Webpage Created
 403 Access allowed only for registered users
 507 Insufficient Storage
Клиент узнаёт по коду ответа о результатах его запроса и определяет, какие действия ему предпринимать дальше. Набор кодов состояния является стандартом, и они описаны в соответствующих документах RFC. Введение новых кодов должно производиться только после согласования с IETF. Клиент может не знать все коды состояния, но он обязан отреагировать в соответствии с классом кода.
В настоящее время выделено пять классов кодов состояния
Заголовки.
Заголовки HTTP () — это строки в HTTP-сообщении, содержащие разделённую двоеточием пару параметр-значение. Формат заголовков соответствует общему формату заголовков текстовых сетевых сообщений ARPA (см. RFC 822). Заголовки должны отделяться от тела сообщения хотя бы одной пустой строкой.
Примеры заголовков:
 Server: Apache/2.2.11 (Win32) PHP/5.3.0
 Last-Modified: Sat, 16 Jan 2010 21:16:42 GMT
 Content-Type: text/plain; charset=windows-1251
 Content-Language: ru
В примере выше каждая строка представляет собой один заголовок. При этом то, что находится до двоеточия, называется именем (), а что после него — значением ().
Все заголовки разделяются на четыре основных группы:
Именно в таком порядке рекомендуется посылать заголовки получателю.
Все необходимые для функционирования HTTP заголовки описаны в основных RFC. Если не хватает существующих, то можно вводить свои. Традиционно к именам таких дополнительных заголовков добавляют префикс «codice_46» для избежания конфликта имён с возможно существующими. Например, как в заголовках codice_47 или codice_48. Некоторые разработчики используют свои индивидуальные префиксы. Примерами таких заголовков могут служить codice_49 и codice_50, введённые корпорацией Microsoft для расширения WebDAV.
Тело сообщения.
Тело HTTP-сообщения (codice_51), если оно присутствует, используется для передачи тела объекта, связанного с запросом или ответом. Тело сообщения отличается от тела объекта (codice_52) только в том случае, когда применяется кодирование передачи, что указывается полем заголовка codice_53.
 message-body = entity-body
 | &lt;entity-body закодировано согласно
 Transfer-Encoding&gt;
Поле codice_53 должно использоваться для указания любого кодирования передачи, применённого приложением в целях гарантирования безопасной и правильной передачи сообщения. Поле codice_53 — это свойство сообщения, а не объекта, и, таким образом, может быть добавлено или удалено любым приложением в цепочке запросов/ответов.
Правила, устанавливающие допустимость тела сообщения в сообщении, отличны для запросов и ответов.
Присутствие тела сообщения в запросе отмечается добавлением к заголовкам запроса поля заголовка codice_56 или codice_53. Тело сообщения может быть добавлено в запрос, только когда метод запроса допускает тело объекта.
Включается или не включается тело сообщения в сообщение ответа — зависит как от метода запроса, так и от кода состояния ответа. Все ответы на запрос с методом codice_10 не должны включать тело сообщения, даже если присутствуют поля заголовка объекта (codice_59), заставляющие поверить в присутствие объекта. Никакие ответы с кодами состояния codice_60 (Информационные), codice_38 (Нет содержимого, No Content), и codice_62 (Не модифицирован, Not Modified) не должны содержать тела сообщения. Все другие ответы содержат тело сообщения, даже если оно имеет нулевую длину.
Основные механизмы протокола.
Частичные GET.
HTTP позволяет запросить не сразу всё содержимое ресурса, а только указанный фрагмент. Такие запросы называются частичные codice_3; возможность их выполнения необязательна (но желательна) для серверов. Частичные codice_3 в основном используются для докачки файлов и быстрого параллельного скачивания в нескольких потоках. Некоторые программы скачивают заголовок архива, выводят пользователю внутреннюю структуру, а потом уже запрашивают фрагменты с указанными элементами архива.
Для получения фрагмента клиент посылает серверу запрос с заголовком codice_25, указывая в нём необходимые байтовые диапазоны. Если сервер не понимает частичные запросы (игнорирует заголовок codice_25), то он вернёт всё содержимое со статусом codice_32, как и при обычном codice_3. В случае успешного выполнения сервер возвращает вместо кода codice_32 ответ со статусом codice_70 (Partial Content), включая в ответ заголовок codice_71. Сами фрагменты могут быть переданы двумя способами:
Условные GET.
Метод codice_3 изменяется на «условный codice_3», если сообщение запроса включает в себя поле заголовка codice_21. В ответ на «условный codice_3» тело запрашиваемого ресурса передаётся, только если он изменялся после даты, указанной в заголовке codice_21. Алгоритм определения этого включает в себя следующие случаи:
Использование метода «условный GET» направлено на разгрузку сети, так как он позволяет не передавать по сети избыточную информацию.
Согласование содержимого.
Согласование содержимого () — механизм автоматического определения необходимого ресурса при наличии нескольких разнотипных версий документа. Субъектами согласования могут быть не только ресурсы сервера, но и возвращаемые страницы с сообщениями об ошибках (403, 404 и т. п.).
Различают два основных типа согласований:
Одновременно могут быть использованы оба типа или каждый из них по отдельности.
В основной спецификации по протоколу (RFC 2616) также выделяется так называемое прозрачное согласование () как предпочтительный вариант комбинирования обоих типов. Последний механизм не следует путать с независимой технологией Transparent Content Negotiation (TCN, «Прозрачное согласование содержимого», см. RFC 2295), которая не является частью протокола HTTP, но может использоваться с ним. У обоих существенное различие в принципе работы и самом значении слова «прозрачное» (transparent). В спецификации по HTTP под прозрачностью подразумевается, что процесс не заметен для клиента и сервера, а в технологии TCN прозрачность означает доступность полного списка вариантов ресурса для всех участников процесса доставки данных.
Управляемое сервером.
При наличии нескольких версий ресурса сервер может анализировать заголовки запроса клиента, чтобы выдать, по его мнению, наиболее подходящую. В основном анализируются заголовки codice_81, codice_82, codice_83, codice_84 и codice_85. Серверу желательно включать в ответ заголовок codice_86 с указанием параметров, по которым различается содержимое по запрашиваемому URI.
Географическое положение клиента можно определить по удалённому IP-адресу. Это возможно за счёт того что IP-адреса, как и доменные имена, регистрируются на конкретного человека или организацию. При регистрации указывается регион, в котором будет использоваться желаемое адресное пространство. Эти данные общедоступны, и в Интернете можно найти соответствующие свободно распространяемые базы данных и готовые программные модули для работы с ними (следует ориентироваться на ключевые слова «Geo IP»).
Следует помнить что такой метод способен определить местоположение максимум с точностью до города (отсюда определяется и страна).
При этом информация актуальна только на момент регистрации адресного пространства. Например, если московский провайдер зарегистрирует диапазон адресов с указанием Москвы и начнёт предоставлять доступ клиентам из ближайшего Подмосковья, то его абоненты могут на некоторых сайтах наблюдать, что они из Москвы, а не из Красногорска или Дзержинского.
Управляемое сервером согласование имеет несколько недостатков:
Управляемое клиентом.
В данном случае тип содержимого определяется только на стороне клиента.
Для этого сервер возвращает в ответе с кодом состояния codice_87 (Multiple Choices) или codice_88 (Not Acceptable) список вариантов, среди которых пользователь выбирает подходящий.
Управляемое клиентом согласование хорошо, когда содержимое различается по самым частым параметрам (например, по языку и кодировке) и используется публичный кэш.
Основной недостаток — лишняя нагрузка, так как приходится делать дополнительный запрос, чтобы получить нужное содержимое.
Прозрачное согласование.
Данное согласование полностью прозрачно для клиента и сервера. В данном случае используется общий кэш, в котором содержится список вариантов, как для управляемого клиентом согласования. Если кэш понимает все эти варианты, то он сам делает выбор, как при управляемом сервером согласовании. Это снижает нагрузки с исходного сервера и исключает дополнительный запрос со стороны клиента.
В основной спецификации по протоколу HTTP механизм прозрачного согласования подробно не описан.
Множественное содержимое.
Протокол HTTP поддерживает передачу нескольких сущностей в пределах одного сообщения. Причём сущности могут передаваться не только в виде одноуровневой последовательности, но и в виде иерархии с вложением элементов друг в друга. Для обозначения множественного содержимого используются медиатипы codice_89. Работа с такими типами осуществляется по общим правилам, описанным в RFC 2046 (если иное не определено конкретным медиатипом). Если получателю не известно как работать с типом, то он обрабатывает его так же, как codice_90.
Параметр boundary означает разделитель между различными типами передаваемых сообщений. Например, передаваемый из формы параметр DestAddress передаёт значение адреса e-mail, а следующий за ним элемент AttachedFile1 отправляет двоичное содержимое изображения формата .jpg
Со стороны сервера сообщения со множественным содержимым могут посылаться в ответ на частичные codice_3 при запросе нескольких фрагментов ресурса. В этом случае используется медиатип codice_74.
Со стороны клиента при отправке HTML-формы чаще всего пользуются методом codice_11. Типичный пример: страницы отправки электронных писем со вложенными файлами. При отправке такого письма браузер формирует сообщение типа codice_94, интегрируя в него как отдельные части, введённые пользователем, тему письма, адрес получателя, сам текст и вложенные файлы:
 POST /send-message.html HTTP/1.1
 Host: mail.example.com
 Referer: http://mail.example.com/send-message.html
 User-Agent: BrowserForDummies/4.67b
 Content-Type: multipart/form-data; boundary="Asrf456BGe4h"
 Content-Length: "(суммарный объём, включая дочерние заголовки)"
 Connection: keep-alive
 Keep-Alive: 300
 "(пустая строка)"
 "(отсутствующая преамбула)"
 --Asrf456BGe4h
 Content-Disposition: form-data; name="DestAddress"
 "(пустая строка)"
 brutal-vasya@example.com—Asrf456BGe4h
 Content-Disposition: form-data; name="MessageTitle"
 "(пустая строка)"
 Я негодую—Asrf456BGe4h
 Content-Disposition: form-data; name="MessageText"
 "(пустая строка)"
 Привет, Василий! Твой ручной лев, которого ты оставил
 у меня на прошлой неделе, разодрал весь мой диван.
 Пожалуйста, забери его скорее!
 Во вложении две фотки с последствиями.
 --Asrf456BGe4h
 Content-Disposition: form-data; name="AttachedFile1"; filename="horror-photo-1.jpg"
 Content-Type: image/jpeg
 "(пустая строка)"
 "(двоичное содержимое первой фотографии)"
 --Asrf456BGe4h
 Content-Disposition: form-data; name="AttachedFile2"; filename="horror-photo-2.jpg"
 Content-Type: image/jpeg
 "(пустая строка)"
 "(двоичное содержимое второй фотографии)"
 --Asrf456BGe4h--
 "(отсутствующий эпилог)"
В примере в заголовках codice_95 параметр codice_96 соответствует атрибуту codice_96 в HTML-тегах codice_98 и codice_99. Параметр codice_100 равен исходному имени файла на компьютере пользователя. Более подробная информация о формировании HTML-форм и вложении файлов в RFC 1867.

</doc>
<doc id="937" url="https://ru.wikipedia.org/wiki?curid=937" title="OSCAR">
OSCAR

OSCAR ( — открытая система для общения в реальном времени) — открытый (с 5 марта 2008 года), но не свободный сетевой протокол, обеспечивающий обмен мгновенными и офлайновыми текстовыми сообщениями.
Состояния.
В программах-клиентах сторонних разработчиков некоторые состояния могут отсутствовать или иметь место дополнительные.
Реализации протокола.
Существует большое количество альтернативных клиентов ICQ для разных операционных систем, например: Miranda IM (Windows), QIP 2012 (Windows), &amp;RQ (Windows), Pidgin (Windows, GNU/Linux), Licq (GNU/Linux), Kopete (GNU/Linux), qutIM (Windows, GNU/Linux, Mac OS X), Adium (Mac OS X) и пр.
5 марта 2008 года AOL открыла спецификации протокола (как впоследствии оказалось — не полностью: с помощью изменения закрытых деталей спецификации впоследствии 3 раза блокировались все неофициальные клиенты) и разрешила создание альтернативных клиентов, но с некоторыми ограничениями, установленными лицензией — например, клиент, используемый более чем 100 000 пользователями, должен показывать рекламу.

</doc>
<doc id="939" url="https://ru.wikipedia.org/wiki?curid=939" title="IMAP">
IMAP

IMAP () — протокол прикладного уровня для доступа к электронной почте.
Базируется на транспортном протоколе TCP и использует порт 143, а IMAPS (IMAP поверх SSL) — порт 993. IMAP работает только с сообщениями и не требует каких-либо пакетов со специальными заголовками.
IMAP предоставляет пользователю широкие возможности для работы с почтовыми ящиками, находящимися на почтовом сервере. Почтовая программа, использующая этот протокол, получает доступ к хранилищу корреспонденции на сервере так, как будто эта корреспонденция расположена на компьютере получателя. Электронными письмами можно манипулировать с компьютера пользователя (клиента) без постоянной пересылки с сервера и обратно полного содержания писем.
Для отправки писем используется обычно протокол SMTP, так как собственная команда отправки протокола IMAP, называемая APPEND, не содержит в себе механизма передачи служебной информации.
Для имён почтовых ящиков (папок) с символами вне диапазона ASCII используется модифицированная версия кодировки UTF-7.
Цель разработки протокола IMAP.
Протокол IMAP представляет собой альтернативу POP с зачаточными способностями по отправке.
Первая версия протокола POP имела ряд недостатков, и наиболее серьёзный из них — отсутствие возможностей по управлению перемещением и хранением сообщений на сервере. В POP сообщения загружаются с почтового сервера все сразу, после чего они с сервера удаляются, то есть отсутствует возможность выбирать сообщения для получения.
Для решения проблем, связанных с этой особенностью POP, в 1986 году , работавший тогда в Стэнфордском университете, создал новый протокол получения почты с сервера.
Новый протокол предоставил пользователям возможность получения электронной почты в различных местах из одного почтового ящика. Пользователю предоставляется возможность управлять сообщениями в своём почтовом ящике и дополнительные функции по обслуживанию почтовых ящиков на сервере.
В дальнейшем протокол POP был доработан, в POP3 (POP версии 3) есть возможность получать с сервера избранные сообщения и оставлять избранные сообщения на сервере. В последних версиях между IMAP и POP основное различие для пользователя — IMAP4 может обращаться к письмам в разных почтовых папках на сервере и перемещать письма между ними, а POP3 обращается к письмам на сервере по номерам в линейном списке (то есть работает только с одной почтовой папкой).
Преимущества по сравнению с POP3.
При использовании POP3 клиент подключается к серверу только на промежуток времени, необходимый для загрузки новых сообщений. При использовании IMAP соединение не разрывается, пока пользовательский интерфейс активен, а сообщения загружаются только по требованию клиента. Это позволяет уменьшить время отклика для пользователей, в чьих ящиках имеется много сообщений большого объёма.
Протокол POP требует, чтобы текущий клиент был единственным подключённым к ящику. IMAP допускает одновременный доступ нескольких клиентов к ящику и предоставляет клиенту возможность отслеживать изменения, вносимые другими клиентами, подключёнными одновременно с ним.
Благодаря системе флагов, определённой в IMAP4, клиент может отслеживать состояние сообщения (прочитано, отправлен ответ, удалено и т. д.); данные о флагах хранятся на сервере.
Клиенты IMAP4 могут создавать, переименовывать и удалять ящики и перемещать сообщения между ящиками. Кроме того, можно использовать расширение «IMAP4 Access Control List (ACL) Extension» (RFC 4314) для управления правами доступа к ящикам.
Поиск сообщений происходит на стороне сервера.
IMAP4 имеет явный механизм расширения.
Сообщения и их атрибуты.
IMAP работает только с сообщениями и не требует каких-либо пакетов со специальными заголовками.
Каждое сообщение имеет несколько связанных с ним атрибутов. Эти атрибуты могут быть определены индивидуально или совместно с другими атрибутами.
UID.
Каждому сообщению ставится в соответствие 32-битный код, который при использовании совместно с уникальным идентификатором образует 64-битовую последовательность, гарантирующую однозначную идентификацию сообщения в почтовом ящике. Чем позже сообщение пришло, тем больше его UID.
UID ассоциируется с почтовым ящиком и посылается в виде кода uidvalidity отклика (ok) на фазе выбора почтового ящика. Если UID из предыдущей сессии по какой-то причине не может быть использован, UID должен быть инкрементирован.
UID сообщения не должно изменяться в пределах сессии, его не следует изменять и от сессии к сессии. Однако если невозможно сохранить UID сообщения в последующей сессии, каждая следующая сессия должна иметь новый уникальный код идентификатора, который должен быть больше, чем любой UID, использованный ранее.
Порядковый номер сообщения.
Порядковый номер сообщения в почтовом ящике начинается с 1. Каждое сообщение, начиная со второго, имеет порядковый номер ровно на 1 больше, чем предшествующее ему.
В течение сессии допустимо изменение порядкового номера сообщения. Например, когда сообщение удаляется из почтового ящика, номера всех последующих сообщений изменяются.
Флаги сообщения.
Этот атрибут представляет собой список из нуля или более именованных лексем, соотнесённых с данным сообщением. Флаг устанавливается путём его добавления к этому списку и обнуляется путём его удаления. В IMAP 4.1 существует два типа флагов. Флаг может быть постоянным или действующим только на время данной сессии.
Системным флагом является флаг, имя которого определено в спецификации протокола. Все системные флаги начинаются с символа codice_1.
В настоящее время определены следующие системные флаги:
Внутренние дата и время сообщения на сервере.
Время и дата получения сообщения. В случае доставки сообщения посредством протокола SMTP — дата и время доставки конечному адресату. Для сообщений, доставленных командой копирования — внутренняя дата и время отправителя сообщения. При использовании команды codice_8 — дата и время, заданные параметрами команды.
Взаимодействие клиента и сервера.
Соединение IMAP 4.1 подразумевает установление связи между клиентом и сервером. Клиент посылает серверу команды, сервер клиенту — данные и уведомления о статусе выполнения запроса. Все сообщения, как клиента, так и сервера, имеют форму строк, завершающихся специальной последовательностью.
Любая процедура начинается с команды клиента. Любая команда клиента начинается с префикса-идентификатора (обычно короткая буквенно-цифровая строка, например, codice_9, codice_10 и т. д.), называемого меткой (tag). Для каждой команды клиент генерирует свою метку.
Возможны два случая, когда строка, отправленная клиентом, не представляет собой законченную команду. В первом — аргумент команды снабжается кодом, определяющим число октетов в строке. Во втором — аргументы команды требуют отклика со стороны сервера. В обоих случаях сервер посылает запрос продолжения команды, начинающийся с символа codice_11.
Клиент должен завершить отправку одной команды, прежде чем отправить другую.
Протокольный приемник сервера читает строку команды, пришедшей от клиента, осуществляет её разбор, выделяет параметры и передаёт серверу данные. По завершении команды сервер посылает отклик.
Данные, передаваемые сервером клиенту, а также статусные отклики, которые не указывают на завершение выполнения команды, имеют префикс codice_12 и называются непомеченными откликами.
Данные могут быть отправлены сервером в ответ на команду клиента или по собственной инициативе. Формат данных не зависит от причины отправки.
Отклик указывает на удачное/неудачное выполнение операции. Он использует ту же метку, что и команда клиента, запустившая процедуру. Таким образом, если осуществляется более, чем одна команда, метка сервера указывает на команду, вызвавшую данный отклик. Имеется три вида отклика завершения сервера: codice_13 (успешное выполнение), codice_14 (неудача), codice_15 (протокольная ошибка, например, не узнана команда или зафиксирована синтаксическая ошибка).
Протокольный приемник клиента IMAP 4.1 читает строку отклика от сервера и предпринимает действия в соответствии с первым символом codice_12 или codice_11.
Клиент должен быть готов принять любой отклик сервера в любое время. Данные сервера должны быть записаны так, чтобы клиент мог их непосредственно использовать, не посылая серверу уточняющих запросов.
Состояния сервера IMAP.
Сервер IMAP 4.1 находится в одном из четырёх состояний.
Большинство команд можно использовать только в определённых состояниях.
В состоянии "без аутентификации" клиент должен предоставить имя и пароль, прежде чем ему станет доступно большинство команд. Переход в это состояние производится при установлении соединения без предварительной аутентификации.
В состоянии "аутентификации" клиент идентифицирован и должен выбрать почтовый ящик, после чего ему станут доступны команды для работы с сообщениями. Переход в это состояние происходит при установлении соединения с предварительной аутентификацией, когда выданы все необходимые идентификационные данные или при ошибочном выборе почтового ящика.
В состояние "выбора" система попадает, когда успешно осуществлен выбор почтового ящика.
В состояние "выхода" система попадает при прерывании соединения в результате запроса клиента или вследствие независимого решения сервера.

</doc>
<doc id="941" url="https://ru.wikipedia.org/wiki?curid=941" title="IRC">
IRC

IRC () — протокол прикладного уровня для обмена сообщениями в режиме реального времени.
Разработан в основном для группового общения, также позволяет общаться через личные сообщения и обмениваться данными, в том числе файлами.
IRC использует транспортный протокол TCP и криптографический TLS (опционально).
IRC начал завоёвывать особенную популярность после операции «Буря в пустыне» (1991), когда сообщения со всего мира собирались в одном месте и в режиме «on-line» транслировались в IRC.
Ввиду технической простоты реализации протокол IRC в свое время стал использоваться при организации ботнетов в качестве средства передачи управляющих команд компьютерам — участникам ботнета, — от владельца.
История и спецификации.
IRC был разработан в 1988 в качестве замены программы MultiUser Talk.
Основная спецификация — RFC 1459 (1993).
Её дополняют несколько спецификаций 2000 года:
IRC-сеть.
Согласно спецификациям протокола, IRC-сеть — это группа серверов, соединённых между собой. Простейшей сетью является одиночный сервер.
Сеть должна иметь вид связного дерева, в котором каждый сервер является центральным узлом для остальной части сети.
Клиентом называется всё, что подключено к серверу, кроме других серверов. Различают два типа клиентов:
Пересылка сообщений в IRC-сети.
Протокол IRC позволяет общаться один на один и в группе. Для группового общения существует несколько возможностей. Пользователь может отправить сообщение списку пользователей, при этом серверу отправляется список, сервер выделяет из него отдельных пользователей и отправляет копию сообщения каждому из них. Иной способ - каналы, когда сообщение отправляется серверу, а сервер отправляет его всем пользователям в канале.
В обоих случаях сообщения отправляются по кратчайшему пути и видимы отправителю, получателю и входящим в кратчайший путь серверам.
Кроме того, возможна отправка широковещательного сообщения. Сообщения клиентов, касающиеся изменения состояния сети (например, режима канала или статуса пользователя), должны отправляться всем серверам, входящим в сеть. Все сообщения, исходящие от сервера, также должны быть отправлены всем остальным серверам.
Роли пользователей.
По отношению к серверу IRC-пользователи могут быть операторами сервера (), канала () и обычными пользователями.
Клиентские приложения для IRC-сетей.
Программы, позволяющие подключаться к сетям, работающим по протоколу IRC.
Настольные.
Windows: mIRC, Miranda IM, Trillian, Pidgin (2022), KVIrc (2019), XChat (2010).
Unix и Linux
Quassel, Kopete, Irssi, BitchX, XChat, Konversation, KVIrc, Pidgin, ircII, WeeChat, Polaris, macOS:
Textual, Snak, Ircle, Adium, Colloquy, KVIrc, LimeChat, IRCCloud
AmigaOS:
AmIRC, AIRcOS, WookieChat, BenderIRC, BitchX, BlackIRC
Мобильные.
Android:
Web: IRCCloud, Mibbit
MIDP:
Специфика русскоязычного IRC.
Использование русского языка в IRC не опирается ни на какой стандарт.
Однако имеется ряд обычаев и соглашений, возникших в процессе эволюции различных русскоязычных IRC-сообществ.
История вопроса.
Общение на русском языке начало вестись ещё в 1990-х годах в международных сетях, таких как и . Первоначально, под влиянием UNIX-культуры, было принято кодировать буквы русского алфавита в KOI-8. Примерно с 1995 года начался приток пользователей Windows, которые зачастую вообще не имели понятия, что такое кодовая страница и не знали различия между кириллицей и Windows-1251. Разница в кодировании текста вызвало много конфликтов (конфликтов программных?).
Стихийно возникшее в те времена соглашение помещало вопрос о кодировках в ве́дение конкретных каналов. Это было очень неудобно для пользователей, однако на тот момент иного выхода не было. Отчасти именно эта проблема стимулировала примерно с 2000 года усиленное формирование отдельных русскоязычных сетей, где вопросы кодировки могли бы решаться централизованно.
Обычаи современных русскоязычных сетей.
Традиционно, в международных IRC-сетях клиенты посылают и принимают сообщения, состоящие из байтов; при этом вопрос об интерпретации не ASCII-байтов оставляется на усмотрение клиентов.
Все сколь-нибудь развитые русскоязычные сети, при всех их различиях, придерживаются иного принципа: клиенты посылают и принимают сообщения, состоящие из "символов".
То есть, если "правильно настроенный" клиент отправляет на канал букву «Ы», то все подключённые к каналу правильно настроенные клиенты будут принимать тоже букву «Ы», независимо от того, как каждый из них предпочитает её кодировать.
На практике это обычно реализуется наличием на сервере нескольких TCP-портов, на каждом из которых используется определённая кодировка. Список этих портов принято помещать в MOTD (приветствие сервера).
Таким образом, вопрос о «правильной настройке» клиента сохраняется, однако для пользователя выбрать порт подключения несравненно проще, нежели заниматься установкой таблиц перекодировок символов, возможность которой поддерживается не во всяком клиенте.
В некоторых случаях серверное ПО позволяет переключить кодировку без отсоединения от сервера, хотя по ряду причин такое изменение кодировки работает некорректно.
Как правило, каждая сеть использует свою внутреннюю кодировку (чаще всего это Windows-1251 и почти никогда UTF-8; почему — см. ниже), при этом данные, передаваемые или принимаемые клиентами, с кодировками, отличными от внутренней, подвергаются перекодировке (немедленной при приёме, проводимой в момент формирования входящего сообщения — при передаче).
Ники.
Исторически использование букв кириллицы в никах было невозможно.
Однако самая большая русскоязычная IRC-сеть RusNet позволяет пользоваться кириллическими никами и регистрировать их.
UTF-8 — за и против.
Сторонники интернационализации обычно считают UTF-8 перспективной кодировкой для всех языков, включая русский. Следует, однако, отметить, что одна буква кириллицы в UTF-8 занимает два байта, что создаёт некоторую дополнительную нагрузку на сети и ограничивает максимальную длину одного сообщения.
По стандарту, сообщение IRC не может иметь длину больше 510 байтов, из которых, собственно, на текст приходится никак не больше 499 (по нереалистично завышенной оценке).
Следовательно, отправить в одном сообщении больше 249 русских букв оказывается невозможно.
Ограничение размера сообщений вызывает ещё одну неприятность: при попытке превысить установленный предел сервер обрезает сообщения.
Если срез пройдёт посередине русской буквы (то есть будет передан первый её байт, но отброшен второй), то получившаяся последовательность байтов перестанет, с точки зрения UTF-8, быть правильной строкой.
Ряд клиентов (например, Xchat или mIRC) отобразит такое сообщение как 8-битное (например, в Latin-1 или Windows-1251), что сделает его полностью нечитаемым и занимающим к тому же много места на экране.
Несомненным преимуществом использования UTF-8 для кодировки русского языка является возможность свободно цитировать тексты на других языках, а также использовать экзотические символы наподобие «→» и «☺». К тому же, являясь клиентом IRC-сети, в которой UTF-8 принят повсеместно, можно общаться сразу на многих языках, не заботясь о техническом представлении букв.
Пока, однако, не известны многоязычные сети, явно оговаривающие необходимость использования только UTF-8, использующие UTF-8 в качестве внутренней кодировки или каким-либо иным образом упорядочивающие кодировку символов клиентами (за исключением IRC-сервера внутри сети I2P).

</doc>
<doc id="943" url="https://ru.wikipedia.org/wiki?curid=943" title="Intel 8086">
Intel 8086

Intel 8086 (в 1980-85 годах известный как iAPX 86/10) — первый 16-битный микропроцессор компании Intel. Разрабатывался с весны 1976 года и выпущен 8 июня 1978 года. Реализованная в процессоре архитектура набора команд стала основой широко известной архитектуры x86. Процессоры этой архитектуры стали наиболее успешной линией процессоров Intel. Современные процессоры этой архитектуры сохраняют возможность выполнять все команды этого набора.
Незначительно изменённая версия процессора с 8-битной шиной данных, выпущенная в 1979 году под названием Intel 8088, применялась в персональных компьютерах IBM PC и IBM PC/XT.
История.
Предшественники.
В 1972 году Intel выпустила 8008, первый 8-битный микропроцессор. Он использовал набор инструкций, разработанный корпорацией Datapoint для программируемых компьютерных терминалов, пригодный и для универсальных процессоров. Этот процессор требовал нескольких дополнительных микросхем для использования в полноценном компьютере, отчасти потому, что использовал маленький корпус всего лишь с 18 выводами, который использовался для микросхем DRAM, производимых Intel, и соответственно не мог иметь отдельную шину адресов.
Двумя годами позже, в 1974 году, был запущен 8080, в новом, 40-выводном DIP-корпусе, первоначально разработанном для микросхем калькуляторов. Он имел отдельную шину адресов и расширенный набор инструкций, кодово- (не бинарно-) совместимый с 8008, дополненный для удобства программирования несколькими 16-битными инструкциями. Процессор Intel 8080 часто называют первым по-настоящему удобным и полезным микропроцессором. В 1977 году он был заменён на Intel 8085, с одним питающим напряжением (+5 В) вместо трёх различных на предшественнике и несколькими другими усовершенствованиями. Наиболее известными соперниками были 8-битные Motorola 6800 (1974), Microchip PIC16X (1975) (здесь наверное имеется в виду процессор General Instrument CP1600), MOS Technology 6502 (1975), Zilog Z80 (1976) и Motorola 6809 (1978).
Разработка.
Рынок 8-разрядных микропроцессоров в конце 1970-х годов был переполнен, и Intel, оставляя попытки закрепиться на нём, выпускает свой первый 16-битный процессор. Проект 8086 был начат в мае 1976 года и первоначально задумывался как временная замена для амбициозного и задерживающегося проекта iAPX 432 (также известного как 8800). Это была попытка, с одной стороны, противостоять менее запаздывавшим 16- и 32-битным процессорам других производителей (таких как Motorola, Zilog и National Semiconductor), а с другой — борьбы с угрозой от Zilog Z80 (разработанного командой под руководством ушедшего из Интел Федерико Фаджина), который стал очень успешным. Первая версия архитектуры 8086 (система команд, прерывания, работа с памятью и вводом-выводом) была разработана с середины мая до середины августа Стивеном Морзе. Потом команда разработчиков была увеличена до четырёх человек, которые представили два основных проектных документа — «8086 Architectural Specifications» и «8086 Device Specifications». При разработке не использовалось специализированных CAD-программ, а диаграммы были исполнены из текстовых символов. Использовались уже опробованные элементы микроархитектуры и физической реализации, в основном от Intel 8085.
Описание.
Процессор Intel 8086 представляет собой модернизированный процессор Intel 8080, и хотя разработчики не ставили перед собой цели достичь полной совместимости на программном уровне, большинство программ, написанных для Intel 8080, способно выполняться и на Intel 8086 после перекомпиляции. Новый процессор несёт в себе множество изменений, которые позволили значительно (в 10 раз) увеличить производительность по сравнению с предыдущим поколением процессоров компании.
Регистры.
Всего в процессоре Intel 8086 имеется 14 16-разрядных регистров: 8 регистров общего назначения (AX, BX, CX, DX), 2 индексных регистра (SI, DI), 2 указательных (BP, SP), 4 сегментных регистра (CS, SS, DS, ES), программный счётчик или указатель команды (IP) и регистр флагов (FLAGS, включает в себя 9 флагов). При этом регистры данных (AX, BX, CX, DX) допускают адресацию не только целых регистров, но и их младшей половины (регистры AL, BL, CL, DL) и старшей половины (регистры AH, BH, CH, DH), что не только позволило использовать новое на тот момент 16-разрядное ПО, но и сохранило обратную совместимость с 8-битными программами (правда, их необходимо было, по крайней мере, перекомпилировать).
Шины.
Размер шины адреса был увеличен с 16 бит до 20 бит, что позволило адресовать 1 Мбайт (220 байт) памяти. Шина данных была 16-разрядной. Однако в микропроцессоре шина данных и шина адреса использовали одни и те же контакты на корпусе. Это привело к тому, что нельзя одновременно подавать на системную шину адреса и данные. Мультиплексирование адресов и данных во времени позволяет использовать всего 20 контактов корпуса, но уменьшает скорость передачи данных.
Из-за того, что выполнение отдельных команд меньше цикла ввода-вывода, в процессор был введён (впервые) буфер команд на 6 байт, это позволяло выполнять, например, команды сложения параллельно командам ввода-вывода.
Работа с памятью.
Поскольку регистры и АЛУ процессора 8086 — 16-битные, это накладывает ограничение на операции вычисления адреса и его максимальный размер. Для вычисления адресов, превышающих 16 бит, понадобились бы расширение регистров и АЛУ и переработка системы команд, что, в свою очередь, привело бы к увеличению числа транзисторов, усложнению и удорожанию процессора.
Тем не менее, снижающиеся цены на память делали процессор выгодным для тех применений, где требовалась обработка больших объёмов данных. Расширение адресного пространства было одним из требований к новому процессору. В результате была выбрана компромиссная схема: исполнительный блок (EU) процессора оставлен 16-разрядным, а расширение адресного пространства сделано в блоке интерфейса шины (BIU) процессора путём реализации сегментной адресации памяти, увеличивающей разрядность шины адреса до 20 бит.
Сегментная адресация памяти использует тот факт, что обращения к памяти со стороны процессора легко можно разделить на обращения к коду программы, обрабатываемым данным и стеку. Обращения к разным типам содержимого памяти отображаются на независимые области памяти в расширенном адресном пространстве — "сегменты". В процессоре 8086 для такого отображения адресов используются четыре 16-битных сегментных регистра:
Каждый сегментный регистр определяет адрес начала сегмента в памяти, при этом сегменты могут совпадать или пересекаться. По умолчанию регистр CS используется при выборке инструкций, регистр SS — при выполнении операций со стеком, регистры DS и ES — при обращении к данным. В случае обращения к данным сегментный регистр по умолчанию может быть изменён путём добавления перед кодом инструкции специального префикса замены сегмента.
При этом в пределах сегмента используются 16-битные исполнительные адреса, хранящиеся в счётчике команд, указателе стека либо вычисляемые в соответствии с видом адресации, заданном в коде инструкции. Фактически, процессору всегда доступны 4 области памяти размером 64 Кбайт каждая. Если такой объём оказывается недостаточен, в программу приходится включать логику управления сегментными регистрами. Эта логика может существенно замедлять обращение к памяти, поэтому компиляторы с языков высокого уровня для платформы x86 позволяют указывать модель памяти в соответствии с требуемыми объёмами кода и данных.
Физический 20-битный адрес, позволяющий адресовать до 1 Мбайт памяти, получается путём сложения исполнительного адреса и значения сегментного регистра, умноженного на 16. Из-за наличия умножения на 16 сегмент всегда начинается на границе блока в 16 байт, называемого параграфом. Это может приводить к потере некоторого количества памяти, если размер используемых данных сегмента не кратен параграфу. В частности, это стало одной из причин, по которой разработчики отказались от реализации 24-битного адреса в 8086, так как размер параграфа при этом возрастал до 256 байт.
Возможное переполнение при вычислении физического адреса в процессоре 8086 игнорируется. Например, инструкция безусловного перехода по адресу 001016 при значении сегмента кода FFFF16 выполнит переход по физическому адресу 0. Этого не происходит в старших моделях процессоров x86, например 80286, имевшем 24 адресных линии, поэтому в компьютерах IBM PC/AT для обеспечения совместимости был введён специальный вентиль Gate A20, принудительно обнуляющий бит А20 системной шины адреса.
Поскольку в старших моделях процессоров x86 были введены новые способы расширения адресного пространства, способ, используемый процессором 8086, был назван «режимом реальной адресации».
Система команд.
Система команд процессора Intel 8086 состоит из 98 команд (и более 3800 их вариаций): 19 команд передачи данных, 38 команд их обработки, 24 команд перехода и 17 команд управления процессором. Возможны 7 режимов адресации. Микропроцессор не содержит команд для работы с числами с плавающей запятой. Данная возможность реализована отдельной микросхемой, называемой математический сопроцессор, который устанавливается на материнской плате. Сопроцессор вовсе не обязательно должен был быть произведён Intel (модель Intel 8087), к примеру, некоторые производители микросхем, такие как , выпускали более производительные сопроцессоры, чем Intel.
Система команд процессора Intel 8086 включает в себя несколько очень мощных строковых инструкций. Если инструкция имеет префикс REP (от англ. repeat, повтор), то процессор будет выполнять операции с блоками — перемещение блока данных, сравнение блоков данных, присвоение определённого значения блоку данных определённой величины, и т. д., то есть, одна инструкция 8086 с префиксом REP может выполнять 4—5 инструкций, выполняемых на некоторых других процессорах. Подобные приёмы были реализованы и в других процессорах — Zilog Z80 имел инструкции перемещения и поиска блоков, а Motorola 68000 может выполнять операции с блоками, используя всего две команды.
В микропроцессоре Intel 8086 используется примитивная форма конвейерной обработки. Блок интерфейса с шиной подаёт поток команд к исполнительному устройству через 6-байтовую очередь команд. Таким образом, выборка и выполнение новых команд может происходить одновременно. Это значительно увеличивает пропускную способность процессора и лишает необходимости ожидать считывания команды из памяти при занятом другими операциями интерфейсе микросхемы.
Варианты микропроцессора, аналоги и конкуренты.
Процессор выпускался в керамических и пластмассовых корпусах с 40 выводами. Были доступны версии с частотами 5, 8 и 10 МГц, обозначавшиеся как 8086, 8086-2 и 8086-1.
Основными конкурентами микропроцессора Intel 8086 были Motorola 68000, Zilog Z8000, чипсеты F-11 и J-11 семейства PDP-11, MOS Technology 65C816. В некоторой степени, в области военных разработок, конкурентами являлись процессоры-реализации MIL-STD-1750A.
Аналогами микропроцессора Intel 8086 являлись такие разработки, как NEC V30, который был на 5 % производительнее Intel 8086, но при этом был полностью с ним совместим. Советским аналогом являлся микропроцессор К1810ВМ86, входивший в серию микросхем К1810.
Аппаратные режимы.
Процессоры 8086 и 8088 могут работать в двух режимах: максимальном и минимальном.
"Максимальный режим" используется в сложных многопроцессорных системах, он также необходим для работы с математическим сопроцессором 8087. В максимальном режиме для выработки сигналов управления системной шиной необходим системный контроллер 8288. В компьютерах IBM PC и PC/XT процессор Intel 8088 используется в максимальном режиме, что позволяет ему работать с математическим сопроцессором 8087, который может быть установлен в сокет на материнской плате компьютера.
"Минимальный режим" используется в однопроцессорных системах. В этом режиме сигналы управления системной шиной процессор формирует сам.
Аппаратный режим определяется схемой включения процессора и не может быть изменён программно. Для задания режима используется вывод 33 (MN/), который соединяется либо с источником питания, либо с общим проводом. Изменение состояния вывода 33 меняет функции восьми других выводов процессора, отвечающих за управление системной шиной и связь с другими процессорами.
Микросхемы поддержки.
Для создания микропроцессорной системы на основе процессоров 8086 и 8088 компанией Intel выпускались следующие микросхемы поддержки:
Также с процессорами могли использоваться микросхемы, ранее разработанные для процессоров 8080 и 8085:
Микрокомпьютеры на основе Intel 8086.
Первоначально процессор Intel 8086 использовался в промышленных системах. Его массовому применению препятствовала довольно высокая цена — 360 долларов на момент анонса. Кроме того, для 16-разрядной подсистемы памяти, используемой процессором, обычно требовалось вдвое больше микросхем по сравнению с 8-разрядной, что увеличивало размеры, сложность и стоимость печатных плат. В связи с этим руководством Intel ещё в конце разработки Intel 8086 было принято решение о выпуске бюджетной версии. Процессор Intel 8088 на момент анонса стоил 124,8 доллара и использовал 8-разрядную подсистему памяти, что делало его экономически более привлекательным. Он стал основой одного из самых известных персональных компьютеров — IBM PC.
Процессор Intel 8086 применялся:
Эмулятор.
Проект эмулятора процессора Intel 8086 на МК STM32:

</doc>
<doc id="947" url="https://ru.wikipedia.org/wiki?curid=947" title="Международная организация по стандартизации">
Международная организация по стандартизации

Международная организация по стандартизации, ИСО (; ) — международная организация, занимающаяся выпуском стандартов.
Международная организация по стандартизации создана в 1946 году двадцатью пятью национальными организациями по стандартизации, на основе двух организаций: ISA (International Federation of National Standardizing Associations), учреждённой в Нью-Йорке в 1926 году (расформирована в 1942) и UNSCC (United Nations Standards Coordinating Committee), учреждённой в 1944 году. Фактически её работа началась с 1947 года. СССР был одним из основателей организации, постоянным членом руководящих органов, дважды представитель Госстандарта избирался председателем организации. Россия стала членом ИСО как правопреемник СССР. 23 сентября 2005 года Россия вошла в Совет ИСО.
При создании организации и выборе её названия учитывалась необходимость того, чтобы аббревиатура наименования звучала одинаково на всех языках. Для этого было решено использовать греческое слово (исос) — равный, вот почему на всех языках мира Международная организация по стандартизации имеет краткое название «ИСО».
Сфера деятельности ИСО касается стандартизации во всех областях, кроме электротехники и электроники, относящихся к компетенции Международной электротехнической комиссии (МЭК, IEC). Некоторые виды работ выполняются совместными усилиями этих организаций. Кроме стандартизации, ИСО занимается проблемами сертификации.
ИСО определяет свои задачи следующим образом: содействие развитию стандартизации и смежных видов деятельности в мире с целью обеспечения международного обмена товарами и услугами, а также развития сотрудничества в интеллектуальной, научно-технической и экономической областях.
Официальными языками являются: английский, французский и русский.
Члены ИСО.
Членами организации являются национальные органы по стандартизации, которые представляют интересы своей страны в ИСО, а также представляют ИСО в своей стране. В настоящее время в ИСО входят представители 167 стран
Существует три категории членства. Они различаются уровнем доступа к электронным ресурсам ИСО и степенью влияния на содержание разрабатываемых документов. Это помогает учитывать различные потребности и возможности каждого национального органа по стандартизации. Таким образом, страны с ограниченными ресурсами или без достаточно развитой национальной системы стандартизации имеют возможность получать актуальную информацию в области международной стандартизации.
Россию в ИСО представляет Федеральное агентство по техническому регулированию и метрологии в качестве полноправного члена ИСО.
Организационная структура.
Организационно в ИСО входят руководящие и рабочие органы. Руководящие органы: Генеральная ассамблея (высший орган), Совет ИСО, Техническое руководящее бюро. Рабочие органы — технические Комитеты (ТК), подкомитеты (ПК), технические консультативные группы (ТКГ).
Генеральная ассамблея.
Генеральная ассамблея — это собрание должностных лиц и делегатов, назначенных комитетами-членами. Каждый комитет-член имеет право представить не более трёх делегатов, но их могут сопровождать наблюдатели. Члены-корреспонденты и члены-подписчики участвуют как наблюдатели. Генеральная ассамблея 2013 года прошла в Санкт-Петербурге.
Совет ИСО.
Совет руководит работой ИСО в перерывах между сессиями Генеральной ассамблеи. Совет имеет право не созывая Генеральной ассамблеи направить в комитеты-члены вопросы для консультации или поручить комитетам-членам их решение. На заседаниях Совета решения принимаются большинством голосов присутствующих на заседании комитетов-членов Совета. В период между заседаниями и при необходимости Совет может принимать решения путём переписки.
Совет ИСО берёт на себя решение большинства вопросов, связанных с управлением. Заседания Совета проводятся дважды в год. В состав Совета входят 20 представителей из стран комитетов — членов ИСО председателей таких комитетов как CASCO, COPOLCO и DEVCO. При Совете существует ряд органов, обеспечивающих руководство и управление по конкретным вопросам.
Членство в Совете открыто для всех комитетов-членов ИСО и в нём происходит ротация для того, чтобы представительство стран — членов сообщества было полным.
Совету ИСО подчиняется семь комитетов: ПЛАКО (техническое бюро), ПРОФКО (методическая и информационная помощь); КАСКО (комитет по оценке соответствия); ИНФКО (комитет по научно-технической информации); ДЕВКО (комитет по оказанию помощи развивающимся странам); КОПОЛКО (комитет по защите интересов потребителей); РЕМКО (комитет по стандартным образцам).
Техническое руководящее бюро (ТРБ).
Техническое руководящее бюро (ТРБ) отвечает за общее руководство структурой технических комитетов, которые занимаются разработкой стандартов, и любые стратегические консультативные органы, созданные по техническим вопросам.
Одним из технических комитетов под руководством ТРБ является РЕМКО (REMCO — Committee on reference materials), который оказывает методическую помощь ИСО путём разработки соответствующих руководств по вопросам, касающимся стандартных образцов (эталонов). Так, подготовлен справочник по стандартным образцам и несколько руководств: «Ссылка на стандартные образцы в международных стандартах», «Аттестация стандартных образцов. Общие и статистическое принципы» и др. Кроме того, РЕМКО — координатор деятельности ИСО по стандартным образцам с международными метрологическими организациями, в частности, с МОЗМ — Международной организацией законодательной метрологии.
Порядок разработки стандартов.
Международный стандарт является результатом консенсуса между участниками организации ИСО. Он может использоваться непосредственно или путём внедрения в национальные стандарты разных стран.
Международные стандарты разрабатываются техническими комитетами ИСО (ТК) и подкомитетами (ПК) в ходе шести-стадийного процесса:
Все международные стандарты рецензируются всеми членами ИСО, по крайней мере, через три года после публикации и каждые пять лет после первого рецензирования. Решение о подтверждении, пересмотре или отзыве международного стандарта принимается большинством голосов У-членов ТК/ПК.
Таблица условных обозначений стадий даёт наглядное представление о стадиях разработки:
Если в начале работы над проектом стандарта уже имеется более или менее завершённый документ, например, стандарт, разработанный другой организацией, некоторые стадии можно опустить. При так называемой «ускоренной процедуре» документ направляется непосредственно на одобрение членам ИСО в качестве черновика международного стандарта (ЧМС) (стадия 4) или, если документ был разработан международным органом стандартизации, признанным Советом ИСО, в качестве окончательной редакции черновика Международного стандарта (ОЧМС, стадия 5), без прохождения предыдущих стадий.
Ниже приводится обзор всех шести стадий.
Более подробное описание процесса разработки международных стандартов см. в публикации «Директивы ИСО/МЭК, Часть 1, Процедурные правила».
Сертификация на соответствие стандартам ИСО.
ИСО является организацией, которая разрабатывает международные стандарты, однако она не осуществляет оценку соответствия и/или сертификацию на соответствие стандартам. В связи с этим, ИСО никогда не выпускает сертификаты и никакая компания не может быть сертифицирована ИСО.
Также ИСО не предусматривает права использовать собственный логотип ISO для декларации соответствия либо подтверждения того, что компании и/или её продукты сертифицированы на соответствие стандартам ИСО. Нанесение логотипа ISO на продукцию, этикетки, упаковку и т. д. запрещено.
Сертификация осуществляется независимыми органами по сертификации, наиболее крупными и узнаваемыми (история каждого из них превышает 100 лет) являются органы т. н. большой семёрки, включая: TÜV (Австрия и Германия), BSI (Великобритания), BVC (Франция), DNVGL (Норвегия), SGS (Швейцария), ABS (США), LRQA (Великобритания).
Критика ИСО.
5 сентября 2007 года принятие варианта OOXML как стандарта ISO/IEC 29500 было временно отклонено по результатам голосования.
В марте 2008 года изменённая спецификация была принята как будущий стандарт ISO/IEC 29500. В частности, в Норвегии при этом были отмечены нарушения процесса стандартизации. Позже оказалось, что файлы, сохраняемые Microsoft Office 2007, не проходят тестов на соответствие стандарту, что нарушает правила принятия стандарта через процедуру , требующие, чтобы существовали реализации стандарта.
В мае 2008 были поданы апелляции от ЮАР, Бразилии и Индии, Венесуэлы. Также подана жалоба о нескольких нарушениях от Open Source Leverandørforeningen в Дании.
Публикация ISO/IEC DIS 29500 была отложена на период рассмотрения апелляций (30 дней).
В июле руководители ISO и IEC порекомендовали отклонить апелляции, указав в качестве причины то, что проект стандарта был принят голосованием в соответствии с директивами ISO/IEC JTC 1.
В августе ISO отклонила апелляции стран, выступающих против принятия OOXML как стандарта, так как они не смогли получить поддержку необходимого числа участников ISO для приостановления принятия стандарта.
В конце августа государственные IT‐организации Бразилии, ЮАР, Венесуэлы, Эквадора, Кубы и Парагвая опубликовали заявление о сомнениях в нейтральности ISO.
В Норвегии, где из 21 голоса «против» и двух голосов «за» получилось «за», 29 сентября 2008 года 13 членов технической комиссии в знак протеста вышли из состава .
По данным собрания ISO/IEC JTC1/SC34, подкомиссии ISO/IEC JTC1, в начале октября SC34 отправила OASIS неопубликованный запрос на передачу ей контроля над стандартом ISO/IEC 26300 (ODF), обосновывая это стремлением к лучшей совместимости между стандартами. В Groklaw также обратили внимание на то, что 9 из 20 присутствовавших на собрании в июле являлись сотрудниками или консультантами Microsoft, либо членами ECMA TC45. В результате появились подозрения в попытке захвата Microsoft контроля над ODF.

</doc>
<doc id="953" url="https://ru.wikipedia.org/wiki?curid=953" title="XMPP">
XMPP

XMPP ( «расширяемый протокол обмена сообщениями и информацией о присутствии»), ранее известный как джа́ббер (  «болтовня, трёп, тарабарщина») — открытый, основанный на XML, свободный для использования протокол для мгновенного обмена сообщениями и информацией о присутствии (см. список контактов) в режиме, близком к режиму реального времени. Изначально спроектированный легко расширяемым, протокол, помимо передачи текстовых сообщений, поддерживает передачу голоса, видео и файлов по сети.
Расширяемость протокола предназначена для добавления в единую коммуникационную сеть мессенджеров, социальных сетей, сайтов, использующих разные, несовместимые стандарты. Предполагалось, что крупные компании будут открывать межсерверное общение с другими IM и описывать свои методы шифрования, передачи мультимедиа и других данных через публикацию расширений XMPP. Расширения будут приниматься или отклоняться глобальным сообществом путём наибольшего распространения, но при этом всегда будет доступна базовая функциональность для передачи сообщений для пользователей разных мессенджеров.
В реальности данная идея не получила должного распространения, и большинство крупных компаний не стало открывать возможность коммуникации для своих пользователей с другими сервисами.
В отличие от коммерческих систем мгновенного обмена сообщениями, таких как AIM, ICQ, WLM и Yahoo, XMPP является федеративной, расширяемой и открытой системой. Любой желающий может запустить свой сервер мгновенного обмена сообщениями, регистрировать на нём пользователей и взаимодействовать с другими серверами XMPP. На основе протокола XMPP уже открыто множество частных и корпоративных серверов XMPP. Среди них есть или были крупные проекты, такие как Google Talk, Одноклассники.ru, LiveJournal, Juick, Facebook, ВКонтакте, Яндекс.
История.
Проект Jabber был основан Джереми Миллером в начале 1999 года с разработки сервера jabberd. Первое сообщение о проекте появилось 4 января 1999 года на сайте Slashdot. Эту дату принято считать днём рождения технологии. Вскоре после этого к проекту присоединилось несколько основных разработчиков, которые стали работать над сервером jabberd, клиентами для Windows и GNU/Linux, а также шлюзами в основные системы IM (AIM, ICQ, MSN и Yahoo). Позже, в 1999 году, "Webb Interactive Services" начало спонсировать основных разработчиков, что ускорило процесс создания проекта. В то время появилась основа протокола Jabber, а также сервер jabberd и ранние клиенты, такие, как WinJab (устарел и получил своё развитие в Exodus) и Gabber. Этот ранний период постоянных изменений закончился в мае 2000 года с выпуском jabberd 1.0.
Ранний протокол Jabber сформировал основы для стандарта XMPP, опубликованного как RFC 3920. Часто этот момент рассматривается как начало соперничества с SIMPLE, основанным на протоколе SIP, как стандартного протокола для мгновенного обмена сообщениями и информацией о присутствии.
С августа 2001 года протокол Jabber переходит под контроль "Jabber Software Foundation" (16 января 2007 года Jabber Software Foundation была переименована в XMPP Standards Foundation), для более точного описания своей работы развития расширений собственно протокола, в отличие от линии развития программы с одноимённым названием.
Jabber, Inc. занимается развитием двух проектов — Jabber Extensible Communications Platform (Jabber XCP) и JabberNow. Первый является фреймворком, а второй — программно-аппаратное решение (специально собранный и настроенный компьютер). Сайт jabber.org всё ещё функционирует. Инвесторами проекта Jabber являются Jona, Inc., France Telecom, Intel Capital, и Webb Interactive Services, Inc.
В августе 2005 года Google представил сервис Google Talk — комбинацию VoIP и клиента для обмена сообщениями, использующий XMPP для функций переписки, а также как основу для передачи голоса и файлов. Первоначальный запуск сервиса Google не поддерживал межсерверного общения, но к 17 января 2006 года такая возможность была добавлена. Однако, в мае 2013 Google объявил о сокращении поддержки межсерверных коммуникаций в связи с продвижением своего сервиса Google Hangouts. Тем не менее, несмотря на официальные заявления, Google Talk всё ещё поддерживает XMPP.
Протокол.
Семейство протоколов XMPP принято как стандарт RFC. Стандартный порт для XMPP — 5222. Также возможно использовать порт 80 и/или 443, если возникают проблемы с файрволом.
Протокол описывает клиент-серверные (c2s) и интерсерверные коммуникации (s2s). Мессенджер с поддержкой XMPP не обязательно должен соблюдать c2s-стандарт, чтобы поддерживать федеративную связь по s2s с другими XMPP-мессенджерами. Ряд XMPP-мессенджеров с регистрацией по номеру телефона не позволяет использовать другие XMPP-клиенты или подключаться к другим серверам, но их серверы поддерживают федеративное общение (взаимодействуют с другими серверами XMPP).
Расширения XMPP.
Протокол XMPP включает лишь базовую основу для передачи сообщений. Для реализации дополнительных возможностей используются расширения XEP (XMPP Extension Protocols). Модульная система позволяет собирать системы на основе XMPP, как для передачи сообщений, так и для передачи данных IoT-устройств и других задач. Для полноценной работы Jabber-клиентов требуется поддержка соответствующих расширений. Одними из наиболее важных для работы XMPP-клиентов являются расширения:
Боты.
Большой популярностью в Jabber’е пользуются боты для конференций. Они широко используются для защиты конференций от спама, в качестве цензора, ведения различной статистики, парсинга веб-сайтов (анекдоты, новости и т. п.), создания «мостов» между чатами, ведения логов, управления конференциями и так далее. Функциональность xmpp-ботов и область их применения ограничены только фантазией их разработчиков.
Адресация.
Каждый пользователь в сети Jabber имеет уникальный идентификатор — "Jabber ID" (сокращённо "JID"). Адрес JID, подобно адресу электронной почты, содержит имя пользователя и доменное имя сервера, на котором зарегистрирован пользователь, разделённые знаком @. Например, пользователь user, зарегистрированный на сервере example.com, будет иметь адрес: user@example.com.
Пользователь может иметь одновременно несколько подключений, для различения которых используется дополнительный атрибут JID, называемый "ресурсом" и добавляемый через слэш в конец адреса. К примеру, пусть полный адрес пользователя будет user@example.com/work, тогда сообщения, посланные на адрес user@example.com, дойдут на указанный адрес вне зависимости от имени ресурса, но сообщения для user@example.com/work дойдут на указанный адрес только при соответствующем подключённом ресурсе.
Адреса JID могут также использоваться без явного указания имени пользователя (с указанием имени ресурса или без такового) для системных сообщений и для управления специальными возможностями на сервере.
Соединение с другими протоколами.
Полезной особенностью XMPP систем являются "транспорты", или "шлюзы", позволяющие пользователям получать доступ к сетям, использующим другие протоколы. Это могут быть другие протоколы мгновенного обмена сообщениями, IRC или такие протоколы, как SMS и электронная почта.
В отличие от мультипротокольных клиентов, XMPP предоставляет доступ на уровне сервера, посредством коммуникации через специальные сервисы-шлюзы, выполняющиеся на удалённом компьютере.
Любой пользователь может «зарегистрироваться» на одном из этих шлюзов, предоставив информацию, необходимую для входа в сеть, и может общаться с пользователями сети так, как если бы они были пользователями сети джаббер. Это значит, что любой клиент, полностью поддерживающий XMPP, может быть использован для доступа к любой сети, для которой существуют шлюзы, без какого-либо дополнительного кода в клиенте и без необходимости клиенту иметь прямой доступ в Интернет.
Реализация шлюзов зависит от конкретного XMPP-сервера и подвержена нестабильности из-за закрытости коммерческих IM-сервисов.
Примеры глобальных интеграций XMPP.
Высокая отказоустойчивость и низкие издержки XMPP-серверов способствуют тому, что ряд крупных компаний использует XMPP как базовую платформу для создания закрытых мессенджеров и чатов, а также для доставки push-уведомлений
Примеры программного обеспечения.
https://xmpp.org/software/?platform=linux
XMPP-клиенты.
По статистике публичного XMPP-сервера 404.city(на лето 2017 года), самые популярные клиенты для десктопов и ноутбуков — Pidgin и Psi+ . На Android лидируют Xabber и Conversations

</doc>
<doc id="955" url="https://ru.wikipedia.org/wiki?curid=955" title="Ядро Linux">
Ядро Linux

Ядро Linux () — ядро операционной системы, соответствующее стандартам POSIX, составляющее основу операционных систем семейства Linux, а также ряда операционных систем для мобильных устройств, в том числе Android, Tizen, KaiOS. Разработка кода ядра была начата финским студентом Линусом Торвальдсом в 1991 году, на его имя зарегистрирована торговая марка «Linux».
Код написан в основном на Си с некоторыми расширениями gcc и на ассемблере (с использованием AT&amp;T-синтаксиса GNU Assembler).
Распространяется как свободное программное обеспечение на условиях GNU General Public License, кроме несвободных элементов, особенно драйверов, которые используют прошивки, распространяемые под различными лицензиями.
Операционные системы на базе ядра Linux являются лидерами на рынках суперкомпьютеров, микрокомпьютеров, серверов и смартфонов.
История.
Начало проекту было положено в 1991 году с публикации сообщения в новостной группе Usenet.
К тому времени GNU уже создал множество составляющих для свободной операционной системы, но её ядро GNU Hurd ещё не было готово. Поэтому пустующее место ядра для свободной операционной системы занял Linux и, несмотря на ограниченную функциональность ранних версий, привлёк к себе множество разработчиков и пользователей.
«Linux» как ядро операционной системы, разработка которого была начата Торвальдсом — лишь небольшая часть многих из использующих его систем, которые обычно тоже называют «Linux». Это иногда приводит к путанице, в связи с чем существует спор об именовании GNU/Linux — некоторые сторонники движения GNU считают, что именно такое наименование является корректным для операционной системы на базе ядра Linux и использующей наработки проекта GNU (такие, как glibc, gcc, bash, coreutils и другие).
По состоянию на май 2020 года семейство операционных систем на базе ядра Linux — третье по популярности в мире на рынке настольных компьютеров — 4,9 %.
На рынке веб-серверов доля Linux порядка 31 %, остальное — Unix-системы (FreeBSD и другие).
По данным Top500 (май 2020 года), Linux используется в качестве операционной системы на 100 % самых мощных суперкомпьютеров планеты.
Большинство мобильных устройств, таких, как смартфоны и планшетные компьютеры на базе операционных систем Android, MeeGo, Tizen, а также телевизоры и многие служебные устройства, такие, как внешние сетевые жёсткие диски, маршрутизаторы и модемы, также использует операционные системы на базе ядра Linux.
Хронология.
От: torvalds@klaava.Helsinki.Fi (Линус Бенедикт Торвальдс)&lt;br&gt;
Новостная группа: comp.os.minix&lt;br&gt;
Тема: Небольшой опрос о моей новой операционной системе&lt;br&gt;
Message-ID:&lt;1991Aug25.205708.9541@klaava.Helsinki.Fi&gt;&lt;br&gt;
Дата: 25 Aug 91 20:57:08 GMT&lt;br&gt;
Организация: Хельсинкский Университет
Привет всем тем, кто использует миникс —
Я делаю (свободную) операционную систему (это только хобби, не столь большое и профессиональное, как GNU) для 386 (486) AT-клонов. Эта система пишется с апреля и скоро будет готова. Я хочу получить любой отзыв, касающийся вещей, которые нравятся/не нравятся людям в миниксе, так как моя ОС похожа на неё (такое же устройство файловой системы (по практическим соображениям), среди прочего).
В настоящее время я портировал bash (1.08) и gcc (1.40), и, похоже, эти программы работают.
Это значит, что я получу что-то практичное в ближайшие несколько месяцев, и я хочу узнать, какие возможности хочет большинство людей.
Любые предложения принимаются, но я не обещаю, что я осуществлю их :-)
Линус (torvalds@kruuna.helsinki.fi)
P. S. Да — в ней нет кода миникс, и будет мультипотоковая ФС.
Система НЕПЕРЕНОСИМА (использует команды Intel 386 и т. д.) и, вероятно, будет поддерживать только жёсткие диски AT, так как это всё, что у меня есть :-(
Версии.
Торвальдс продолжает выпускать новые версии ядра, объединяя изменения, вносимые другими программистами, и внося свои. Оно обычно называется «ванильным» ("vanilla"), то есть официальное ядро без каких-либо сторонних изменений. В дополнение к официальным версиям ядра существуют альтернативные ветки, которые могут быть взяты из различных источников. Как правило, разработчики дистрибутивов Linux поддерживают свои собственные версии ядра, например, включая в них драйверы устройств, которые ещё не включены в официальную версию. С 30 мая 2011 изменена политика нумерации версий ядра.
Нумерация версий до 30 мая 2011.
Номер версии ядра Linux до 30 мая 2011 содержал четыре числа, согласно недавнему изменению в политике именования версий, схема которой долгое время была основана на трёх числах. Для иллюстрации допустим, что номер версии составлен таким образом: A.B.C[.D] (например, 2.2.1, 2.4.13 или 2.6.12.3).
Нумерация версий с 30 мая 2011.
30 мая 2011 Линус Торвальдс выпустил ядро версии 3.0-rc1. Вместе с ним изменена политика нумерации версий ядра. Отменено использование чётных и нечётных номеров для обозначения стабильности ядра, а третье число означает стабильность ядра. Версия 3.0 практически не несёт никаких изменений, кроме изменения политики нумерации ядра. Таким образом, стабильные версии ядра 3.0 будут именоваться 3.0.X, а следующий после этого релиз будет иметь номер 3.1.
Поддержка.
В то время как Торвальдс продолжает выпускать новые экспериментальные версии, руководство LTS-версиями передаётся другим лицам:
Другими программистами ядра Linux являются и .
Архитектура.
Ядро Linux поддерживает многозадачность, виртуальную память, динамические библиотеки, отложенную загрузку, производительную систему управления памятью и многие сетевые протоколы.
На сегодняшний день Linux — монолитное ядро с поддержкой загружаемых модулей. Драйверы устройств и расширения ядра обычно запускаются в нулевом кольце защиты, с полным доступом к оборудованию. В отличие от обычных монолитных ядер, драйверы устройств легко собираются в виде модулей и загружаются или выгружаются во время работы системы.
То, что архитектура Linux не является микроядерной, вызвало обширнейшие прения между Торвальдсом и Эндрю Таненбаумом в конференции по Minix в 1992 году.
Совместимость.
Задуманное изначально не как многоплатформенное, ядро Linux на данное время перенесено на очень широкий круг архитектур, запускается на широком спектре оборудования от iPAQ (карманный компьютер) до IBM S/390 (высокопроизводительный мейнфрейм). Системы на основе Linux используются в качестве основных почти на всех суперкомпьютерах (более 99 % списка TOP500), в том числе и на самом мощном — Summit.
Изначально Linux разрабатывался для 32-битных x86-совместимых ПК; на сегодняшний день различные версии ядра Linux запускаются на следующих процессорных архитектурах:
Лицензия.
Ядро Linux распространяется на условиях лицензии GNU General Public License, то есть свободно. Эту лицензию выбрал Линус Торвальдс практически сразу после того, как стало понятно, что его хобби начало получать распространение по всему миру. Владельцем торговой марки Linux является Торвальдс, а помогает следить за соблюдением его прав и условий GPL Фонд свободного программного обеспечения.
Символ.
Официальным символом Linux является пингвин по имени Tux, отличающийся от «обычных» пингвинов жёлтым цветом клюва и лап.
В качестве символа версии ядра 2.6.29 принят тасманийский дьявол Tuz, изображение которого ранее служило талисманом конференции linux.conf.au 2009. На этой конференции Линус Торвальдс провёл успешную акцию по благотворительной продаже игрушек Linux Tasmanian devil за сохранение популяции Тасманского дьявола. В версии 2.6.30 используется прежний логотип.
Оценка стоимости разработки с нуля.
Стоимость переразработки ядра Linux версии 2.6.0 способами, принятыми для разработки проприетарного ПО, была оценена в 612 млн долл. США (467 млн евро) в ценах 2004 года с использованием модели оценки человеко-месяцев COCOMO. В 2006 году исследование, профинансированное Евросоюзом, подняло стоимость разработки ядра Linux до уровня 882 млн евро.
Эта тема была снова поднята в октябре 2008 году Амандой Макферсон, Брайаном Проффиттом и Роном Хейл-Эвансом. Используя методологию Дэвида Вилера, они оценили разработку ядра 2.6.25 в 1,3 млрд долл. США (часть от 10,8 млрд долл. США переразработки Fedora 9). Также Гарсиа-Гарсиа и Алонсо де Магдалено из университета Овьедо (Испания) оценили ежегодный прирост стоимости ядра приблизительно в 100 млн евро с 2005 по 2007 годы и 225 млн евро в 2008 году. Совокупная стоимость разработки в Евросоюзе в 2009 году оценена в более чем 1 млрд евро (около 1,23 млрд долл. США).
См. также.
Компоненты ядра Linux

</doc>
<doc id="957" url="https://ru.wikipedia.org/wiki?curid=957" title="MIDI">
MIDI

MIDI ( — «цифровой интерфейс музыкальных инструментов») — стандарт цифровой звукозаписи на формат обмена данными (интерфейс) между электронными музыкальными инструментами.
Интерфейс позволяет единообразно кодировать в цифровой форме такие данные как нажатие клавиш, настройку громкости и других акустических параметров, выбор тембра, темпа, тональности и др., с точной привязкой во времени. В системе кодировок присутствует множество свободных команд, которые производители, программисты и пользователи могут использовать по своему усмотрению. Поэтому интерфейс MIDI позволяет, помимо исполнения музыки, синхронизировать управление другим оборудованием, например, осветительным, пиротехническим и т. п.
Последовательность MIDI-команд может быть записана на любой цифровой носитель в виде файла, передана по любым каналам связи. Воспроизводящее устройство или программа называется "синтезатором (секвенсором) MIDI" и фактически является автоматическим музыкальным инструментом.
История.
К концу 1970-х годов получили распространение музыкальные синтезаторы. Они представляли собой наборы генераторов звуковых частот, управляемых напряжением. Нажатие клавиши на клавиатуре синтезатора включало генератор, частота которого задавалась напряжением от регулятора тональности данной клавиши. Количество отдельных генераторов определяло количество тонов синтезатора, которые могут звучать одновременно. Конкретные модели синтезаторов могли иметь особенности звучания и характерные специальные эффекты. Реализовать управление всей гаммой потенциальных возможностей синтеза звука в рамках одного аналогового устройства было невозможно. Рабочее место музыканта того времени могло состоять из нескольких разнородных синтезаторов; работать с таким "зоопарком" было сложно. 
В начале 80-х годов необходимость увеличения гибкости управления разнородными синтезаторами стала очевидной, а развитие электроники подсказало путь решения проблемы: цифровое программное управление. Компании-производители синтезаторов удачно смогли договориться о разработке и поддержке единого стандарта на интерфейс управления синтезаторами, который и появился в 1982 году. Идеология стандарта подразумевала разделение органов управления и аппаратуры синтеза звука. Интерфейс MIDI фактически стал средством передачи положения клавиш и регуляторов от музыкальной клавиатуры к аппаратуре синтеза звука. Теперь музыкант мог с одной клавиатуры управлять несколькими синтезаторами разных типов и фирм-изготовителей. Более того, цифровой формат передачи позволил дополнить аппаратуру секвенсорами — устройствами, запоминающими наигранную мелодию. Теперь музыкант мог записывать композиции или их части, микшировать без потери качества звука и использования сложных студийных магнитофонов того времени. Стандарт быстро завоевал популярность. Постепенно дополняясь новыми возможностями, он не потерял актуальности и в наше время.
Стандарт на аппаратуру и программное обеспечение.
Физический уровень интерфейса представляет собой токовую петлю (что обеспечивает гальваническую развязку и безопасность при соединении устройств между собой). Передатчик активный, 5 мА, наличие тока обозначает 0, нет тока — 1. Разъём 5-штырьковый DIN 41524. Приёмопередатчик асинхронный, скорость 31250 бит/с, формат 8-N-1.
Устройства соединяются кабелями. Выход данных ведущего устройства (разъём MIDI OUT) соединяется со входом ведомого устройства (разъёмом MIDI IN). Данные по кабелю передаются только в одном направлении, от ведущего устройства к ведомому (например, от музыкальной клавиатуры к синтезатору). Для двусторонней передачи данных требуется второй кабель.
Большая часть MIDI-устройств не копируют сообщения с входного на выходной разъём. Существует третий тип разъёма (MIDI THRU), на котором дублируется поток данных со входа. Этот тип разъёма позволяет соединить в цепочку произвольное количество синтезаторов. Однако такой тип разъёма есть не у всех синтезаторов. Кроме того, MIDI-устройства могут объединяться с помощью устройств MIDI thru box (хабов), которые ретранслируют входной сигнал на несколько выходов.
Стандарт описывает аппаратный интерфейс, который позволяет соединять электронные музыкальные инструменты и компьютеры различных производителей, описывает протоколы связи для передачи данных от одного устройства к другому. MIDI-устройства могут взаимодействовать с программными приложениями, используя коммуникационный протокол MIDI. Используя соответствующий программный MIDI-секвенсор, внешние MIDI-устройства могут посылать информацию на синтезатор звуковой карты. MIDI базируется на пакетах данных, каждый из которых соответствует MIDI-событию (), от нажатия клавиши до простой паузы, эти события разделяются по каналам. Сложная среда MIDI может включать различную аппаратуру, причём каждая часть системы будет отвечать за события на соответствующем канале. Альтернативным вариантом может быть одиночный синтезатор, который сам может управлять всеми каналами.
Формат музыкальных файлов.
В отличие от других форматов это не оцифрованный звук, а наборы команд (проигрываемые ноты, ссылки на проигрываемые инструменты, значения изменяемых параметров звука), которые могут воспроизводиться по-разному в зависимости от устройства воспроизведения. Удобство формата MIDI как формата представления данных позволяет реализовывать устройства, производящие автоматическую аранжировку по заданным аккордам, а также приложения 3D-визуализации звука. Кроме того, такие файлы, как правило, имеют на несколько порядков меньший размер, чем оцифрованный звук сравнимого качества.
Стандартный MIDI-файл (SMF — Standard MIDI File) — это специально разработанный формат файлов, предназначенный для хранения данных, записываемых и/или исполняемых секвенсором, секвенсор может быть как программой для компьютера, так и аппаратно выполненным модулем.
В этом формате хранятся стандартные MIDI-сообщения (то есть статус-байты и соответствующие им байты данных), а также временные метки или маркеры для каждого сообщения (то есть последовательности байтов, указывающие, какое количество условных единиц времени (импульсов, тиков) необходимо подождать перед тем, как исполнить следующее событие MIDI). Этот формат позволяет сохранять информацию о темпе, временном разрешении, выраженном в количестве тиков на одну четвертную длительность (или во временных единицах, приходящихся на одну секунду, в формате SMPTE), обозначения размера, информацию о музыкальных ключах, а также хранить названия треков и паттернов. Формат предусматривает возможность сохранения в одном файле нескольких паттернов и треков таким образом, что программы-приложения могут выбирать из всего набора хранимой информации ту, которая будет понятна данному приложению.
Как правило, трек представляет собой аналог музыкальной партии, например партии трубы. Аналогом паттерна может служить весь набор партий, взятых вместе, например совокупность партий трубы, ударных, фортепиано и т. д., которые используются в данном произведении или его части и исполняются одновременно.
При разработке формата предусмотрели возможность для любого секвенсора читать и записывать файл таким образом, чтобы, с одной стороны, не потерялись его данные, а с другой стороны, чтобы формат был достаточно гибким, приложения могли сохранять в файлах свою специфическую информацию, понятную только им, но не понятную другим программам-приложениям, причём при загрузке файлов MIDI непонятная другим программам-приложениям информация не приводит к недоразумениям, а просто игнорируется. В этом смысле формат файлов MIDI можно сравнить с форматами текстовой информации. Различные программы-секвенсоры способны читать MIDI-файлы, подобно тому, как различные текстовые редакторы читают ASCII-файлы, которые могут содержать вспомогательную информацию, понятную лишь данному редактору. Но в отличие от ASCII-файлов MIDI-файлы содержат цифровую информацию, и к тому же эта информация сохранена в виде записей, то есть групп байтов, которые содержат свой заголовок, состоящий из идентификатора записи и длины записи. Эти записи могут форматироваться, загружаться, игнорироваться и т. д. независимо друг от друга. Для осуществления работы с записями программы-приложения используют дополнительную информацию, записываемую в MIDI-файл. Например, возможно, программа «захочет» сохранить флаг, указывающий на то, что пользователь установил включённым звук метронома. Программа может вставить этот флаг в MIDI-файл таким образом, что другая программа-приложение сможет пропустить этот флаг без внимания. В будущем, возможно, существующий формат MIDI будет расширен и появятся новые типы записей. Новые программы для работы с MIDI-файлами будут распознавать и новые типы записей. Однако старые MIDI-файлы могут быть воспроизведены в своём исходном виде. Формат MIDI задуман таким образом, что с его расширениями будут совместимы более ранние его версии.
Что такое запись?
Данные всегда хранятся в виде записей. В одном MIDI-файле могут сосуществовать несколько различных записей. Каждая запись может иметь свой собственный размер, то есть количество байтов в различных записях может быть различно. Данные, хранящиеся в одной записи, связаны друг с другом определённым образом. Запись — это по своей сути набор взаимосвязанных байтов.
Каждая запись начинается с указания её идентификатора, который состоит из четырёх букв, то есть из четырёх ASCII-байтов. Этот идентификатор указывает, какой тип записи представлен в содержащихся в записи байтах данных. Последующие за идентификатором четыре байта (каждый из которых состоит из 8 бит) образуют 32-битное значение, указывающее длину (или размер) данной записи. Все записи должны начинаться с этих двух полей: идентификатора записи и размера записи. Эти два поля, занимающие всего 8 байт, образуют заголовок записи.
Длина записи не учитывает 8 байт заголовка. Байты длины просто указывают количество байтов в записи, которые следуют за заголовком.
Приведём пример заголовка (здесь байты представлены в шестнадцатеричном виде):
 4D 54 68 64 00 00 00 06
Отметим, что первые четыре байта заголовка образуют MThd (то есть первыми четырьмя байтами заголовка являются ASCII значения букв 'M', 'T', 'h', и 'd'). Последующие 4 байта говорят нам, что в записи будет ещё 6 байтов, следующих за заголовком. После этих шести байтов должен следовать следующий заголовок записи или же конец MIDI-файла.
Фактически все MIDI-файлы начинаются с заголовка MThd, и именно этот факт является указанием на то, что мы имеем дело со стандартным MIDI-файлом.
Запись MThd.
Запись MThd имеет длину 6 байт и следует за идентификатором MThd и 32 битным числом (00 00 00 06).
Рассмотрим подробно эти 6 байтов, следующих за 8-байтным заголовком в MThd записи.
Первые два байта данных содержат информацию о формате или типе MIDI-файла. Существует три различных типа (формата) MIDI-файлов:
Следующие два байта определяют количество треков, хранимых в файле, эти два байта обозначаются NumTracks. Естественно, что для файлов типа 0 значение NumTracks всегда равно 1. Для двух оставшихся типов возможны другие значения.
Оставшиеся два байта указывают величину временного разрешения, то есть количество временных импульсов (временных тиков), приходящихся на одну четвертную длительность, что в виде аббревиатуры английских слов обозначается как PPQN. Например, если ваш секвенвер использует 96 ppqn, то соответствующее поле в заголовке записи будет иметь шестнадцатеричное значение 00 60.
Напротив, если первый байт рассматриваемого поля заголовка отрицателен, то соответствующий формат использует стандарт SMPTE вместо стандарта PPQT. В этом случае первый байт поля временного разрешения принимает значения −24, −25, −29 или −30, что соответствует четырём стандартным типам в стандарте SMPTE. Второй байт (положительная величина) указывает величину разрешения во фрейме. Стандартные величины разрешения фрейма представляют собой 4 (временной код MIDI), 8, 10, 80 (SMPTE) или 100.
Задавая значения фреймов −25 и величину внутрифреймового разрешения 40, можно установить значение временного разрешения длительностью в миллисекунду.
Ниже приводится пример целой записи типа MThd, включая её заголовок:
Запись MTrk.
За записью MThd следует MTrk запись. Это единственный тип записи, отличающийся от MThd записи, который определён для MIDI-файлов в настоящее время. Если по какой-либо причине в файле содержится идентификатор какой-либо записи другого типа, то, вероятно, эта запись создана для какой-либо другой программы, и эта запись должна быть проигнорирована в соответствии с указанной в её заголовке длиной данной записи.
MTrk запись содержит в себе MIDI-данные и байты временных меток, а также необязательную информацию. Эти данные относятся к одному треку. Очевидно, что количество MTrk записей в файле должно совпадать со значением NumTracks, указанном в записи MThd.
Заголовок записи MTrk начинается с идентификатора записи, который представляет собой четыре ASCII-байта 'M', 'T', 'r', 'k', за которым следует значение длины записи, то есть число, равное количеству байтов в данной записи. Для различных треков значения длин MTrk записей могут быть различны. (Например, трек, содержащий партию скрипки из Концерта Баха, по всей видимости будет содержать больше данных, чем трек, содержащий басовую партию, в которой на один такт приходится лишь две ноты.)
Величины переменной длины — Временные метки событий
Трек в MIDI-файле аналогичен треку в MIDI-секвенсоре. Трек секвенсора содержит последовательность событий. Например, первым событием может быть взятие ноты «до» первой октавы. Вторым событием может быть взятие ноты «ми» терцией выше. Эти два события могут произойти в одно и то же время. Третьим событием может быть снятие ноты «до». Это событие может произойти несколькими долями позже после первого события (то есть звук «до» будет снят спустя несколько долей после того, как он был взят). Для каждого события указывается его время, именно в этот момент времени событие происходит. Все события организованы в пределах одной записи в памяти секвенсора в порядке их появления во времени.
В MIDI-файле время события указывается перед байтами данных, которые описывают само событие. Иными словами, временна́я метка события предшествует описанию события. Например, если первое событие происходит спустя 4 временных интервала (временной интервал устанавливается в MThd записи) после начала воспроизведения, то соответствующее ему значение «дельта» — значение промежутка времени — устанавливается равным 04. Если следующее событие происходит одновременно с этим первым событием, то значение его времени дельта равно 00. Таким образом, время дельта — это длительность, выраженная в элементарных временных интервалах, между данным событием и ему предшествующим событием.
Поскольку предполагается, что все треки начинают воспроизводиться с момента времени равного 0, то время дельта первого события становится равным 0.
Значения времен дельта хранятся в виде последовательностей байтов, которые носят название величин переменной длины. Лишь младшие 7 бит каждого байта являются значимыми для определения дельта времени. В зависимости от величины времени дельта, количество байтов может быть различным. Старший бит последнего байта в последовательности равен 0. Если время дельта находится в пределах от 0 до 127, то оно может быть выражено одним единственным байтом. Самое большое время дельта устанавливается в размере 0FFFFFFF, для записи такого времени потребуется величина переменной длины размером 4 байта. Так могут выглядеть величины переменной длины для разных значений времен дельта (время дельта выражено в виде 32-битного значения):
Время дельта Соответствующая величина переменной длины
Отметим, что использование значений переменной длины, то есть разбиение большой величины на последовательность байтов, не ограничивается случаем с временами дельта. Значения переменный длины используются в MIDI-файлах и в других случаях.
События.
Первые байты (от 1 до 4) записи MTrk задают значение времени дельта для первого события в формате величины переменной длины. Следующий за этой величиной байт данных представляет собой первый байт события MIDI. Этот байт носит название байта статуса события или байта текущего MIDI-статуса. Для MIDI-событий он представляет собой статус байт данного события. Например, если этот байт равен 0x90, то данное событие — это событие Взять Ноту на MIDI-канале 0. Или, если этот байт равен 0x23, то необходимо обратиться к статус-байту предыдущего события. Очевидно, что первое MIDI-событие в MTrk записи обязательно должно содержать в себе статус-байт. После статус-байта следуют один или два байта данных, в зависимости от типа события.
Особый случай представляют собой сообщения SYSEX, имеющие статус-байт, равный F0. События SYSEX могут иметь любую длину. После статус байта F0 следует последовательность значений переменной длины. Можно получить 32-битовое значение, которое равно количеству следующих далее байтов, образующих SYSEX-событие. Эта длина не включает в себя статус байт (F0).
Рассмотрим в качестве примера следующее SYSEX-событие MIDI:
 F0 7F 7F 04 01 7F 7F F7
В MIDI-файле такое событие будет сохранено в виде следующей последовательности байтов (исключая время дельта, предшествующее событию):
 F0 07 7F 7F 04 01 7F 7F F7
Статус-байт FF зарезервирован для использования в качестве статуса события, не являющегося MIDI-событием. За байтом FF следует другой байт, указывающий какой тип не-MIDI события описывается в данном событии. Это своеобразный второй статус-байт. За этим байтом следует величина переменной длины, которая показывает, какое количество байтов содержится в данном событии. то есть задаёт длину события. Длина не включает в себя начальный статус байт FF, байт типа события, байты длины события. Это особое сообщение, не принадлежащее протоколу MIDI, носит название мета-события. Ниже описаны некоторые мета-события. Если не указано обратное, в записи MTrk может быть размещено более одного мета-события, причём одно и то же мета-событие может быть размещено в одной записи более одного раза. Как и все MIDI-события, мета-события имеют дельта времена (временные метки). Таким образом, мы можем произвольно смешивать MIDI-события и мета-события.
Номер последовательности (записи).
 FF 00 02 ss ss
Это необязательное мета-событие должно находиться в самом начале MTrk записи перед первой ненулевой временной меткой или перед первым событием. Это мета-событие устанавливает номер последовательности (номер записи) Два байта данных ss ss соответствуют данным в MIDI-сообщении MIDI Cue. В MIDI-файлах второго типа эти числа определяют номера каждого паттерна (или MTrk записи) таким образом, что последовательность пьес, содержащихся в файле, может быть управляема при помощи сообщения MIDI Cue. Если байты ss ss опущены (длина данного мета-сообщения равна 0 вместо 2), то номера MTrk записей устанавливаются в порядке того, как они записаны в файле (первая MTrk соответствует первому треку и т. д.) Файлы нулевого и первого типов, которые содержат единственный паттерн, могут содержать мета-сообщение номера последовательности только в первой MTrk записи. Несколько файлов первого типа, содержащих различные номера последовательностей, могут рассматриваться как коллекции независимых пьес.
Можно использовать только одно мета-сообщение номера последовательности для каждой MTrk записи в файле формата 2. Можно использовать только одно мета-сообщение номера последовательности в файле формата 0 или формата 1, и это мета-сообщение должно находиться в первой MTrk записи.
Текст.
 FF 01 len text
Это мета-событие содержит любой объём текста любого назначения. Значение len содержит длину текстового сообщения в байтах. Наиболее удобно помещать такие мета-сообщения в начале MTrk записи. Несмотря на то, что записываемый текст может быть использован в любых целях, необходимо иметь в виду, что предусмотрены также и иные текстовые мета-сообщения, которые специально предназначены для указания инструментов оркестра, слов песен, названий треков и другие. Данное мета-событие главным образом предназначено для добавления комментариев к MIDI-файлу, предполагается, что при загрузке файлов эти комментарии будут проигнорированы.
Отметим, что величина len представляется в виде значения переменной длины.
Мета-событие Copyright.
 FF 02 len text
Текстовое мета-событие copyright наиболее удобно помещать в начале MTrk записи
Отметим, что величина len представляется в виде значения переменной длины.
Имя последовательности/Имя трека.
 FF 03 len text
Текстовое мета-событие, содержащее название MIDI-последовательности или трека. Удобно располагать это мета-событие в начале MTrk записи.
Отметим, что величина len представляется в виде значения переменной длины.
Инструмент.
 FF 04 len text
Текстовое мета-событие, содержащее название инструмента, исполняющего данный трек. Название инструмента может отличаться от названия самого трека. Например, название трека может быть, скажем, «Ария Ленского», а название инструмента может указывать на голос и содержать значение «Тенор».
Наиболее удобно располагать одно или несколько мета-событий подобного типа в самом начале MTrk записи, поскольку эти события несут вспомогательную информацию, которая информирует пользователя о том, какой инструмент исполняет данный трек, а также сообщают другие полезные данные. Обычно реальные параметры, задающие тип инструмента, исполняющего трек, хранятся в файле в виде MIDI-событий типа MIDI Program Change, а описанные здесь мета-события позволяют снабдить пользователя удобно читаемыми описаниями, соответствующими сделанным в MTrk записях конфигурациям.
Отметим, что величина len представляется в виде значения переменной длины.
Слова.
 FF 05 len text
Текстовое мета-событие, содержащее слова вокального произведения, приходящиеся на ту или иную музыкальную долю. Одно мета-событие «Слова» должно содержать один единственный слог текста.
Отметим, что величина len представляется в виде значения переменной длины.
Маркер.
 FF 06 len text
Текстовое мета-событие Маркер устанавливается на определённой музыкальной доле. Это событие может использоваться для организации петель и может обозначать начальную и конечную точку петли.
Отметим, что величина len представляется в виде значения переменной длины.
Точка входа Cue Point.
 FF 07 len text
Текстовое мета-событие «точка входа» может использоваться для обозначения точки входа внешнего потока данных, например точки начала воспроизведения файла с цифровым звуком. Текстовое значение данного мета-события может содержать имя WAV файла, содержащего цифровой звук.
Отметим, что величина len представляется в виде значения переменной длины.
Канал MIDI.
 FF 20 01 cc
Это необязательное мета-событие обычно располагается в начале MTrk сообщения перед первой ненулевой временной меткой и перед первым мета-событием, исключая мета-событие номера последовательности. Мета-событие «канал MIDI» устанавливает значение MIDI-канала с которым будут связаны все последующие мета-события и события SYSEX. Байт данных cc — это номер MIDI-канала, величине 0 соответствует первый канал.
Спецификация MIDI не предусматривает указание номера канала для SYSEX событий и мета-событий. Если создаётся файл типа 0, то все SYSEX события и мета-события находятся на одном треке и затруднительно распределить эти события между соответствующими канальными (голосовыми) сообщениями (например, если вы хотите обозначить партию канала 1 как «Флейта соло», а партию канала 2 как «Труба соло», то вам придётся использовать два мета-события «Имя трека» для введения этих названий, но поскольку оба этих трека расположены на одном канале, то перед первым мета-сообщением имени трека необходимо поместить мета-сообщение «канал MIDI», в котором указать номер соответствующего канала, а перед вторым мета-сообщением имени трека поместить мета-сообщение канала MIDI с указанием номера второго канала.
На одном MIDI-треке можно использовать более одного мета-сообщения «канал MIDI», если события этого трека нужно распределить между несколькими каналами MIDI.
Порт MIDI.
 FF 21 01 pp
Это необязательное событие, которое как правило располагается в начале записи MTrk перед первым ненулевым временем дельта и перед первым MIDI-событием, которое определяет, с каким MIDI-портом (или устройством) связаны события данного MTrk сообщения. Байт данных pp — это номер порта, нулевому значению pp соответствует первое MIDI-устройство в системе.
Спецификация MIDI предусматривает лишь 16 каналов на один входной или выходной порт (устройство, разъём, инструмент — терминология может быть различной) MIDI. Номер MIDI-канала каждого события MIDI содержится в статус байте события, где он занимает четыре младших бита. Таким образом, номер канала всегда представляет собой число в пределах от 0 до 15. Иногда система позволяет осуществлять работу более чем с 16 каналами MIDI, возникает необходимость преодолеть ограничения, накладываемые малым количеством каналов MIDI, и расширить возможности обмена MIDI-данными, сделать обмен информацией со внешними MIDI-устройствами более эффективным, то есть позволить музыканту работать более чем с 16 каналами. Некоторые секвенсоры также позволяют осуществлять работу более чем с 16 MIDI-каналами на входе и выходе одновременно. К сожалению, протокол MIDI не предусматривает возможность использования более чем 16 MIDI-каналов в рамках статус байта в событии MIDI. Поэтому необходим дополнительный метод, который позволяет различать события, которые соответствуют первому каналу на первом MIDI-порте от событий, соответствующих, скажем, первому каналу на втором MIDI-порте. Описываемое мета-событие позволяет секвенсору определить, на какой MIDI-порт посылать события данного MTrk сообщения.
Допускается располагать более одного мета-события «Порт MIDI» в пределах одного MIDI-трека, если требуется изменить значение MIDI-порта в определённый момент времени.
Темп.
 FF 51 03 tt tt tt
Это событие указывает на изменение темпа. 3 байта данных tt tt tt определяют темп в микросекундах в четвертной ноте. Другими словами, значение темпа (мкс) говорит вам, сколько времени должна звучать каждая из «четвертных нот». Если tt tt tt = 07 А1 20, то каждая четвертная нота должна иметь длительность 07 А1 20 (или 500 000) микросекунд. Как правило, музыканты выражают темп как «сумму четвертных нот в каждую минуту (то есть период времени)». Это полностью противоположно тому, как формат MIDI выражает его. Чтобы преобразовать темп в MIDI формат (BPM — ударов в минуту): BPM = 60000000 / (tt tt tt). Например, темп 120 BPM = 07 А1 20 микросекунд за четвертную ноту. ПРИМЕЧАНИЕ: Если темп не определён, по умолчанию предполагается значение 120 BPM.
SMPTE Offset.
FF 54 05 hr mn se fr ff
Назначает время начала (часы, минуты, секунды, кадры, подкадры) MIDI-дорожки согласно стандарту SMPTE.
Time Signature (размер).
FF 58 04 nn dd cc bb
Музыкальный размер задаётся четырьмя байтами.
• nn и dd — соответственно числитель и знаменатель в нотной записи.
Знаменатель вычисляется как двойка в степени dd. (dd = 2: 1/4; dd = 3: 1/8 и т. д.)
• cc expresses the number of MIDI clocks in a metronome click.
• bb expresses the number of notated 32nd notes in a MIDI quarter note (24 MIDI clocks).
This event allows a program to relate what MIDI thinks of as a quarter, to something entirely different. For example, 6/8 time with a metronome click every 3 eighth notes and 24 clocks per quarter note would be the following event: FF 58 04 06 03 18 08
NOTE:
• If no Time Signature is defined, the default value 4/4 is assumed.
• Time Signature can only be redefined at measure beginnings.
Key Signature (тональность).
FF 59 02 sf mi
• sf = −7 для 7 бемолей, −1 для 1 бемоля и т. д., 0 для до-мажора или натурального ля-минора, 1 для 1 диеза и т. д.
• mi = 0 для мажора, 1 для минора.
Конец трека.
 FF 2F 00
Это событие является обязательным. Оно обязано быть последним событием каждой MTrk записи. Оно представляет собой явное обозначение конца MTrk записи. Допускается использование единственного мета-события «Конец трека» для каждой MTrk записи.
Улучшение звучания синтезатора MIDI.
Файлы MIDI являются набором команд для синтезатора (секвенсора), установленного на компьютере, но не несут в себе готовых для воспроизведения аудиоданных в отличие от трекерных модулей.
Часто звучание установленного по умолчанию на Windows «Программного синтезатора» не устраивает пользователя (из-за качества семплов в его банке звуков). Для улучшения звука можно выбрать банк со звуками лучшего качества, или же синтезатор с отличным от волнового способом создания звука.
Преобразование в MIDI.
Для преобразования музыкальных записей в команды MIDI существуют различные программы. В качестве исходных могут использоваться как WAV-файлы, так и файлы формата MP3, дорожки Audio CD, а также непосредственно поступающий с микрофона звук без записи его в файл. Некоторые программы умеют распознавать полифоническую музыку, то есть содержащую много голосов. Для улучшения качества распознавания в некоторых программах можно использовать встроенный нотный редактор.
MIDI-культура.
Black MIDI — жанр абстрактной музыки, основная идея которого, сделать мелодию, которую невозможно повторить на классических музыкальных инструментах. 
Есть различные цели при написании музыки — cделать максимально большой файл, повторить вокал на пианино или же сделать сложный узор аудиодорожками .

</doc>
<doc id="959" url="https://ru.wikipedia.org/wiki?curid=959" title="MP3">
MP3

MP3, mp3 (сокр.от MPEG-1 Audio Layer III или MPEG-2 Audio Layer III) — аудиоформат, разработанный командой MPEG. Формат был лицензируемым, но 23 апреля 2017 года срок действия всех патентов истёк и лицензионные сборы прекращены.
MP3 является одним из самых распространённых и популярных форматов цифрового кодирования звуковой информации. Он широко используется в файлообменных сетях для оценочного скачивания музыкальных произведений. Формат может проигрываться практически во всех популярных операционных системах, на большинстве портативных аудиоплееров, а также поддерживается всеми современными моделями музыкальных центров и DVD-плееров.
В формате MP3 используется алгоритм сжатия с потерями, разработанный для существенного уменьшения размера данных, необходимых для воспроизведения записи и обеспечения качества воспроизведения звука, близкого к оригинальному (по мнению большинства слушателей), но с ощутимыми потерями качества при прослушивании на качественной звуковой системе.
Принцип сжатия заключается в снижении точности некоторых частей звукового потока, что практически неразличимо для слуха на повсеместно распространённой аппаратуре низкой точности воспроизведения звука (например, доминирующее большинство портативных устройств, звуковых карт, музыкальных центров, автомагнитол и прочей не специальной аппаратуры), а также для людей старшего возраста, в связи с естественными возрастными изменениями слухового аппарата, однако в большинстве случаев чётко различимо на аудиотехнике высокой точности воспроизведения.
Данный метод называют перцепционным кодированием. При этом на первом этапе строится диаграмма звука в виде последовательности коротких промежутков времени, затем на ней удаляется информация, не различимая человеческим ухом, а оставшаяся информация сохраняется в компактном виде. Данный подход похож на метод сжатия, используемый при сжатии картинок в формат JPEG. При создании MP3 со средней скоростью 128 кбит/с в результате получается файл, размер которого примерно равен 1:11 от оригинального файла с CD-Audio (само по себе несжатое аудио формата CD-Audio имеет скорость 1411,2 кбит/с). MP3-файлы могут создаваться с высокой или низкой скоростью шифрования цифрового потока, что влияет на качество файла-результата.
История.
MP3 разработан рабочей группой Института Фраунгофера () под руководством Карлхайнца Бранденбурга и университета Эрланген-Нюрнберг в сотрудничестве с AT&amp;T Bell Labs и Thomson (Джонсон, Штолл, Деери и др.).
Основой разработки MP3 послужил экспериментальный кодек ASPEC (Adaptive Spectral Perceptual Entropy Coding). Почти полный стандарт появился в открытом доступе 6 декабря 1991 года. При разработке алгоритма тесты проводились на вполне конкретных популярных композициях. Основной стала песня Сюзанны Веги «Tom’s Diner». Отсюда возникла шутка, что «MP3 был создан исключительно ради комфортного прослушивания любимой песни Бранденбурга», а Вегу стали называть «мамой MP3».
Первым кодировщиком в формат MP3 стала программа L3Enc, выпущенная летом 1994 года, а в сентябре 1995 года Институт Фраунгофера выпустил первый программный MP3-плеер — Winplay3. С 1996 года началось нелегальное распространение музыкальных MP3 файлов в интернете. Первой композицией загруженной в сеть 10 августа 1996 года риппером под ником NetFrack, стала песня «Until it Sleeps» с альбома «Load» группы Metallica.
23 апреля 2017 года истекли последние патенты на формат и были прекращены сборы лицензионных отчислений с производителей программного обеспечения и встраиваемых решений. О прекращении лицензирования формата сообщил Институт Фраунгофера на своём официальном сайте.
И, хотя формат mp3 всё ещё весьма популярен среди пользователей, большинство радиостанций и телеканалов перешли на использование современных кодеков, обеспечивающих лучшее сжатие и меньшую потерю качества звука.
Описание формата.
Как и формат JPEG, MP3 использует спектральные отсечения, согласно психоакустической модели. Звуковой сигнал разбивается на равные по продолжительности отрезки, каждый из которых после обработки упаковывается в свой фрейм (кадр). Разложение в спектр требует непрерывности входного сигнала, в связи с этим для расчётов используется также предыдущий и следующий фрейм. В звуковом сигнале есть гармоники с меньшей амплитудой и гармоники, лежащие вблизи более интенсивных — такие гармоники отсекаются, так как среднестатистическое человеческое ухо не всегда сможет определить присутствие либо отсутствие таких гармоник. Такая особенность слуха называется эффектом маскировки. Также возможна замена двух и более близлежащих пиков одним усреднённым (что, как правило, и приводит к искажению звука). Критерий отсечения определяется требованием к выходному потоку. Поскольку весь спектр актуален, высокочастотные гармоники не отсекаются, как в JPEG, а только выборочно удаляются, чтобы уменьшить поток информации за счёт разрежения спектра. После спектральной «зачистки» применяются математические методы сжатия и упаковка во фреймы.
Каждый фрейм может иметь несколько контейнеров, что позволяет хранить информацию о нескольких потоках (левый и правый канал либо центральный канал и разница каналов).
Степень сжатия можно варьировать, в том числе в пределах одного фрейма. Интервал возможных значений битрейта составляет 8—320 кбит/c.
MP3 и «качество Audio-CD».
В прошлом было распространено мнение, что запись с битрейтом 128 кбит/c подходит для музыкальных произведений, предназначенных для прослушивания большинством людей, обеспечивая качество звучания Audio-CD. В действительности всё намного сложнее. Во-первых, качество полученного MP3 зависит не только от битрейта, но и от кодирующей программы (кодека) (стандарт не устанавливает алгоритм кодирования, только описывает способ представления). Во-вторых, помимо превалирующего режима CBR (Constant Bitrate — постоянный битрейт) (в котором, проще говоря, каждая секунда аудио кодируется одинаковым числом бит) существуют режимы ABR (Average Bitrate — усреднённый битрейт) и VBR (Variable Bitrate — переменный битрейт). В-третьих, граница 128 кбит/c является условной, так как она была выбрана в эпоху становления формата, когда качество воспроизведения большинства цифровых звуковых систем, как правило, было ниже, чем в настоящее время. Грубо говоря, утверждение о «качестве Audio-CD» при 128 кбит/c соответствует границе относительно комфортного прослушивания музыки, ниже которой возникает сильная деградация звука у всех программ кодирования в формат MP3.
На 2008 год наиболее часто встречаются MP3-файлы с битрейтом 192 кбит/c, что может косвенно говорить о том, что большинство считает этот битрейт достаточным. Реально воспринимаемое «качество» зависит от исходного аудиофайла, слушателя и его аудиосистемы. Некоторые меломаны предпочитают сжимать музыку с «максимальным качеством» — 320 кбит/c, либо даже переходить на кодеки без потерь, например, FLAC. Также среди меломанов/аудиофилов бытует мнение, что некоторые семплы (фрагменты аудиозаписи) не поддаются качественному сжатию с потерями: на всех возможных битрейтах не составляет особого труда отличить сжатое аудио от оригинала. Однако есть и серьёзные возражения:
Совершенно очевидно, что (возьмём с запасом) битрейта 256 kbps в подавляющем большинстве случаев должно быть более чем достаточно для комфортного восприятия музыки с CDA-источника (44 kHz/16 bit/stereo). Это очевидно не только из моего доморощенного теста, но и по анализу профессиональных слепых тестов (например, германского издания «c’t», июнь 2000 г.): даже в них экспертам не всегда удаётся «угадать» сжатый до 256 kbps звук, причём тестирование проходит в специально подготовленных помещениях и на дорогом оборудовании, а эксперт знает, что надо «слушать», чтобы почувствовать сжатие.
Режимы кодирования и опции.
Существует три версии MP3 формата для различных нужд: MPEG-1, MPEG-2 и MPEG-2.5. Отличаются они возможными диапазонами битрейта и частоты дискретизации:
Режимы управления кодированием звуковых каналов.
Так как формат MP3 поддерживает двухканальное кодирование (стерео), существует 4 режима:
CBR.
"CBR" расшифровывается как "Constant Bit Rate", то есть "постоянный битрейт", который задаётся пользователем и не изменяется при кодировании произведения. Таким образом, каждой секунде произведения соответствует одинаковое количество закодированных бит данных (даже при кодировании тишины). "CBR" может быть полезен для потоков мультимедиа-данных по ограниченному каналу; в таком случае кодирование использует все возможности канала данных. Для хранения данный режим кодирования не является оптимальным, так как он не может выделить достаточно места для сложных отрезков исходного произведения, при этом бесполезно тратя место на простых отрезках. Повышенные битрейты (выше 256 кбит/c) могут решить данную проблему, выделив больше места для данных, но зато и пропорционально увеличивая размер файла.
VBR.
"VBR" расшифровывается как "Variable Bit Rate", то есть "изменяющийся битрейт" или "переменный битрейт", который динамически изменяется программой-кодером при кодировании в зависимости от насыщенности кодируемого аудиоматериала и установленного пользователем качества кодирования (например, тишина закодируется с минимальным битрейтом). Этот метод MP3-кодирования является самым прогрессивным и до сих пор развивается и улучшается, так как аудиоматериал разной насыщенности может быть закодирован с определённым качеством, которое обычно выше, чем при установке среднего значения в методе CBR. Плюс к тому, размер файла уменьшается за счёт фрагментов, не требующих высокого битрейта. Минусом данного метода кодирования является сложность предсказания размера выходного файла. Но этот недостаток VBR-кодирования незначителен в сравнении с его достоинствами. Также минусом является то, что VBR считает «незначительной» звуковой информацией более тихие фрагменты, таким образом получается, что если слушать очень громко, то эти фрагменты будут некачественными, в то время как CBR делает с одинаковым битрейтом и тихие, и громкие фрагменты.
Формат VBR постоянно улучшается, благодаря постоянному совершенствованию математической модели кодеков, в частности, после выхода обновлённой версии свободного MP3-кодека LAME (версия 3.99.3), кодирование с переменным битрейтом, по заявлению разработчиков, качественно лучше CBR и тем более ABR. Однако формат CBR 320 кбит/c всё ещё позиционируется как гарантирующий максимальное качество (например он используется в пресете «--preset insane»).
ABR.
"ABR" расшифровывается как "Average Bit Rate", то есть "усреднённый битрейт", который является гибридом VBR и CBR: битрейт в кбит/c задаётся пользователем, а программа варьирует его, постоянно подгоняя под заданный битрейт. Таким образом, кодек будет с осторожностью использовать максимально и минимально возможные значения битрейта, так как рискует не вписаться в заданный пользователем битрейт. Это является явным минусом данного метода, так как сказывается на качестве выходного файла, которое будет немного лучше, чем при использовании CBR, но хуже, чем при использовании VBR. С другой стороны, этот метод позволяет наиболее гибко задавать битрейт (может быть любым числом между 8 и 320, против исключительно кратных 16 чисел метода CBR) и вычислять размер выходного файла.
Кодеки.
Типы программ, необходимые для преобразования форматов файлов. Наиболее распространённые кодеки MP3.
Структура файла.
MP3-файл состоит из нескольких фрагментов (фреймов) MP3, которые, в свою очередь, состоят из заголовка и блока данных. Такая последовательность фрагментов называется . Фрагменты не являются независимыми элементами («резервуар байт»), и поэтому не могут быть извлечены произвольно. Блок данных MP3-файла содержит сжатую аудиоинформацию в виде частот и амплитуд. На приведённой диаграмме показано, что заголовок MP3 состоит из маркера, который служит для нахождения верного MP3-фрагмента. За ним следует бит, показывающий, что используется стандарт MPEG, и два бита, показывающие использование layer 3; другими словами, это определяет MPEG-1 Audio Layer 3 или MP3. Последующие значения могут варьироваться в зависимости от типа MP3-файла. Стандарт "ISO/IEC 11172-3" определяет диапазон значений для каждой секции заголовка, вместе с общей его спецификацией. Большинство MP3-файлов в настоящий момент содержат ID3-метаданные, которые предшествуют или следуют за MP3-фрагментом; они также отображены на диаграмме.
Теги.
Теги (от  — ярлык, метка, бирка) — метки в границах MP3-файла (в начале и/или в конце). В них может быть записана информация об авторстве, альбоме, годе выпуска, обложка альбома и текст песни и прочая информация о треке. В более поздних версиях тегов возможно хранение прочих данных о звуковой записи. Существуют различные версии тегов (см.: ID3).
Недостатки.
"Технические недостатки." Количество каналов звука ограничено двумя, в отличие от AAC и Vorbis. Также имеется жёсткое ограничение возможной частоты дискретизации: отсутствует возможность задать произвольную частоту дискретизации. Максимальная частота дискретизации для MP3 — 48 кГц в то время как для Vorbis максимальная частота — 192 кГц, и для AAC — 96 кГц. В MP3 возможно сохранить только в следующих частотах дискретизации: 8000, 11025, 12000, 16000, 22050, 24000, 32000, 44100 и 48000 Гц.
"Юридические ограничения." Патентом на MP3 владеет компания Alcatel-Lucent, которая требовала лицензирования некоторых способов использования формата (срок действия связанных с MP3 патентов истёк 23 апреля "2017"). &lt;br&gt;
В США изобретения, публично раскрытые более года, не могут быть запатентованы; однако для патентов, оформленных до 8 июня 1995 года (почти полный стандарт появился в открытом доступе 6 декабря 1991), существовала возможность увеличить их сроки действия.
Известные патенты, касающиеся расшифровки MP3, прекратили действие в США к декабрю 2012; по другим данным, если учитывать только патенты, заявка на которые была подана до декабря 1992 года, этого не произошло в сентябре "2015" года.
В 2017 году все патенты, касающиеся данного формата, окончили действие, так как не были продлены правообладателями.

</doc>
<doc id="965" url="https://ru.wikipedia.org/wiki?curid=965" title="NTP">
NTP

NTP ( — протокол сетевого времени) — сетевой протокол для синхронизации внутренних часов компьютера с использованием сетей с переменной . Протокол был разработан , профессором Делавэрского университета, в 1985 году. Версия на 2015 год — NTPv4.
NTP, основанный на алгоритме Марзулло, использует для своей работы протокол UDP и учитывает время передачи. Система NTP чрезвычайно устойчива к изменениям латентности среды передачи. В версии 4 способен достигать точности 10 мс (1/100 с) при работе через Интернет, и до 0,2 мс (1/5000 с) и лучше внутри локальных сетей.
Наиболее широкое применение протокол NTP находит для синхронизации серверов точного времени. Для достижения максимальной точности предпочтительна постоянная работа программного обеспечения NTP в режиме системной службы. В семействе операционных систем Microsoft Windows — это служба W32Time, в UNIX-подобных системах — демон Ntpd или chronyd.
Более простая реализация этого алгоритма известна как SNTP — простой протокол сетевого времени. Используется во встраиваемых системах и устройствах, не требующих высокой точности, а также в пользовательских программах точного времени.
Структура пакета.
Структура пакета описана в RFC 5905. Пакет состоит из целого числа 32-битных слов.
Данные в заголовке будут отличаться для различных режимов работы. Например, клиент в поля "часовой слой", "идентификатор источника", "начальное время" и "время приёма" должен записать нули.
NTP-сообщение «Kiss-o'-Death».
Для слоя 0, который считается неопределённым или недопустимым, поле "Идентификатор источника" может использоваться для доставки сообщений, которые выполняют роль данных о состоянии системы и управления доступом. Такие сообщения называются «Kiss-o'-Death» (KoD), а доставляемые ими ASCII-данные называются «kiss codes» (коды «помощи»). Перечень принятых в настоящее время кодов «помощи» представлен в таблице ниже.
Получатели KoD-сообщений обязаны их проверить и выполнить следующие действия:
Часовые слои.
NTP использует иерархическую сеть, где каждый уровень имеет свой номер, называемый слой (). Слой 1 — первичные серверы, непосредственно синхронизирующиеся с национальными службами времени через спутник, радио или телефонный модем. Слой 2 — вторичные серверы, синхронизируются с первичными серверами, и т. д. Как правило, клиенты и серверы NTP с относительно небольшим числом клиентов не синхронизируется с первичными серверами. Существует несколько сотен общественных вторичных серверов, работающих на более высоких слоях. Они являются предпочтительным выбором.
Формат времени.
Время представляется в системе NTP 64-битным числом (8 байт), состоящим из 32-битного счётчика секунд и 32-битного счётчика долей секунды, позволяя передавать время в диапазоне 232 секунд, с теоретической точностью 2−32 секунды. Поскольку шкала времени в NTP повторяется каждые 232 секунды (136 лет), получатель должен хотя бы примерно знать текущее время (с точностью 68 лет). Также следует учитывать, что время отсчитывается с полуночи 1 января 1900 года, а не с 1970, поэтому из времени NTP нужно вычитать 70 лет (с учётом високосных лет), чтобы корректно совместить время с Windows или Unix-системами.

</doc>
<doc id="967" url="https://ru.wikipedia.org/wiki?curid=967" title="Napster">
Napster

Napster (New artist program) — файлообменная пиринговая сеть, созданная Шоном Фэннингом (при участии Шона Паркера и Джордана Риттера) и действовавшая в период с июня 1999 года по июль 2001 года, когда он посещал Северо-Восточный университет в Бостоне. Названием сервиса стал псевдоним Шона. Napster был первым широко используемым p2p (peer-to-peer) файлообменным сервисом и оказал сильное влияние на людей, использующих интернет. Сервис позволял легко обмениваться музыкальными файлами с другими людьми, что привело к обвинениям в нарушении авторских прав со стороны музыкальной отрасли. Несмотря на то, что сервис был остановлен по решению суда, он привёл к появлению децентрализованных peer-to-peer сетей, контролировать которые гораздо сложнее.
В настоящий момент торговая марка и логотип сервиса используются платным сервисом .
Истоки.
Шон Фаннинг в компании с двумя своими онлайн-друзьями — Джорданом Риттером из Бостона и Шоном Паркером из Вирджинии — запустил первую версию Napster в июне 1999. Фаннинг хотел найти более лёгкий способ обмениваться музыкой в формате MP3, чем посредством IRC или Lycos. После рассмотрения всех аспектов деятельности компании Джоном Фанингом, дядей Шона, последний получил 30 % акций компании. Остальное отошло к его дяде.
Napster являлась peer-to-peer сетью, хотя и использовала централизованное управление для получения списка подключённых компьютеров и их списка предоставляемых файлов, так как обмен файлами происходил непосредственно без участия центрального сервера. Такой принцип работы очень похож на протокол IRC. Хотя и существовали сети, облегчающие обмен файлами (напр., IRC, , USENET), Napster специализировалась исключительно на музыке в формате MP3 и предоставляла удобный интерфейс. Результатом стала система, чья популярность генерировала огромный выбор музыки для скачивания.
Хотя музыкальная индустрия провозгласила обмен музыкой посредством p2p-сетей воровством, многие пользователи Napster считали такие закачки оправданными по многим причинам. Многие считали, что к середине 90-х качество новых альбомов снизилось к уровню, когда типичный альбом содержал только одну-две хорошие песни и «музыкальный наполнитель» — песни-пустышки. Поэтому они были благодарны Napster за возможность скачать несколько песен без необходимости платить за весь альбом. Также Napster предоставлял прекрасную возможность меломанам обмениваться песнями, которые сложно найти — старыми записями и песнями с концертов, бутлегами. Также у пользователей появилась возможность скачать музыку, которую они приобрели до популяризации компакт-дисков (например, на виниловых пластинках, кассетах), в оцифрованном виде.
Закрытие.
Причиной закрытия Napster стало появление в 2000 году демоверсии песни «I Disappear» группы Metallica за несколько дней до её официального выхода. Это не понравилось участникам группы, в особенности барабанщику Ларсу Ульриху, по чьей инициативе и был составлен иск против компании. Музыканты затеяли судебную тяжбу с Napster, заодно учинив иск университетам Южной Калифорнии, Йеля и Индианы за то, что их руководство не воспрепятствовало бесплатному распространению. В итоге, в 2001 году Metallica и Napster пришли к некоторому соглашению.
После предложения о покупке за 2,43 млн долларов контрольного пакета акций, сделанного компанией развлечений для взрослых Private Media Group, бренд и логотипы были приобретены на аукционе банкротов компанией , которая использовала их для преобразования музыкального интернет-сервиса в платный сервис Napster 2.0.
Napster сегодня.
В сентябре 2008 года музыкальный сервис был выкуплен американской компанией Rhapsody и в настоящее время является онлайн-магазином музыки.

</doc>
<doc id="969" url="https://ru.wikipedia.org/wiki?curid=969" title="OS/2">
OS/2

OS/2 — операционная система фирмы IBM, в определённый период времени разрабатывавшаяся с участием Microsoft.
История системы.
1 августа 1984 года IBM объявила о выпуске нового поколения персональных компьютеров — IBM PC/AT — и приступила к разработке новой операционной системы для этих машин. Новая ОС должна была преодолеть ограничение DOS на 640 Кб памяти для прикладных программ и реализовать поддержку режима многозадачности. Параллельно с разработкой Windows корпорация Microsoft вместе с IBM включилась в активную работу по созданию системы, получившей наименование OS/2. Однако в начале 1990-х годов пути двух гигантов IT-индустрии разошлись. Microsoft независимо от IBM начинает разработку Windows 3.0. IBM, независимо от Microsoft, разворачивает работу над облегчённой версией OS/2, которая требовала бы меньше ресурсов, чем OS/2 1.2.
Версии.
OS/2 v0.99 — бета-версия.
Предназначена для отладочных целей, поставлялась почти без драйверов. Цель создания — конкуренция на рынке многозадачных оболочек для DOS, основным конкурентом считалась DESQview. Включает поддержку кооперативной многозадачности. Текстовый интерфейс, переключение экранов.
OS/2 v1.0 (декабрь 1987 года) — первая официальная версия.
ОС с режимом многозадачности, использующая аппаратные средства процессора 80286 (защищённый режим). По-прежнему текстовый интерфейс. Взаимодействие с пользователем осуществляется только одной из запущенных программ, остальные выполняются в фоновом режиме. Максимально поддерживаемый объём дисков — 32 Мб. Нет поддержки мыши. Все версии OS/2 1.х разработаны для процессора 80286, но могут функционировать и на системах с процессором 80386.
OS/2 v1.10SE (Standard Edition) (октябрь 1988 года)
Дебют Presentation Manager (PM), реализующего функции графического интерфейса пользователя. Поддерживаются диски с файловой системой FAT16 объёмом до двух гигабайт.
OS/2 v1.10EE (Extended Edition) (начало 1989 года)
По сравнению со стандартной версией эта версия была дополнена программами Database Manager (администратор баз данных) и Communications Manager (администратор связи с мэйнфреймами IBM).
OS/2 v1.20 (ноябрь 1989 года)
Включает улучшенный Presentation Manager, а версия EE — также новую файловую систему HPFS (High Performance File System), более эффективную, быструю и надёжную, чем FAT. Также добавлен интерпретатор языка программирования REXX.
В 1989 году было начато создание сразу двух новых версий OS/2:
OS/2 v1.30 (1991 год)
Увеличена скорость работы и надёжность по сравнению с предшествующими версиями. В комплект входит много новых драйверов устройств (однако меньше, чем в Windows). Интерпретатор REXX появился и в версии SE, добавлено кеширование записи на HPFS, поддержка видеорежима 1024×768 и шрифтов Adobe Type I.
OS/2 v2.00 (весна 1992 года)
Эта версия 32-разрядная (за исключением видеоподсистемы), продвигалась IBM под слоганом «лучшая DOS, чем MS-DOS, и лучшая Windows, чем Windows». Использование виртуальных DOS-машин (VDM) позволяет запускать сразу несколько DOS- и Windows-задач. Для запуска программ Windows используется Win-OS/2, основанная на приобретённой IBM лицензии на Windows 3.1. Использование виртуальных машин позволило изолировать Windows и DOS-задачи, в результате чего сбои в программах не препятствовали продолжению выполнения других программ. Реализованы также такие механизмы межпрограммного взаимодействия, как динамический обмен данных (Dynamic Data Exchange) и буфер обмена.
Минимально необходимым для работы этой версии системы является процессор 80386, ядром системы используется его защищённый режим. DOS-приложения используют режим виртуального 8086. Для работы требуется объём оперативной памяти 8 мегабайт.
Также в эту версию включена оболочка рабочего стола Workplace Shell, предоставляющая функции объектно-ориентированного графического интерфейса пользователя.
OS/2 v2.10 (май 1993 года)
Ускорена загрузка, добавлена поддержка шрифтов TrueType в Win-OS/2, а также функции поддержки мультимедиа (Multimedia Presentation Manager, MMPM/2). Графическая подсистема стала 32-битной. Поддерживаются системы PCMCIA и APM BIOS, необходимые для портативных компьютеров; однако качество реализации драйверов невысокое. В конце 1993 года была также выпущена более дешёвая версия OS/2 2.11, устанавливающаяся поверх Windows 3.1.
Warp 3 (октябрь 1994 года) и её бета-версия OS/2 v2.99 (начало 1994 года)
Первоначально эта версия вышла под названием «OS/2 Warp for Windows» и устанавливалась как и OS/2 2.11 поверх Windows 3.1. Позже была выпущена версия, включающая Win-OS/2. Минимальные требования включают процессор 80386 и 4 мегабайта оперативной памяти. В комплект поставки включены дополнительные драйверы устройств. Улучшена поддержка печати, мультимедиа и PCMCIA, Workplace Shell. Появился новый элемент интерфейса — LaunchPad (панель для быстрого запуска программ).
Также доступны сервисы Интернет и TCP/IP. Warp 3 включает комплект доступа в Интернет (Internet Access Kit, IAK), в состав которого входит, помимо системного ПО, браузер Web Explorer, хотя большинство пользователей использовали Netscape. Доступна также поддержка FTP и электронной почты (но предназначенная для этого программа Ultimail Lite неудобна и работает с малой скоростью).
В комплект поставки входил компакт-диск BonusPak, на котором представлен офисный пакет IBM Works, включающий электронные таблицы, текстовый процессор, СУБД, генератор отчётов и программу построения диаграмм. Также в Bonus Pak включена программа для приёма/отправки факсов и некоторое другое ПО.
В том же году в IBM принято стратегическое решение о концентрации усилий по разработке не на x86-совместимых компьютерах, а на PowerPC, в число разработчиков которого входила сама IBM. Была создана концепция «Workplace OS», а также версия OS/2 для PowerPC.
Warp Connect (1995 год)
Включает сетевой инструментарий Warp Connect Peer для взаимодействия с LAN Server 4.0, позволяющий разделять между компьютерами, входящими в сеть, файлы, принтеры и модемы. В начале 1996 года был выпущен Warp Server, объединивший OS/2 Warp, LAN Server 4.0 (с добавлениями и исправлениями) и SystemView for OS/2. Этот комплект предназначен для создания файл-серверов и серверов печати. Представлены также службы удалённого доступа и резервного копирования. Warp Server поддерживает симметричную мультипроцессорность (SMP).
Warp 4 (Мерлин) (сентябрь 1996 года)
Переработан интерфейс Workplace Shell, добавлена поддержка выполнения программ на языке программирования Java, функции голосовой навигации и голосового ввода информации VoiceType Navigation and Dictation. Сетевые средства Warp 4 позволяли ей работать с большим количеством сетей: LAN Server, Windows, Novell Netware, PCLAN, IPX-SPX, LANtastic и т. д. Поддерживались протоколы TCP/IP, SNA, NetBIOS.
Также в состав этой версии ОС включены служба удалённого доступа LAN Distance, служба управления системой TME10 Netfinity с поддержкой Desktop Management Interface, сервис для мобильных пользователей Mobile Office Services.
Недостатками OS/2 в этот период являются малое количество программ сторонних разработчиков, особенно ориентированных на домашнего пользователя, в том числе игр. Причиной этого была политика IBM, не предпринимавшей особых усилий для того, чтобы побудить разработчиков создавать программы для OS/2.
Aurora (Аврора) — полуофициальное название серверной ветви OS/2 4.5.x, выпущенной следом за Warp 4 (Мерлин). Первоначально имела название "OS/2 Warp Server for e-Business" (OS/2 WSeB) и была выпущена в апреле 1999 года (версия Warp 4.5). Иногда её неправильно называют "Warp 5". Добавлена поддержка журналируемой файловой системы JFS, поддерживается до 64 процессоров, обновлены практически все компоненты системы. Были выпущены также два пакета обновлений Aurora Convenience Pack: ACP1 (версия Warp 4.51) и ACP2 (версия Warp 4.52). В 2003 году вышел последний третий сервис-пак — ACP3 4.53, но компания IBM более не выпускала дистрибутивы со встроенным данным сервис-паком.
eComStation
Соревнование с Windows.
После того, как IBM и Microsoft разошлись в разные стороны, Microsoft сконцентрировалась на создании Windows NT, а сама OS/2 продолжала разрабатываться в фирме IBM, которая всё же не уделяла этой операционной системе должного внимания.
21 мая 1990 года вышла Windows 3.0. За первый месяц её копий было продано больше, чем копий OS/2 за целых три года. Microsoft занимает доминирующее положение на рынке ОС для платформы IBM PC.
В 1991 году Microsoft прекратила участие в разработке OS/2, разрабатываемая аппаратно-независимая ОС переименована из «OS/2, Version 3» в «Windows NT».
Версию OS/2 Warp 3 всерьёз рассматривали как достойного конкурента Windows, но версия 4 уже не претендовала на это из-за рекламной деятельности Microsoft. 26 октября 1996 года вышла следующая версия — OS/2 Warp 4.0 (Мерлин). В 1999 году появляется OS/2 Warp Server for e-business (кодовое название «Аврора», версия системы — 4.5).
Интересен также тот факт, что в процессе совместной работы специалисты Microsoft создавали для Windows существенно более удобный конечному пользователю код, относительно такового для OS/2 v1.10SE и OS/2 v1.20. Таков, в частности, весь код ядра и интерфейсов, относящийся к драйверам устройств.
Пример процедуры установки принтера в ранних версиях OS/2:
Microsoft, официально отказавшись от поддержки OS/2, продолжала внимательно следить за развитием этой операционной системы. Многие детали интерфейса OS/2 IBM и Microsoft перешли в новую ОС Microsoft — Windows 95.
Прекращение поддержки.
OS/2 приобрела некоторую популярность в среде корпоративных клиентов и сетевиков. В России OS/2 не получила широкого распространения.
Особой популярностью в качестве домашней операционной системы OS/2 никогда не пользовалась, оставаясь в тени Windows, и, позднее, Windows NT. Тем не менее усилия как самой IBM, так и множества корпоративных и независимых разработчиков программного обеспечения не прошли даром — OS/2 являлась стабильной системой с предсказуемым поведением и хорошим набором системных и прикладных программ. При этом OS/2 представляла собой самостоятельную линию развития операционных систем, в своё время отличаясь от Windows NT существенно меньшими требованиями к аппаратным средствам, а от Linux — лучшей поддержкой программ для DOS и Win16.
Поддержка пользователей осуществлялась до 31 декабря 2001 года. После этого срока поддержка осуществляется только для тех пользователей, которые заключили дополнительный договор на обслуживание.
Области применения OS/2.
На постсоветском пространстве основные области использования OS/2 сводятся к следующему:
Некоторые особенности системы.
Файловая система.
В OS/2 реализован механизм подключаемых файловых систем (Installable File System, IFS). Это означает, что для работы с той или иной файловой системой нужно просто загрузить соответствующий драйвер. Штатная «высокопроизводительная файловая система» (HPFS — High Performance File System) поддерживает разделы диска до 64 гигабайт (это ограничение драйвера, сама файловая система поддерживает до двух терабайт) и позволяет использовать имена файлов длиной до 255 символов. HPFS экономно расходует дисковое пространство (размер кластера составляет 512 байт), крайне мало подвержена фрагментации и отличается стабильностью. В последних версиях OS/2 имеется менеджер логических томов (LVM), позволяющий объединять несколько физических разделов (в том числе находящихся на разных дисках) в единый том, и включена поддержка более быстрой журналируемой файловой системы JFS, поддерживающей тома больших объёмов (до двух терабайт).
Помимо входящих в поставку IFS для FAT, HPFS, JFS, ISO9660 (CDFS) и UDF существуют также монтируемые файловые системы сторонних производителей для VFAT, FAT32, EXT2, NTFS, HFS, AEFS и др.
Графический интерфейс пользователя.
В OS/2 в качестве штатного интерфейса используется Workplace Shell (WPS).
В отличие от Microsoft Windows, где графические и текстовые программы используют две разные кодировки («кодировка DOS» и «кодировка Windows»), в OS/2 везде используется кодировка DOS (для русской локализации — CP866). Исключение составляют приложения Windows, запускаемые под OS/2.
Поддержка Юникода, однако, в «родных» приложениях OS/2 практически отсутствует — в частности, в именах файлов, хотя файловая система JFS хранит их в Unicode (ср.: FAT32 в Windows).
Командная строка.
GUI в OS/2 можно не загружать, получая при этом работоспособную систему в режиме командной строки. Штатная оболочка может быть заменена на более продвинутый аналог (4os2 или портированные из юниксов sh, bash и т. п.). Это позволяет получить работоспособную систему на одной-двух дискетах.
REXX.
REXX — язык для написания скриптов. Это язык с весьма несложным синтаксисом, разработанный в IBM. Версия REXX для OS/2 позволяет писать как консольные, так и графические приложения, выполнять команды OS/2, а также обращаться к API OS/2. Помимо этого, многие программы имеют REXX-API, позволяющее создавать скрипты для управления работой этих программ (ср.: Visual Basic for Applications в Windows и Bash и т. п. в Linux).
TCP/IP.
OS/2 имеет UNIX-подобный стек TCP/IP (последние версии являются полностью BSD4.4-совместимыми), с привычными для пользователей UNIX-подобных систем утилитами и демонами, такими как arp, ifconfig, netstat, ppp, telnetd, sendmail и т. д. Стек TCP/IP в OS/2 содержит клиент SOCKS и портированный из AIX файрвол.
Приложения DOS, Win16 и Win32.
OS/2 способна выполнять приложения DOS и Win16. К примеру, OS/2 позволяет загружать с дискеты или её образа на диске произвольную версию DOS или передавать в использование программе 736 Кб основной памяти. Для особо «капризных» программ существуют различные параметры настройки, контролирующие практически все аспекты работы сессии DOS.
Приложения Windows могут быть запущены как в полноэкранной сессии Win-OS/2 (ничем не отличается от Windows 3.1), так и поверх рабочего стола OS/2. В Win-OS/2 можно работать с программами, требующими для работы Win32s extender (Photoshop 3.0x, MS Internet Explorer/Win16).
Некоторое время развивался проект Odin, позволяющий запускать приложения современных версий Windows либо конвертировать их в родные OS/2-приложения. Последний выпуск Odin был сделан 17 февраля 2013 года.
Java.
По тестам VolanoMark 2.1.2, IBM JDK 1.1.7 for OS/2 в своё время являлась наиболее продуктивной Java-машиной на платформе x86. Java-машина для OS/2 бесплатна и поставляется вместе с системой.
Программы UNIX.
Для облегчения портирования Unix/Linux-программ, а также разработки родных приложений в Unix-подобном стиле, используется набор библиотек emx, распространяемый в соответствии с лицензией GNU GPL. Если Unix-программа не завязана на конкретные особенности реализации ядра (часто бывает с приложениями для Linux), то в большинстве случаев её можно скомпилировать под OS/2. Впрочем, если программа рассчитана на POSIX-совместимость, её компиляция под OS/2 может оказаться проблематичной.
Существуют также несколько реализаций X Window System для OS/2, наиболее распространённой из которых является XFree86-OS/2.
Работа в сети.
В комплект поставки OS/2 Warp Connect и OS/2 Warp 4 (Merlin) входят клиенты сетей Novell NetWare, Microsoft Network и NFS.
OpenGL.
В OS/2 Warp 4.0 и выше внедрена программная реализация OpenGL. Универсальный видеодрайвер Scitechsoft SNAP реализует «software optimized» поддержку OpenGL.
Драйверы.
Драйверы к различной аппаратуре предоставлялись на официальном сайте IBM, но в связи с прекращением поддержки ныне удалены.
Дальнейшее развитие.
1 ноября 2005 года сообщество энтузиастов OS/2 направило в IBM петицию с просьбой открыть исходные коды этой операционной системы. Несмотря на то, что петицию подписали 11 613 человек, IBM её проигнорировала. В ноябре 2007 года сообщество направило повторную петицию, которую подписали 3744 человека. 16 января 2008 года IBM ответила отказом, мотивируя своё решение техническими, юридическими, а также бизнес-причинами. IBM до сих пор получает отчисления с продаж OS/2, распространяемой как eComStation.
В рамках проекта Core/2 существуют два действующих направления по развитию OS/2:
В ноябре 2015 года компанией Arca Noae было заключено лицензионное соглашение с IBM на выпуск и продажу нового дистрибутива для современного аппаратного обеспечения на кодовой базе OS/2, получившее кодовое имя Blue Lion. Позднее этот проект вышел на коммерческий рынок под названием ArcaOS и рассматривается как полноценная замена старым версиям OS/2 4.5.

</doc>
<doc id="971" url="https://ru.wikipedia.org/wiki?curid=971" title="Vorbis">
Vorbis

Vorbis — свободный формат сжатия звука с потерями, официально появившийся летом 2002 года. По функциональности и качеству аналогичен таким кодекам, как AAC, AC3 и VQF, превосходящим MP3. Психоакустическая модель, используемая в Vorbis, по принципам действия близка к MP3 и подобным, однако математическая обработка и практическая реализация этой модели существенно отличаются, что позволило авторам объявить свой формат совершенно независимым от всех предшественников.
Контейнер.
Для хранения аудиоданных в формате Vorbis чаще всего применяется медиаконтейнер Ogg, такой файл обычно имеет расширение .ogg и называется двойным именем «Ogg/Vorbis» или «Ogg Vorbis». Однако «Ogg Vorbis» называют и сам кодек без контейнера, так как он является частью проекта Ogg.
Применение.
На 2013 год распространён существенно меньше, чем MP3. Используется в компьютерных играх, для подкастов.
Vorbis идеален для применения в качестве звуковых дорожек фильмов, так как не изменяет их длину при переменном битрейте, что позволяет сохранять синхронность с видеодорожкой, и применим для многоканального звука (например, 6-канальный звук).
Используется для звуковой дорожки файлов в формате WebM вместе с видеокодеком VP8 (с VP9 в формат добавили поддержку нового свободного кодека Opus).
Метаданные.
Формат изначально разрабатывался с возможностью потокового вещания. Это даёт формату достаточно полезный побочный эффект — в одном файле можно хранить несколько композиций с собственными метками. При загрузке такого файла в плеер должны отобразиться все композиции, будто их загрузили из нескольких различных файлов.
Формат имеет гибкую систему меток. Заголовок меток легко расширяется и позволяет включать тексты любой длины и сложности (например, текст песни), перемежающиеся изображениями (например, фотографиями обложек альбомов). Текстовые метки хранятся в UTF-8, что позволяет писать на нескольких языках одновременно и исключает возможные проблемы с кодировками.
Битрейт.
Ogg Vorbis по умолчанию использует переменный битрейт, при этом значения последнего не ограничены какими-то жёсткими значениями, и он может варьироваться даже на 1 kbps. При этом стоит заметить, что форматом жёстко не ограничен максимальный битрейт, и при максимальных настройках кодирования он может варьировать от 500 до 1000 кбит/с. Такой же гибкостью обладает частота дискретизации — пользователям предоставляется любой выбор в пределах от 2 до 192 кГц.
Цель разработки.
Vorbis был разработан сообществом «Xiph.Org» для того, чтобы заменить все платные запатентованные аудиоформаты. Несмотря на то, что это самый молодой формат из всех конкурентов MP3, Ogg Vorbis имеет полную поддержку на всех популярных платформах (Microsoft Windows, Linux, Apple Mac OS, Android, PocketPC, Palm, Symbian, DOS, FreeBSD, BeOS и др.), а также большое количество аппаратных реализаций.
Проект Ogg.
Vorbis является частью мультимедиапроекта Ogg, в который также входят свободные кодировщики: Speex — для сжатия голоса; FLAC — для сжатия звука без потерь; Theora — для сжатия видео.
Для хранения звука в Vorbis используется формат‐контейнер Ogg.
Реализации.
Благодаря открытой модели разработки и распространения существуют несколько вариантов программных кодеров и декодеров Vorbis.
Официальные программы и библиотеки.
Официальная реализация от разработчиков стандартов Ogg и Vorbis, фонда Xiph.Org, распространяется под лицензиями типа BSD и GNU LGPL.
Официальной программой-кодировщиком является свободная oggdropXPd, существующая в разных вариантах исполнения: используются библиотеки libVorbis или aoTuVb, и оптимизация под разные процессоры. Последняя версия libVorbis 1.3.7 выпущена 6 июля 2020 года.
aoTuV.
Версия от японского разработчика Aoyumi. Благодаря улучшенной психоакустической модели достигается значительно более высокое качество звука, при этом aoTuV не нарушает совместимости с официальным стандартом. Хотя Aoyumi не является официальным разработчиком кодека Vorbis, его заслуги оказались настолько высоки, что в официальные библиотеки версии 1.1.0 от 22 сентября 2004 года был добавлен разработанный им код (beta 2). Последняя версия — Beta 6.03 от 25 апреля 2011 года. Однако, код aoTuV использовался в официальных и сторонних реализациях последующих версий кодера.
Lancer.
Японский разработчик Nyaochi работает над увеличением скорости кодирования в формат Vorbis. Его версия, называемая Lancer, основывается на актуальных версиях aoTuV. Благодаря оптимизациям кода под современные процессоры достигается существенное увеличение скорости кодирования и декодирования (на десятки процентов, в некоторых условиях в несколько раз). Качество при этом страдает весьма незначительно. Его последняя разработка датирована 10 ноября 2006 года. Код Nyaochi также использовался в сторонних реализациях последующих версий кодировщика.
Tremor.
Реализация декодера Ogg Vorbis с использованием чисел с фиксированной запятой, созданная для платформ, которые не поддерживают числа с плавающей запятой.
Будущее кодека.
Разработчик проекта Ogg фонд Xiph.Org Foundation рекомендует использовать вместо Vorbis новый royalty-free кодек Opus.

</doc>
<doc id="973" url="https://ru.wikipedia.org/wiki?curid=973" title="PHP">
PHP

PHP ( — «PHP: препроцессор гипертекста»; первоначально PHP/FI (Personal Home Page / Form Interpreter), а позже названный  — «Инструменты для создания персональных веб-страниц») — скриптовый язык общего назначения, интенсивно применяемый для разработки веб-приложений. В настоящее время поддерживается подавляющим большинством хостинг-провайдеров и является одним из лидеров среди языков, применяющихся для создания динамических веб-сайтов.
Язык и его интерпретатор (Zend Engine) разрабатываются группой энтузиастов в рамках проекта с открытым кодом. Проект распространяется под собственной лицензией, несовместимой с GNU GPL.
Область применения.
В области веб-программирования, в частности, серверной части, PHP — один из популярных сценарных языков (наряду с JSP, Perl и языками, используемыми в ASP.NET).
Популярность в области построения веб-сайтов определяется наличием большого набора встроенных средств и дополнительных модулей для разработки веб-приложений. Основные из них:
По состоянию на 2022 год используется сотнями тысяч разработчиков; согласно рейтингу корпорации TIOBE, базирующемуся на данных поисковых систем, в декабре 2022 года PHP находился на 10 месте по популярности среди языков программирования.
Входит в LAMP — распространённый набор ПО для создания и хостинга веб-сайтов (Linux, Apache, MySQL, PHP), а также LEMP — не менее распространённый набор ПО (Linux, Nginx, MySQL, PHP).
Среди сайтов, использующих PHP — Facebook, Wikipedia, Yahoo!, Baidu.
Также, на PHP написаны такие системы управления сайтами (CMS) и фреймворки (CMF), как Drupal, Joomla, Laravel, Symfony, WordPress, Yii и другие.
Поддержка версий.
Каждая новая минорная ветвь разработки PHP (например, 8.4), разрабатывается в течение одного года и, как правило, в период с ноября по декабрь выходит очередной релиз первоначальной стабильной версии, которая бесплатно поддерживается в течение 4 лет. В течение 2 лет осуществляется активная поддержка ветви, обнаруженные ошибки и проблемы безопасности исправляются и выпускаются обновления в виде регулярных точечных релизов.
После окончания двухлетнего периода активной поддержки каждая ветвь получает временную поддержку в течение ещё 2 дополнительных лет только для критических обновлений, касающихся проблем безопасности. Релизы в течение этого периода выходят по мере необходимости: может быть несколько релизов или ни одного, в зависимости от количества отчётов об ошибках.
Начиная с версии PHP 8.1, по истечении 4 лет с релиза первоначальной стабильной версии, срок поддержки ветви завершается 31 декабря соответствующего года (наступает конец жизни ветви — "End Of Life", также обозначается "EOL") и она больше не поддерживается. В случае, если релиз первоначальной стабильной версии выйдет с задержкой (после нового года), то дополнительный год поддержки не предоставляется: например, релиз ветви PHP 8.4 запланирован на ноябрь 2024 года, но даже если произойдёт задержка и дата релиза будет перенесена на 2025 год, то срок бесплатной поддержки ветви все равно будет завершён 31 декабря 2028 года. Использование устаревших версий PHP из неподдерживаемых ветвей не рекомендовано, потому что это может привести к уязвимостям в безопасности и ошибкам, которые были исправлены в более поздних версиях.
Zend предлагает платную активную долгосрочную поддержку — PHP Long Term Support (PHP LTS):
Срок платной поддержки каждой ветви начиная с релиза первоначальной стабильной версии составляет, как минимум, 5 лет.
Распределение версий PHP.
W3Techs сообщает, что по состоянию на 23 августа 2024 года (через 9 месяцев после релиза PHP 8.3) «PHP используется на 75,9 % всех веб-сайтов, чей серверный язык программирования мы знаем». Также сообщается, что из всех сайтов, использующих PHP:
Это означает, что по состоянию на 23 июля 2024 года подавляющее большинство сайтов — 75,89 % (-1,55 % за месяц), использующих PHP, могут быть уязвимы для взлома; хотя в рамках PHP LTS от Zend ветви  8.0,  7.4,  7.3 и  7.2 (в совокупности 57,74 %) могут поддерживаться, кроме того некоторые дистрибутивы Linux, такие как Ubuntu и Debian, также предоставляют коммерческую поддержку и платные исправления безопасности, например, для ветви 7.4.
Устаревшие и неподдерживаемые ветви PHP, включая  7.1,  7.0, и (в совокупности 18,15 %) настоятельно не рекомендуются к использованию.
Дополнительные возможности.
Язык автоматически поддерживает HTTP Cookies в соответствии со стандартами Netscape. Это позволяет проводить установку и чтение небольших сегментов данных на стороне клиента. Работа с Cookies организована посредством сеансов (сессий). У сессий есть срок действия (после его истечения данные удаляются), в сессиях можно хранить и редактировать разные типы данных, в том числе сериализованные — пропущенные через serialize (процесс происходит автоматически), PHP-объекты.
Создание GUI-приложений.
PHP не ориентирован на создание десктопных приложений, но есть потребность в создании интерфейсов для настройки серверов, беспрерывного выполнения, отладки скриптов (сценариев), управления локальными и тестовыми серверами, и т. п. Из-за этого и возникли решения данной проблемы.
Расширения.
Основное использование расширений — надстройки библиотек интерфейсов пользователя (UI-библиотек).
Расширения условно делятся на три группы:
Разработаны расширения, такие, как двусторонняя обёртка для использования других языков при написании расширений PHP, и наоборот. Например, PSV Component Library, — проект, состоящий из трёх подпроектов:
Среды разработки (IDE).
Есть место и полноценным средам разработки для GUI PHP:
Первопроходцем в этой категории является студия Dev PHP-IDE, которая использовала Kylix (Delphi) в качестве основы интерфейса и php-cli для создания пользовательских программ.
Она включала в себя редактор кода, несколько инструментов и визуальный просмотр HTML-страниц.
Впервые была представлена в 2002 году, сейчас имеет 3 стабильные версии, но разработка не продолжается — остановилась из-за гибели главного разработчика в автокатастрофе.
После DevPHP IDE появилось расширение — набор компонентов для CodeGear Rad Studio 2009 на базе php4delphi с некоторыми улучшениями (веб-элементы, инспектор, отладчик), поддержка её длилась в течение четырёх версий, вторая из которых вошла в платное расширение Rad Studio 2010: была возможность использовать скрипты, задавать стиль веб-компонентам, просматривать стили и веб-страницы до сборки программы, запускать локальный сервер, собирать программу, как отдельное приложение и отлаживать код. С выходом Delphi XE расширение получило название RADPHP Xe. Далее сама студия стала называться Embarcadero Delphi, и работа над данным расширением была приостановлена на неопределённый срок.
В 2009 году на базе php4delphi началась разработка среды для создания графических PHP-приложений, к разработке которой позже присоединился Ростислав Романов. Среда получила название PHP DevelStudio, первой опубликованной версией стала 0.1.7. DevelStudio имела небольшое количество компонентов в наборе инструментов и работала на устаревшем PHP 4. Во второй версии DevelStudio получила поддержку PHP 5. Были добавлены потоки, произведены множественные изменения и улучшения. Код сборки программ стал закрытым, предыдущие версии программы и сообщения на форуме были удалены с целью воспрепятствования злоумышленникам.
Вторая версия DevelStudio так же получила набор компонентов AlphaControls, вследствие чего её стали использовать для создания вредоносных программ в силу её простоты и понятности. Популярные на то время антивирусы (MacAffee, AVG, Avira) стали распознавать любые скомпилированные в DevelStudio программы как вирусы.
Через некоторое время автор AlphaControls обратился с жалобой к разработчикам DevelStudio, и набор компонентов был полностью удалён из среды, однако сохранился в уже существовавшей версии, удалить которую с форума в этот раз не представлялось возможным.
На момент 2012 года вышла последняя версия среды — 3.0.2, где появился новый набор компонентов, в том числе браузер Chromium вместо IE, что привлекло внимание веб-разработчиков и пользователей среды «Алгоритм». На тот момент компиляция программ в «Алгоритме» была платной, поэтому DevelStudio как новая и бесплатная среда разработки переманила на себя бо́льшую часть аудитории.
В 2014 году начались первые попытки по восстановлению среды, в этот раз со стороны сообщества. В конце 2018 года исходный код был восстановлен и доступен в GitHub.
В 2019 году сообщество обратилось к создателю DevelStudio с целью изменения политики распространения среды, вследствие чего она стала доступной для обновления и редактирования. Из-за жалоб на отсутствие ссылок на использованные библиотеки (DCEF, PHP4Delphi, TSizeCtrl, SynEdit) форум был удалён, а одна из страниц с описанием среды была перенаправлена на главную страницу сайта. С этого момента DevelStudio официально принадлежит сообществу.
Параллельно с этим главный разработчик DevelStudio начал создавать «реинкарнацию» предыдущей среды. Он взял за основу графическую библиотеку JavaFX, в результате вышла полностью новая среда, с поддержкой CSS, но без полной поддержки библиотеки Zend PHP — проект был основан на собственном языке jPHP. Его особенностью является, работа на JVM, JIT-компилятор, поддержка юникода, многопоточность и объектно-ориентированная стандартная библиотека.
В 16-й версии среда DevelNext получила поддержку php 7, а параллельно с этим jPHP был расширен энтузиастом для разработки под ОС Android.
На данный момент автор и энтузиасты трудятся над 2020 версией (ранее 17-я).
В 2015 году Александр Казанцев начал изучать алгоритмы разработки интерфейсов и создал расширение php_qml, что давало возможность использовать виджеты из библиотеки QT, но работало оно только под Windows.
С этого началась разработка PHPQt, первые версии не обратили особого внимания со стороны веб-разработчиков, поэтому автор начал углублённо улучшать расширение.
28 июля 2015 года был опубликован первый вариант компилятора проектов, на тот момент это был простой исполнитель скриптов(сценариев), который прикреплял php-код к стабу (подобно DevelStudio), и имел зависимость от Windows API, на этой стадии поддерживались уже почти все виджеты и многопоточность, была лёгкая оптимизация php-кода. С этого момента движок стали называть PQEngine,
3 августа 2016 года вышла пятая версия компилятора приложений (PqBuilder), что перешёл на базу PlastiQ и имел поддержку уже новейшего, на тот момент, php 7, проекты получили более полноценный компилятор и уже не требовали наличия PqEngine.dll вблизи с исполняемым файлом, вместо этого визуальные библиотеки стали добавляться динамично — как файлы, а не вшиваться в PQEngine.dll. Такой шаг был предпринят для совместимости с другими системами и оригинальными библиотеками Qt.
С появлением шестой версии проект стал дополнением для среды Qt Creator, а компилятор стал всего-навсего оптимизатором кода перед конечной сборкой программы. Появился полноценный редактор интерфейса, подсказки в редакторе кода и начала создаваться документация. С этого момента сделали анонс про создание среды PqStudio, но её разработка не зашла далеко.
В 2018 году появился проект, объединяющий возможности Windows Forms (.NET Framework) и PHP 7. Его разработка медленными темпами ведётся и сейчас. На текущий момент в движке доступны практически все функции для ООП. Среда находится на стадии приватной разработки. К исполняемому файлу по умолчанию прилагается php7ts.dll.
Подключение PHP к проекту.
Также существуют расширения и для противоположного применения — подключения PHP к проекту на другом языке программирования: Phalanger (C#, php с 5.4 по 7), Peachpie] (C#, php 7), PHP4Delphi (Lazarus, Delphi, C#, C, C++, php 5.6, JPHP (Java, php 7.0), PHPly (Python, php 5.6)
История.
PHP Tools, FI, Construction Kit.
Разработка PHP началась в 1993 году когда датский программист Расмус Лердорф разработал на C набор CGI-скриптов для учёта посетителей его онлайн-резюме, обрабатывающий шаблоны HTML-документов. Лердорф назвал набор "Personal Home Page Tools" (Инструменты для "личной домашней страницы"). Вскоре функциональности перестало хватать, и Лердорф разработал новый интерпретатор шаблонов "PHP/FI" ( — «персональная домашняя страница / интерпретатор форм»).
8 июня 1995 года вышел Personal Home Page (PHP Tools) version 1.0 — первый публичный релиз с открытым исходным кодом. Эта новая реализация была способна взаимодействовать с базами данных и многое другое, что создавало фреймворк, с помощью которого пользователи могли создавать простые динамические веб-приложения.
PHP 2.
В 1997 году после длительного бета-тестирования вышла вторая версия обработчика, написанного на C — PHP/FI 2.0. Её использовали всего 1 % (приблизительно 50 тысяч) всех интернет-доменов мира, так как к моменту выпуска языка в релиз, парсер языка был полностью переписан двумя программистами из Тель-Авива: Энди Гутмансом и Зивом Сураски.
PHP 3 и Zend Engine.
Версия PHP 3.0 подверглась значительной переработке, определившей современный облик и стиль языка программирования. В 1997 году два израильских программиста, Энди Гутманс и Зеев Сураски, полностью переписали код интерпретатора. PHP 3.0 был официально выпущен в июне 1998 года.
Одной из сильнейших сторон PHP 3.0 была возможность расширения ядра дополнительными модулями. Впоследствии интерфейс написания расширений привлёк к PHP множество сторонних разработчиков, работающих над своими модулями, что дало PHP возможность работать с огромным количеством баз данных, протоколов, поддерживать большое число API. Большое количество разработчиков привело к быстрому развитию языка и стремительному росту его популярности. С этой версии акроним "php" расшифровывается как «PHP: hypertext Preprocessor», вместо устаревшего «Personal Home Page».
К зиме 1998 года, практически сразу после официального выхода PHP 3.0, Энди Гутманс и Зеев Сураски начали переработку ядра PHP. В задачи входило увеличение производительности сложных приложений и улучшение модульности базиса кода PHP. Новый движок, названный Zend Engine, успешно справлялся с поставленными задачами и впервые был представлен в середине 1999 года.
PHP 4.
PHP 4.0, основанный на движке Zend Engine и принёсший с собой набор дополнительных функций, официально вышел в мае 2000 года. В дополнение к улучшению производительности, PHP 4.0 имел ещё несколько ключевых нововведений, таких как поддержка сессий, буферизация вывода, более безопасные способы обработки вводимой пользователем информации и несколько новых языковых конструкций.
PHP 5.
PHP 5 вышел 13 июля 2004 года. Изменения включают обновление ядра Zend ("Zend Engine 2"), что существенно увеличило эффективность интерпретатора. Введена поддержка языка разметки XML. Полностью переработаны функции ООП, которые стали во многом схожи с моделью, используемой в Java. В частности, введён деструктор, открытые, закрытые и защищённые члены и методы, окончательные члены и методы, интерфейсы и клонирование объектов.
В последующих версиях также были введены пространства имён, замыкания и целый ряд достаточно серьёзных изменений, количественно и качественно сравнимых с теми, которые появились при переходе на PHP 5.0.
PHP 6.
Разработка PHP 6 велась с октября 2006 года. Было сделано множество нововведений, как, например, исключение из ядра регулярных выражений POSIX и «длинных» суперглобальных массивов, удаление директив "safe_mode", "magic_quotes_gpc" и "register_globals" из конфигурационного файла php.ini. Одним из основных новшеств должна была стать поддержка Юникода. Однако в марте 2010 года разработка PHP 6 была признана бесперспективной из-за сложностей с поддержкой Юникода. Исходный код PHP 6 перемещён на ветвь, а основной линией разработки стала версия 5.4.
PHP 7.
В 2014 году было проведено голосование, по результатам которого следующая версия получила название PHP 7. Выход новой версии планировался в середине октября 2015 года. В марте 2015 года Zend представили инфографику, в которой описаны основные нововведения PHP 7.
3 декабря 2015 года было объявлено о выходе PHP версии 7.0.0.
Новая версия основывается на экспериментальной ветви PHP, которая изначально называлась "phpng" ( «следующее поколение»), и разрабатывалась с упором на увеличение производительности и уменьшение потребления памяти. В новой версии добавлена возможность указывать тип возвращаемых из функции данных, добавлен контроль передаваемых типов для данных, а также новые операторы.
13 июня 2019 вышла версия PHP 7.4. В ядро были добавлены типизированные свойства и стрелочные функции, а также ограниченная ковариантность возвращаемого типа и контравариантность типа аргумента.
PHP 8.
PHP версии 8.0 была выпущена 26 ноября 2020-го. Главными нововведениями стали: поддержка union-типов, JIT-компиляция и атрибуты (также известны как аннотации), как альтернатива конструкции switch было добавлено выражение match, также был добавлен новый оператор Nullsafe.
9 июля 2020 года Дэйл Хирт (), менеджер проекта PHP в Microsoft, в рассылке codice_1 выпустил сообщение о том, что после выпуска версии PHP 8.0 Microsoft прекратит поддержку разработки этого языка программирования для Windows. Специалисты Microsoft занимались компиляцией бинарных версий интерпретатора для ОС Windows и тестированием их безопасности. В сообществе разработчиков PHP сообщили, что примут все необходимые меры, чтобы найти в ближайшее время альтернативный вариант для организации поддержки PHP 8.0 и выше для Windows, например, своими силами.
В ноябре 2025 года выйдет версия 8.5.
Синтаксис.
Синтаксис PHP подобен синтаксису языка Си. Некоторые элементы, такие как ассоциативные массивы и цикл codice_2, заимствованы из Perl.
Лексический анализ PHP осуществляется посредством утилиты re2c,
утилита генерирует быстрые и легко встраиваемые лексеры.
Для написания простейшего скрипта не требуется описывать какие-либо переменные, используемые модули и т. п. Любой скрипт может начинаться непосредственно с оператора codice_3, а заканчиваться оператором codice_4. Закрывающий оператор не обязателен и его рекомендуется опускать, чтобы избежать проблем с отправкой лишних символов в поток вывода после выполнения основного кода.
Простейшая программа Hello world на PHP выглядит следующим образом:
Также возможен более короткий вариант вывода строки:
Открывающий тег вида codice_5 используется для сокращённой записи конструкций, используемых для вывода строки.
Стоит обратить внимание, что хоть codice_5 и является сокращённой формой codice_7, однако не является «сокращённым тегом» (таким как codice_8). Сокращённые теги были помечены устаревшими и их использование крайне не рекомендуется, в отличие от codice_5, использование которого не будет вызывать проблем с совместимостью и переносимостью кода.
PHP исполняет код, находящийся внутри ограничителей, таких как codice_10. Всё, что находится вне ограничителей, выводится без изменений. В основном это используется для вставки PHP-кода в HTML-документ, например, так:
До версии 7.0 допускалось использование ограничителей языка программирования ASP codice_11 и codice_12. Работа сокращённых конструкций определяется в конфигурационном файле php.ini.
Имена переменных начинаются с символа codice_13, тип переменной объявлять не нужно. Имена переменных и констант чувствительны к регистру символов. Имена классов, методов классов и функций к регистру символов не чувствительны. Переменные обрабатываются в строках, заключённых в двойные кавычки, и heredoc-строках (строках, созданных при помощи оператора «&lt;). Переменные в строках, заключённых в одинарные кавычки и nowdoc не обрабатываются.
Инструкции разделяются с помощью "точки с запятой" (codice_14), за исключением некоторых случаев, после объявления конструкции if/else и циклов.
Переменные в функцию можно передавать как по значению, так и по ссылке (используется знак codice_15).
PHP поддерживает три типа комментариев: в стиле языка Си (ограниченные codice_16), C++ (начинающиеся с codice_17 и идущие до конца строки) и оболочки UNIX (с codice_18 до конца строки).
Типы данных.
PHP является языком программирования с динамической типизацией, не требующим указания типа при объявлении переменных, равно как и самого объявления переменных.
К скалярным типам данных относятся:
К нескалярным типам относятся:
Диапазон целых чисел (int) в PHP зависит от платформы (для 32-битной архитектуры диапазон числа не превышает 32 бита, то есть, от −2 147 483 648 до 2 147 483 647). Числа можно задавать в десятичной, двоичной, восьмеричной и шестнадцатеричной системах счисления. Диапазон вещественных чисел (float) также зависит от платформы (для 32-битной архитектуры диапазон позволяет оперировать числами от ±1.7×10−308 до ±1.7×10+308).
PHP предоставляет разработчикам логический тип (bool), способный принимать только два значения codice_19 («истина») и codice_20 («ложь»). При преобразовании в логический тип число 0, пустая строка, ноль в строке «0», codice_21 и пустой массив считаются равными codice_20. Все остальные значения автоматически преобразуются в codice_19.
Специальный тип null предназначен для переменных без определённого значения. Единственным значением данного типа является литерал codice_21. Тип null принимают неинициализированные переменные, переменные инициализированные константой codice_21, а также переменные, удалённые при помощи конструкции codice_26.
Ссылки на внешние ресурсы имеют тип «ресурс» (resource). Переменные данного типа, как правило, представляют собой дескриптор, позволяющий управлять внешними объектами, такими как файлы, динамические изображения, результирующие таблицы базы данных и т. п. По мере развития языка стандартная библиотека постепенно дорабатывается и ресурсы заменяются объектами. Таким образом планируется полностью избавиться от этого типа.
Массивы (array) поддерживают числовые и строковые ключи и являются гетерогенными. Массивы могут содержать значения любых типов, включая другие массивы. Порядок элементов и их ключей сохраняется. Не совсем корректно называть php-массивы массивами, на самом деле это, скорее всего, упорядоченный хеш. Возможно неожиданное поведение при использовании цикла codice_27 со счётчиком вместо codice_2. Так, например, при сортировке массива с численными индексами функциями из стандартной библиотеки, сортируются и ключи тоже.
Типизация.
Язык допускает типизацию аргументов, возвращаемых значений функций и методов классов, а также, начиная с версии 7.4 типизацию полей классов. Включение строгого режима отключает неявные преобразования типов в данных участках кода, что приближает поведение языка к языкам со строгой типизацией.
Типы codice_29, codice_30, codice_31, codice_32, codice_33, codice_34 и некоторые другие являются допустимыми определениями типа аргумента, поля класса или возвращаемого значения. Также допускается использовать имена классов, либо интерфейсов для определения конкретной реализации. Использованиеcodice_35 для определения типа не допускается.
Современный PHP реализует базовую поддержку алгебраических типов данных и позволяет использовать как конъюнкцию, так и дизъюнкцию при определении типа. Язык не позволяет использовать псевдонимы типов, однако предоставляет несколько встроенных реализаций, которые в рамках PHP именуются «псевдотипами». Подобный термин в языке применяется к любому определению типа, который не является самостоятельным, применимым к значению, а реализован лишь как инструкция проверки типа в Zend VM (иногда применяется устоявшийся англицизм «тайп-хинт»).
К «псевдотипам» относятся:
Помимо проверок на соответствие типам встроенные «псевдотипы» могут реализовывать дополнительную логику проверок. Например, codice_36 должен соответствовать (одному из):
Функции.
PHP поддерживает как объявление именованных функций, так и анонимных функций первого класса, например:Стоит обратить внимание, что в случае анонимных функций различие состоит не только в визуальных отличиях, но и в способе захвата переменных внешнего контекста. Любая «короткая» форма записи является замыканием, в то же время длинная запись для реализации замыкания требует явного указания переменных внутри оператора codice_37 из внешнего контекста для их захвата:
Обращение к переменным и функциям.
Обращение к переменным осуществляется с помощью символа codice_13, за которым следует имя переменной. Данная конструкция может быть применена также для создания динамических переменных и функций. Например:
В PHP codice_39 и codice_40 хоть и выглядят похоже на функции, однако первое является оператором, а второе выражением (то есть codice_40 возвращает значение, в отличие от codice_39). При их использовании можно опустить скобки.
Суперглобальные массивы.
Суперглобальными массивами () в PHP называются предопределённые массивы, имеющие глобальную область видимости без использования директивы codice_43. Большая часть этих массивов содержит входные данные запроса пользователя (параметры GET-запроса, поля форм при посылке методом POST, куки и т. п.).
Все суперглобальные массивы, кроме codice_44 и codice_45, имеют устаревшие аналоги с длинными именами, которые доступны вплоть до версии 5.3. х (начиная с 5.4.0 были удалены). Таким образом, обращения codice_46 и codice_47 идентичны (за исключением области видимости: массивы с «длинными» именами не являются суперглобальными).
Объектно-ориентированное программирование.
Ключевое слово codice_77 было зарезервировано ещё в третьей версии языка.
В четвёртой версии стало возможно создавать классы и объекты на их основе. Однако принципы ООП поддерживались лишь частично, так например, все члены (переменные и методы) были открыты. К тому же создание объектов было дорогой операцией и работало медленно.
Начиная с пятой версии PHP обладает полной поддержкой ООП. Работа с классами была оптимизирована и теперь такой код работает достаточно быстро.
Класс в PHP объявляется с помощью ключевого слова codice_77. Методы и свойства класса могут быть общедоступными (codice_79, по умолчанию), защищёнными (codice_80) и скрытыми (codice_81). PHP поддерживает все три основных механизма ООП — инкапсуляцию, полиморфизм подтипов и наследование (родительский класс указывается с помощью ключевого слова codice_82 после имени класса). Поддерживаются интерфейсы (ставятся в соответствие с помощью codice_83). Разрешается объявление финальных, абстрактных методов и классов. Множественное наследование классов не поддерживается, однако класс может реализовывать несколько интерфейсов. Для обращения к методам родительского класса используется ключевое слово codice_84.
Начиная с версии 5.4.0 множественное наследование может быть реализовано с помощью механизма "особенностей" (). Особенности похожи на примеси (), за исключением того что для них нельзя напрямую создать экземпляр. Повторное использование кода заключено в использовании кода особенности в нескольких классах. Допускается использовать в одном классе несколько особенностей. Механизм особенностей имеет средства разрешения конфликтов имён. При запуске программы код особенности будет «вкомпилирован» в код содержащего его класса.
Классы в PHP имеют ряд «магических» методов (), начинающихся с двух символов подчёркивания — конструктор (codice_85, в версиях до 5.0 конструктором служил метод, одноимённый с классом) и деструктор (codice_86), а также методы чтения (codice_87) и записи (codice_88), свёртывания (codice_89) и развёртывания (codice_90), клонирования (codice_91) и др. Эти методы являются достаточно гибким инструментом: переопределяя их, можно добиться существенного изменения поведения объекта.
Все функции-члены реализованы виртуальными и потому все они являются методами.
Экземпляры класса создаются с помощью ключевого слова codice_92, обращение к полям и методам объекта производится с использованием оператора codice_93. Для доступа к членам класса из его методов используется переменная codice_94.
Начиная с пятой версии PHP объекты передаются по указателю:
Иногда также можно встретить упоминание, что объекты передаются по ссылке, однако это не так. Так как в PHP отсутствует понятие «указателя», то может применяться терминология «передачи по ссылке» в контексте передачи объектов в качестве аргументов функций или методов из-за схожести поведения. Отличия между передачей объектов по ссылке и по указателю выглядят следующим образом: 
«Paamayim Nekudotayim» (иврит: פעמיים נקודתיים) или просто «двойное двоеточие». Используя эту лексему, программист может обращаться к константам, статическим или перегруженным свойствам или методам класса.
При обращении к этим элементам извне класса программист должен использовать имя этого класса.
«Paamayim Nekudotayim» на первый взгляд может показаться странным словосочетанием для обозначения двойного двоеточия. Однако во время создания Zend Engine версии 0.5 (который входил в PHP3), Andi и Zeev выбрали именно это обозначение. «Paamayim Nekudotayim» действительно значит «двойное двоеточие» (дословно: «два раза двоеточие») на иврите. Это обозначение не менялось ни разу в течение всего времени разработки PHP.
Особенности интерпретатора.
PHP-скрипты обычно обрабатываются интерпретатором в порядке, обеспечивающем кроссплатформенность разработанного приложения:
Раньше, для увеличения быстродействия приложений было возможно использование специального программного обеспечения, так называемых акселераторов. Принцип их работы заключается в кэшировании однажды сгенерированного байт-кода в памяти и/или на диске, таким образом, из процесса работы приложения исключаются этапы 1—3, что в общем случае ведёт к значительному ускорению работы. Начиная с версии 5.5 одна из разновидностей акселераторов, opcache, была встроена в ядро, поэтому сторонние решения больше не пользуются популярностью.
Важной особенностью является то, что разработчику нет необходимости заботиться о распределении и освобождении памяти. Ядро PHP реализует средства для автоматического управления памятью; вся выделенная память возвращается системе после завершения работы скрипта.
Расширения.
Интерпретатор состоит из ядра и подключаемых модулей, "«расширений»", представляющих собой динамические библиотеки. Расширения позволяют дополнить базовые возможности языка, предоставляя возможности для работы с базами данных, сокетами, динамической графикой, криптографическими библиотеками, документами формата PDF и тому подобным. Любой желающий может разработать своё собственное расширение и подключить его. Существует огромное количество расширений, как стандартных, так и созданных сторонними компаниями и энтузиастами, однако в стандартную поставку входит лишь несколько десятков хорошо зарекомендовавших себя. Множество расширений доступно в репозитории PECL.
Начиная с версии 7.4.0 в PHP была добавлена поддержка интерфейса внешних функций (FFI), что в значительной степени упростило взаимодействие с библиотеками, написанными на любом другом языке (включая API, предоставляемое операционной системой). Этот новый функционал, в свою очередь, предоставил альтернативу написанию расширений. Таким образом, используя FFI можно писать код на языке PHP и взаимодействовать с любыми библиотеками в системе, которые предоставляют codice_95, codice_96 или codice_97 ABI.
Параметры настройки.
Интерпретатор PHP имеет специальный конфигурационный файл — codice_98, содержащий множество настроек, изменение которых влияет на поведение интерпретатора. Имеется возможность отключить использование ряда функций, изменить ограничения на используемую скриптом оперативную память, время выполнения, объём загружаемых файлов, настроить журналирование ошибок, работу с сессиями и почтовыми сервисами, подключить дополнительные расширения, а также многое другое. Возможно дробление большого конфигурационного файла на части. Например, широко распространена практика вынесения настроек расширений в отдельные файлы. Параметры интерпретатора могут быть переопределены в файлах конфигурации HTTP-сервера (например, codice_99 в Apache) или в самом скрипте во время выполнения при помощи команды codice_100.
Режимы запуска интерпретатора (SAPI).
SAPI — это внешний уровень абстракции, предназначенный для встраивания интерпретатора в другие приложения и отвечает за его работу (запуск, остановка, передача скриптов на исполнение, доступ к внешним данным). Существует несколько основных SAPI, определяющих способы запуска и использования PHP:
Начиная с версии PHP 5.4.0 в CLI SAPI появилась возможность запуска PHP как отдельного HTTP-сервера. Однако этот режим предназначен исключительно для разработки, так как запускает только один процесс интерпретатора и выполняет все запросы исключительно последовательно.
Пасхальные яйца.
PHP имеет несколько пасхальных яиц (шуток). Передача специальных GET-параметров любому php-скрипту приводит к выводу различных изображений.
Например:
 любой_сценарий.php?=PHPE9568F36-D428-11d2-A769-00AA001ACF42
при вводе этого значения в адресную строку браузера можно увидеть различные изображения, в зависимости от версии интерпретатора:
Следующие два значения позволят увидеть стандартный логотип PHP и ZEND, соответственно:
любой_сценарий.php?=PHPE9568F34-D428-11d2-A769-00AA001ACF42
 любой_сценарий.php?=PHPE9568F35-D428-11d2-A769-00AA001ACF42
Эти значения можно получить и непосредственно в PHP-скрипте с помощью функций codice_103 и codice_104 для логотипа Zend.
Также имеется специальное значение для отображения списка всех авторов PHP (4,5):
любой_сценарий.php?=PHPB8B5F2A0-3C92-11d3-A3A9-4C7B08C10000
Альтернативные реализации.
В силу популярности языка PHP и желания увеличить быстродействие основанных на нём веб-приложений создано несколько альтернативных компиляторов, близких к PHP-языку. Так в феврале 2010 года компания Facebook открыла свой компилятор PHP — HipHop (HPHP, Hyper-PHP) генерирующий код на C++, с последующей компиляцией в машинный код с помощью gcc. В июле 2013 года российская компания ВКонтакте анонсировала похожий продукт — KPHP.
В таблице представлен список существующих на сегодняшний момент альтернативных реализаций.
На сайте phpclasses.org доступен сравнительный анализ некоторых компиляторов.
Экосистема.
Системы управления содержимым.
Язык PHP является самым популярным языком для разработки систем управления содержимым (Content management system, CMS).
Стандартные рекомендации PHP.
Стандартные рекомендации PHP (, сокр. ) — это спецификация PHP, которая разрабатывается, принимается и публикуется группой авторитетных PHP проектов в том числе
CakePHP, Composer, Joomla, PEAR, Phalcon, phpDocumentor, TYPO3, Yii framework. Спецификация служит стандартизацией концепций программирования на языке PHP и основана на реальном опыте, а также на исследованиях и экспериментах. Цель рекомендаций состоит в том, чтобы обеспечить совместимость компонентов веб-приложений разработанных разными разработчиками.
Критика.
Сторонники языка PHP в качестве основных его преимуществ называют широкую распространённость, востребованность PHP-разработчиков на рынке труда и простоту изучения. К достоинствам языка относится и его достаточно быстрая эволюция.
Отсутствие поддержки многобайтовых кодировок в ядре языка.
Поддержка строк с многобайтовыми кодировками (такими как UTF-8) реализуется через отдельные расширения codice_105 и codice_106, на уровне ядра поддержка отсутствует, однако с версии PHP 4.2.0 есть возможность переопределять стандартные функции работы со строками, подменяя их на аналоги из mbstring.
Поддержка многобайтовых кодировок во всех строковых функциях стала доступна с версии 5.4.0 (март 2012 года).
Отсутствие поддержки многопоточности.
В языке не предусмотрена возможность создания многопоточных приложений и отсутствует поддержка синхронизированного доступа к ресурсам, однако реализуема при помощи расширения PCNTL (от ), но оно не подходит для решения специфических задач.
Хотя есть возможность установить расширение pthreads для «честных» потоков, но для этого интерпретатор должен быть скомпилирован с флагом thread safety, а само расширение признано устаревшим в пользу parallel (от того же автора).
В качестве более современной альтернативы возможно использование расширения Swoole.

</doc>
<doc id="975" url="https://ru.wikipedia.org/wiki?curid=975" title="POP3">
POP3

POP3 ( — протокол почтового отделения, версия 3) — стандартный интернет-протокол прикладного уровня, используемый клиентами электронной почты для получения почты с удалённого сервера по TCP-соединению.
POP и IMAP (Internet Message Access Protocol) — наиболее распространённые интернет-протоколы для извлечения почты. Практически все современные клиенты и серверы электронной почты поддерживают оба стандарта. Протокол POP был разработан в нескольких версиях, нынешним стандартом является третья версия (POP3). Большинство поставщиков услуг электронной почты (такие как Hotmail, Gmail и Yahoo! Mail) также поддерживает IMAP и POP3. Предыдущие версии протокола (POP, POP2) устарели.
Альтернативным протоколом для сбора сообщений с почтового сервера является IMAP.
Общие сведения.
POP поддерживает простые требования «загрузи-и-удали» для доступа к электронным почтовым ящикам. Хотя большая часть POP-клиентов предоставляет возможность оставить почту на сервере после загрузки, использующие POP клиенты обычно соединяются, извлекают все письма, сохраняют их на пользовательском компьютере как новые сообщения, удаляют их с сервера, после чего разъединяются.
Другие протоколы, в частности IMAP, предоставляют более полный и комплексный удалённый доступ к типичным операциям с почтовым ящиком. Многие клиенты электронной почты поддерживают как POP, так и IMAP; однако, гораздо меньше интернет-провайдеров поддерживают IMAP.
POP3-сервер прослушивает общеизвестный порт 110. Шифрование связи для POP3 запрашивается после запуска протокола с помощью либо команды STLS (если она поддерживается), либо POP3S, которая соединяется с сервером, используя TLS или SSL по TCP-порту 995.
Доступные сообщения клиента фиксируются при открытии почтового ящика POP-сессией и определяются количеством сообщений для сессии или, по желанию, с помощью уникального идентификатора, присваиваемого сообщению POP-сервером. Этот уникальный идентификатор является постоянным и уникальным для почтового ящика и позволяет клиенту получить доступ к одному и тому же сообщению в разных POP-сессиях. Почта извлекается и помечается для удаления с помощью номера сообщения. При выходе клиента из сессии помеченные сообщения удаляются из почтового ящика.
История.
POP (POP1) определён в RFC 918 (1984), POP2 в RFC 937 (1985). Первоначальная спецификация POP3 была представлена в RFC 1081 (1988). Нынешняя же описана в RFC 1939, обновлена механизмом расширения (RFC 2449) и механизмом аутентификации (RFC 1734).
Версии POP2 был назначен порт 109.
Изначальная спецификация POP3 поддерживала только незашифрованный механизм входа в систему USER/PASS или управление доступом .rhosts. На данный момент POP3 поддерживает различные методы аутентификации для предоставления разных уровней защиты от незаконного доступа к пользовательской почте. Большинство из них предоставлено механизмами расширения POP3. Клиенты POP3 поддерживают методы SASL через расширение AUTH. В рамках проекта Массачусетского технологического института «Афина» также был введён метод на основе Кербероса.
RFC 1460 ввёл APOP в основной протокол. APOP — протокол вида «запрос/ответ», использующий функцию хеширования MD5. Среди клиентов, реализующих APOP, можно выделить Mozilla Thunderbird, Opera Mail, Eudora, Windows Live Mail, PowerMail, Apple Mail, и т. д.
Было высказано неофициальное предложение для спецификации «POP4» с рабочей реализацией сервера. Это предложение добавило основные функции управления папками, поддержку составных сообщений, а также управление флагами сообщений. Однако, никакого прогресса «POP4» не наблюдается с 2003 г.
Расширения.
Механизм расширений был предложен в RFC 2449 для размещения новых расширений, а также организованного объявления о поддержке опциональных команд, таких как TOP и UIDL. RFC не намеревались поощрять расширения и подтвердили, что роль POP3 заключается в предоставлении простой поддержки в основном для требования «загрузи-и-удали».
Расширения выводятся списком командой CAPA. За исключением APOP, все опциональные команды были включены в изначальный набор возможностей. Как и в стандарте ESMTP (RFC 5321), возможности, начинающиеся с "X", являются локальными.
STARTTLS.
Расширение STARTTLS позволяет использовать TLS (Transport Layer Security) или SSL (Secure Sockets Layer) для связи с помощью команды STLS, по стандартному POP3-порту. Некоторые клиенты и серверы используют метод альтернативного порта, работающий с TCP-портом 995 (POP3S).
SDPS.
Британский провайдер Demon Internet ввёл расширение POP3, позволяющее иметь несколько учётных записей для каждого домена и ставшее известным как SDPS (Standard Dial-up POP3 Service). Для доступа к каждой учётной записи имя пользователя включает в себя имя хоста, например, john@hostname или john+hostname.
Google Apps используют тот же метод.
Сравнение с IMAP.
Клиенты, которые оставляют почту на серверах, обыкновенно используют команду UIDL для получения текущего соответствия между количеством сообщений и сообщением, определяемым его уникальным идентификатором. Идентификатор произволен и может повторяться, если на ящике есть идентичные сообщения. Напротив, IMAP использует 32-битный уникальный идентификатор (UID), присваиваемый сообщениям по возрастанию (но не обязательно подряд) по мере их получения. При извлечении новых сообщений IMAP-клиенты запрашивают UID больший, чем наивысшее значение UID среди всех ранее извлечённых сообщений, в то время как POP-клиент должен выбирать из всей карты UIDL. Для больших почтовых ящиков это может потребовать значительной обработки.
MIME служит в качестве стандарта для вложений и не-ASCII текста в электронных сообщениях. Хотя ни POP3, ни SMTP не требуют MIME-отформатированного сообщения, по существу, все не-ASCII сообщения идут в формате MIME, поэтому POP-клиенты должны также «понимать» и использовать MIME. IMAP, по определению, принимает MIME-форматированные сообщения.
Состояния сеанса.
В протоколе POP3 предусмотрено 3 состояния сеанса:
Команды протокола.
APOP.
Команда служит для передачи серверу имени пользователя и хэша пароля (digest).
[имя] — строка, указывающая имя почтового ящика.[digest] — хеш-сумма временной метки, конкатенированной с паролем пользователя, вычисленная по алгоритму MD5. В случае поддержки этой команды временная метка получается при соединении с сервером.
USER.
Передаёт серверу имя пользователя.
[имя] — строка, указывающая имя почтового ящика.
PASS.
Передаёт серверу пароль почтового ящика.
[пароль] — пароль для почтового ящика.
DELE.
Сервер помечает указанное сообщение для удаления. Сообщения, помеченные на удаление, реально удаляются только после закрытия транзакции (закрытие транзакций происходит обычно после посыла команды QUIT, кроме этого, например, на серверах закрытие транзакций может происходить по истечении определённого времени, установленного сервером).
[сообщение] — номер сообщения.
LIST.
Если был передан аргумент, то сервер выдаёт информацию об указанном сообщении. Если аргумент не был передан, то сервер выдаёт информацию обо всех сообщениях, находящихся в почтовом ящике. Сообщения, помеченные для удаления, не перечисляются.
[сообщение] — номер сообщения (необязательный аргумент).
NOOP.
Сервер ничего не делает, всегда отвечает положительно.
RETR сообщение.
Сервер передаёт сообщение с указанным номером.
[сообщение] — номер сообщения.
RSET.
Этой командой производится откат транзакций внутри сессии. Например, если пользователь случайно пометил на удаление какие-либо сообщения, он может убрать эти пометки, отправив эту команду.
STAT.
Сервер возвращает количество сообщений в почтовом ящике и размер почтового ящика в октетах. Сообщения, помеченные как удалённые, при этом не учитываются.
TOP.
Сервер возвращает заголовки указанного сообщения, пустую строку и указанное количество первых строк тела сообщения.
[сообщение] — номер сообщения.[количество строк] — сколько строк нужно вывести.
Пример сессии.
Это пример сессии с поддержкой зашифрованных паролей (APOP, RFC 1939):
 S: &lt;Сервер ожидает входящие соединения на порту 110&gt;
 C: &lt;подключается к серверу&gt;
 S: +OK POP3 server ready &lt;1896.697170952@dbc.mtview.ca.us&gt;
 C: APOP mrose c4c9334bac560ecc979e58001b3e22fb
 S: +OK mrose's maildrop has 2 messages (320 octets)
 C: STAT
 S: +OK 2 320
 C: LIST
 S: +OK 2 messages (320 octets)
 S: 1 120
 S: 2 200
 S: .
 C: RETR 1
 S: +OK 120 octets
 S: &lt;сервер передаёт сообщение 1&gt;
 S: .
 C: DELE 1
 S: +OK message 1 deleted
 C: RETR 2
 S: +OK 200 octets
 S: &lt;сервер передаёт сообщение 2&gt;
 S: .
 C: DELE 2
 S: +OK message 2 deleted
 C: QUIT
 S: +OK dewey POP3 server signing off (maildrop empty)
 C: &lt;закрывает соединение&gt;
 S: &lt;продолжает ждать входящие соединения&gt;
Вариант начала сессии, при котором пароль передается открытым текстом:
 C: USER mrose
 S +OK User accepted
 C: PASS mrosepassword
 S +OK Pass accepted

</doc>
<doc id="977" url="https://ru.wikipedia.org/wiki?curid=977" title="SCO">
SCO

The SCO Group — американская компания, разрабатывающая системное и прикладное программное обеспечение. Ранее была известна как Caldera Systems и занималась разработкой и внедрением своего дистрибутива Linux.
В 2000 компания купила у права на операционные системы UnixWare и OpenServer. Новое название компания получила в 2002 и на данный момент, несмотря на совпадающие аббревиатуры, не имеет никакого отношения к Santa Cruz Operation.
Компания стала известной из‑за нескольких исков против корпораций, поддерживающих свободную операционную систему GNU/Linux, в незаконном использовании кода системы UNIX. Наиболее громким из них был процесс против IBM в 2003. SCO обвинила IBM в том, что она незаконно внесла в ядро Linux часть кода, принадлежащего SCO. 11 августа 2007 стало известно, по постановлению суда Novell обладает правами (copyright) на UNIX и UnixWare, и претензии со стороны SCO безосновательны.
Сайт представляет собой своеобразный центр противостояния SCO. Хотя ресурс существует уже давно, только в феврале 2007 года компания SCO попыталась вызвать его создателя в суд.
1 сентября 2007 было объявлено, что Сбербанк России выбрал продукцию этой компании в качестве обновления для своих серверов.
Судебные иски против Linux.
Серия правовых и общественных споров между компанией-производителем программного обеспечения SCO Group (SCO) и пользователями и корпорациями, поддерживающими свободную операционную систему GNU/Linux. SCO Group утверждает, что лицензионное соглашение с IBM означает, что исходный код, который был написан IBM и включён в состав Linux, нарушает право SCO, установленное этим договором. Участники сообщества Linux не согласны с притязаниями SCO, а компании IBM, Novell и Red Hat подали встречные иски.
В 2003 году SCO заключила выгодные сделки с Microsoft — основным конкурентом разработчиков GNU/Linux.
10 августа 2007 года федеральный окружной судья в противостоянии "SCO против Novell" вынес определение, что компания Novell, а не SCO Group, является полноправным владельцем прав (copyright), относящихся к операционной системе Unix. Суд также постановил, что «SCO, по требованию Novell, обязана отказаться от претензий к IBM и Sequent». После вынесения вердикта компания Novell объявила, что не заинтересована в судебных тяжбах на почве Unix, и подчеркнула: «Мы не считаем, что внутри Linux есть Unix» (We don’t believe there is Unix in Linux).
Предпосылки.
В начале 2003 года компания SCO заявила, что имело место «ошибочное включение кода её системы UNIX System V в Linux». Однако компания отказалась указать конкретные участки кода, заявив, что доказательства будут представлены только суду. Было сказано, что такой код может быть найден в модулях SMP, RCU и некоторых других частях ядра Linux.
Позднее компания объявила о подаче иска к компании IBM на 1 млрд долларов, утверждая, что компания IBM включила элементы, составляющие коммерческую тайну SCO, в Linux. Затем сумма претензий увеличилась до 3 млрд долларов, а затем и до 5 миллиардов.
Эксперты замечают, что дело "USL v. BSDi" показало, что право (copyright) на Unix размытое, и не может служить основанием для возбуждения иска. На июль 2007 торговая марка UNIX не принадлежала SCO. Таким образом, претензии сводились только к нарушению коммерческой тайны, а после некоторого противостояния такое дело тяжело было развить дальше установления факта нарушения контракта компанией IBM, и, следовательно, в ответчиках оставалась только компания IBM. Компания SCO разыскивала более весомый повод для претензий к сообществу Linux, и явным образом исключила все претензии по поводу коммерческой тайны из иска.
Банкротство по Chapter 11.
15 сентября 2007 года SCO объявили себя временным банкротом в целях защиты от кредиторов.
14 февраля 2008 года SCO подала заявление на финансирование в размере 100 миллионов долларов США от Stephen Norris Capital Partners, чтобы выйти из банкротства и стать частной компанией. SNCP разработала для SCO новый бизнес‐план, предполагающий выпуск новых продуктов, и затрагивающий её судебное разбирательство. По вступлении в силу плана реорганизации должен был уволиться CEO Дарл Макбрайд.
Активы SCO были выставлены на аукцион, который состоялся 25 октября 2010 года.

</doc>
<doc id="979" url="https://ru.wikipedia.org/wiki?curid=979" title="SMS">
SMS

SMS ( , сокращение от  — «служба коротких сообщений», ещё известна как СМС) — технология приёма и передачи коротких текстовых сообщений с помощью мобильного телефона. Входит в стандарты сотовой связи.
Особенности.
Технология SMS поддерживается основными сотовыми сетями (GSM, NMT, D-AMPS, CDMA, UMTS).
Также SMS на телефоны можно отправлять из Интернета и из других сетей (пейджинговых, Фидонет, x.25 и др.) используя специальные программы, универсальные SMS-формы, а также непосредственно SMS-шлюзы мобильных операторов.
История.
SMS была создана как составная часть стандарта GSM Phase 1. Впервые идея осуществления сервиса возникла в 1984 году и была затем реализована группой инженеров, среди которых были: Фридхельм Хиллебранд ("Friedhelm Hillebrand", род. 1940, Deutsche Telekom), ("Bernard Ghillebaert", род. 1952, PTT), Финн Тросбю ("Finn Trosby", род. 1946, Telenor), Кевин Холли ("Kevin Holley", род. 1963, Cellnet), Иэн Харрис ("Ian Harris", род. 1945, Vodafone) к 1989 году. Впервые система рассылки коротких сообщений была опробована в декабре 1992 года в Великобритании для передачи текста с персонального компьютера на мобильный телефон в сети GSM компании Vodafone, спустя год после появления стандарта GSM на европейском рынке. 3 декабря 1992 года программист Нил Папуорт отправил директору Vodafone Ричарду Джарвису первое в истории SMS-сообщение с текстом «Счастливого Рождества!» ().
В России.
Вплоть до 2002 года обмен SMS-сообщениями между двумя разными московскими операторами был невозможен. В других регионах SMS-сообщениями обменивались с 2000 года.
Длина сообщения.
Текст может состоять из алфавитно-цифровых символов. Максимальный размер сообщения в стандарте GSM — 140 байт (1120 бит). Таким образом, при использовании 7-битной кодировки (латинский алфавит и цифры) можно отправлять сообщения длиной до 160 символов. При использовании 8-битной кодировки (немецкий, французский язык) можно отправлять сообщения длиной до 140 символов. Для поддержки других национальных алфавитов (китайского, арабского, русского и др.) используется 2-байтовая (16-битная) кодировка UCS-2. Таким образом, SMS, написанное кириллицей, не может превышать 70 знаков. Существуют и поддерживаются частью телефонов и восьмибитные кодировки кириллицы — так называемая локальная российская кодировка KOI8-R и Windows-1251. Но при использовании таких кодировок возникают проблемы с совместимостью: как телефон отправителя, так и телефон получателя сообщения должны быть заранее настроены на «сокращённый набор символов», при такой настройке невозможна отправка сообщений с использованием других алфавитов, кроме кириллицы и латиницы. К тому же поддержка кодировки телефонами несовершенна: в случае переключения телефона на UCS-2 (Юникод) сообщения, сохранённые в восьмибитной кодировке, могут быть испорчены так, что не восстанавливаются даже при обратном переключении. Поэтому даже телефоны, поддерживающие восьмибитную кириллическую кодировку, по умолчанию (то есть без изменения настройки) используют UCS-2.
В стандарте также предусмотрена возможность отправлять сегментированные сообщения. В таких сообщениях в заголовке пользовательских данных (UDH) помещается информация о номере сегмента сообщения и общем количестве сегментов. Максимальная длина сегмента при этом уменьшается за счёт этого заголовка. Как правило, каждый сегмент тарифицируется как отдельное сообщение. Сегментирование поддерживают почти все современные телефоны, но часто в телефонах вводится ограничение на количество сегментов в сообщении. Телефон, который не поддерживает сегментирование, отображает каждый сегмент как отдельное сообщение.
SMS и транслит.
Некоторые абоненты сотовых сетей предпочитают писать SMS на родном языке, используя латинские буквы (см.: транслит). Первоначально это было обусловлено отсутствием поддержки кириллицы и других национальных алфавитов телефонными аппаратами; а с широким распространением русифицированных телефонов — привычкой, а также тем, что на латинице можно писать более длинные SMS (140 или 160 вместо 70 символов на кириллице) за те же деньги. Например: "Ura! Ya prochital pro SMS v Wikipedii". При этом фактическая экономия меньше, чем 160/70, так как те буквы кириллицы, у которых отсутствуют аналоги в латинице, приходится заменять буквосочетаниями не менее чем из двух букв.
SMS-жаргон.
В англоязычных странах для экономии символов в SMS часто используют аббревиатуры, пропуски гласных, а также обозначают слова и слоги схожими по звучанию цифрами и буквами.
Примеры:
Вскоре у всех пользователей СМС появился новый универсальный , имеющий варианты у носителей разных национальных языков и письменностей.
Тарификация.
В России.
В России, как правило, оплачивается отправка SMS (на начало 2010 года у московских операторов стоимость в большинстве тарифов составляет 0,5—2,0 рубля), входящие SMS бесплатны. Стоимость отправки и получения SMS в роуминге зависит от роумингового соглашения и может меняться в зависимости от сети пребывания абонента. К 2010 году почти все российские операторы мобильной связи ввели разную стоимость отправки SMS: внутри домашнего региона и на все внутрисетевые страны, за пределы домашнего региона внутри страны, за рубеж.
Отправка сообщений через официальные сайты сотовых операторов, как правило, бесплатна.
Кроме того, операторы предоставляют возможность приобрести пакеты SMS вне зависимости от основного тарифа.
SMS и мобильные телефоны.
Большинство современных мобильных телефонов всех стандартов позволяет использовать SMS в полном объёме.
Для того, чтобы телефон мог отправлять SMS, необходимо указать номер SMS-центра (SMSC) оператора мобильной связи. В подавляющем большинстве случаев этот номер уже записан на SIM-карте, и настраивать его вручную не нужно.
Входящие SMS сохраняются в списке входящих сообщений, где они могут быть просмотрены. Некоторые модели телефонов хранят этот список на SIM-карте, и потому имеют ограничения на количество хранящихся сообщений (несколько десятков). Современные модели хранят список сообщений в памяти телефона, и количество сообщений ограничено только объёмом памяти телефона. Отправленные сообщения сохраняются в списке отправленных сообщений, также существуют отдельные списки для неотправленных сообщений и для черновиков.
В смартфонах и коммуникаторах SMS иногда хранятся в общем почтовом ящике, там же, где сообщения электронной почты и MMS.
Для набора SMS на мобильном телефоне, как правило, используется цифровая клавиатура телефона. Набор осуществляется либо путём последовательных нажатий для выбора нужной буквы, либо при помощи какой-либо системы предиктивного набора типа T9 или iTap. Некоторые модели телефонов имеют алфавитно-цифровую клавиатуру, что существенно облегчает набор. В смартфонах и коммуникаторах также может использоваться экранная клавиатура.
Flash-SMS.
Flash-SMS — это SMS-сообщение, сразу отображаемое при получении на экране телефона, в разных моделях телефонов по-разному. Обычно Flash-SMS не сохраняются в памяти телефона или на SIM-карте, однако на некоторых телефонах возможно сохранение.
В стандарте GSM Flash-SMS принадлежит к Class 0.
Не все сети GSM и не все мобильные телефоны поддерживают Flash-SMS.
Некоторые телефоны поддерживают приём «мигающих сообщений» (), в том числе Flash-SMS. Мигающим может быть как всё сообщение, так и его часть.
Для передачи Flash-SMS сообщения в соответствии со стандартом GSM используются следующие Data Coding Scheme (DCS):
Для латиницы возможно также использование DCS = 0xF0 (GSM 7 bit)
SMS и служебные приложения SIM-карт.
SMS также используются в приложениях STK, например, в SIM-меню. Такие сообщения принимаются и отправляются незаметно для пользователя и не попадают в общий список принятых и отправленных сообщений.
SMS и городские телефоны.
Некоторые операторы связи предоставляют абонентам услугу SMS для обычных городских телефонов. Данная услуга позволяет c телефона отправлять/принимать SMS на фиксированные телефоны и мобильные телефоны.
Для отправки / приёма SMS необходим телефонный аппарат, поддерживающий функцию SMS.
В Московском регионе услугу SMS для городских телефонов предоставлял МГТС.
Применение.
Смишинг.
За счёт SMS-рассылки многие мошенники выманивают у пользователей сотовой связи деньги или важную конфиденциальную информацию. Данная область мошенничества называется смишинг ( — от «SMS» и «фишинг»).
Мобильный маркетинг.
В настоящий момент особую популярность получает мобильный маркетинг, представленный на рынке компаниями, осуществляющими рассылки SMS по предварительному согласию с получателями. Например, фирма хочет проинформировать своих клиентов о новинках, акциях или скидках, которые она предоставляет. Идеальным каналом для такого взаимодействия становится SMS.
Служба Chief Marketer провела исследование, согласно которому, около половины опрошенных представителей поколения миллениалов предпочитает получать определённую информацию в виде SMS-сообщений на свой мобильный телефон.
Другие исследования показывают, что существует большое количество сообщений, которые люди предпочитают получать в виде текста. Речь о таких сообщениях, как: информирование о скидках, техническая информация о проведённых операциях и состоянии счёта, специальные предложения и срочные уведомления. SMS особенно удобны для проведения простейших транзакций, например, проверки баланса или пополнения счёта .
Рассылка таких сообщений без предварительного согласия получателя запрещена во многих странах, например, в России, — согласно ст. 18 Федерального Закона о рекламе, Украине, — согласно Статье 363—1 (Раздел XVI, Уголовного Кодекса Украины). По этой причине маркетинговые компании предлагают бесплатные услуги взамен на согласие получать рекламу по SMS.
Также отдельным направлением мобильного маркетинга является работа с короткими номерами. Цель использования коротких номеров — прибыль от входящих SMS, при этом большую часть стоимости забирает себе оператор сотовой связи, предоставляющий этот номер, а около 45 % получает организатор акции.
Применяются также и федеральные номера для получения SMS. Этот вид сервиса обычно организовывается при отсутствии финансовой заинтересованности (получение мнения о товаре, «жалобная книга», подписка на новости).
Двусторонний обмен SMS и номер для приёма SMS.
Технология двустороннего обмена SMS позволяет наладить коммуникацию с клиентом, при этом взаимодействие происходит по инициативе пользователя. Данная технология предполагает использование номера для приёма SMS как канала связи с клиентом, обеспечивающего быструю обратную связь и потенциально повышающего лояльность. Использование номера для приёма SMS позволяет компаниям проводить опросы, розыгрыши, а также автоматизировать смену паролей или проверку баланса. От пользователя требуется лишь отправить SMS с ключевым словом/цифрой на мобильный номер. Для большей эффективности номер для приёма SMS часто интегрируют в комплекс маркетинговых услуг и синхронизируют с другими каналами коммуникации, такими как электронная почта, голосовые сообщения, мессенджеры и т. д.
В России.
Правомерность массовой рассылки SMS-сообщений операторами связи без подписки абонента в конце мая 2009 года подтвердил Высший арбитражный суд России.
Premium-SMS (Премиум-СМС).
Существует отдельно тарифицируемый тип SMS, используемый для получения каких-либо платных услуг. Сообщение при этом отправляется на один из специальных коротких номеров, и, как правило, содержит в себе данные, необходимые для получения услуги (код услуги, дополнительную информацию). Сообщение оплачивается по специальному тарифу при отправлении (обычно существенно дороже стоимости стандартного SMS, так как в стоимость включена стоимость самой услуги). После отправки и списания средств с лицевого счёта абонент, как правило, получает доступ к услуге, например, в виде SMS со ссылкой на WAP-страницу с мелодией, картинкой или игрой.
Premium-SMS используются в различных сервисах мобильной коммерции, например, при продаже мобильного контента. Иногда Premium-SMS используются и для сервисов, не имеющих прямого отношения к мобильной связи, например, для оплаты в Интернет-ресурсах, для различных голосований. Из-за простоты перевода денег путём платных SMS данный путь используется и различными мошенниками.

</doc>
<doc id="981" url="https://ru.wikipedia.org/wiki?curid=981" title="SMTP">
SMTP

SMTP ( — простой протокол передачи почты) — это широко используемый сетевой протокол, предназначенный для передачи электронной почты в сетях TCP/IP.
SMTP впервые был описан в RFC 821 (1982 год); последнее обновление в RFC 5321 (2008) включает масштабируемое расширение — ESMTP (). В настоящее время под «протоколом SMTP» подразумевают и его расширения. Протокол SMTP предназначен для передачи исходящей почты с использованием порта TCP 25.
В то время как электронные почтовые серверы и другие агенты пересылки сообщений используют SMTP для отправки и получения почтовых сообщений, работающие на пользовательском уровне клиентские почтовые приложения обычно используют SMTP только для отправки сообщений на почтовый сервер для ретрансляции. Для получения сообщений клиентские приложения обычно используют либо POP ( — протокол почтового отделения), либо IMAP (), либо патентованные системы (такие как Microsoft Exchange и Lotus Notes/Domino) для доступа к учётной записи своего почтового ящика на сервере.
История.
В 1960-х годах использовались различные виды электронной связи. Люди общались друг с другом с помощью систем, разработанных для определенных мэйнфреймов. По мере того как все больше и больше компьютеров соединялись между собой, особенно в правительственной сети США ARPANET, были разработаны стандарты, позволяющие пользователям разных систем писать друг другу электронные сообщения. Эти стандарты, разработанные в 1970-х годах, стали основой для SMTP.
Корни SMTP можно проследить в двух описанных в 1971 г. реализациях — Mail Box Protocol и SNDMSG, который был «изобретён» Рэем Томлинсоном из BBN Technologies для TOPS-20/TENEX-компьютеров, посылающих сообщения по ARPANET (в то время к ней были подсоединены менее 50 хостов).
Дальнейшие реализации включают FTP Mail и Mail Protocol, разработанные в 1973 году. Развитие продолжалось в течение 1970-х годов, пока в 1980 году ARPANET не превратилась в современный Интернет. В том же году Джон Постел предложил протокол Mail Transport Protocol, благодаря которому FTP перестал быть основой для передачи почты. SMTP опубликован в RFC 821 (также написанном Постелом) в августе 1982 г.
Стандарт SMTP был разработан примерно в то же время, что и Usenet, сеть передачи данных, имеющая некоторое сходство с SMTP. SMTP стал широко использоваться в начале 1980-х годов. В то время он был дополнением к почтовой программе Unix to Unix CoPy (UUCP), которая больше подходила для передачи электронных сообщений между периодически подключаемыми устройствами. SMTP, с другой стороны, отлично работает, когда устройства отправки и получения постоянно связаны в сети. Оба устройства используют механизм хранения и пересылки и являются примерами технологии push. Хотя группы новостей Usenet все еще распространяются между серверами с помощью UUCP, почта UUCP фактически исчезла вместе с маршрутом "bang path" (последовательность хост-машин в сети, через которые сообщение должно достичь места назначения), который использовался в качестве заголовков маршрутизации. В статье о перезаписи отправителя содержится техническая справочная информация об истории раннего SMTP и маршрутизации от источника до RFC 1123.
Sendmail был одним из первых (если не первым) агентом обмена сообщениями, реализовавшим SMTP. Среди других популярных серверных программ, поддерживающих SMTP, - Postfix, qmail, Novell GroupWise, Exim, Novell NetMail, Microsoft Exchange Server и Sun Java System Messaging Server.
Message Provisioning, как определено в RFC 2476, и SMTP-AUTH, как описано в RFC 2554. Эти новаторские концепции были представлены в 1998 и 1999 годах, соответственно, и с тех пор произвели революцию в способах передачи электронных сообщений.
В первые дни SMTP-серверы работали в основном во внутренней сети организации. Они служили шлюзами для получения сообщений от внешних организаций и передачи собственных сообщений организации во внешний мир. Однако со временем эти SMTP-серверы, также известные как агенты пересылки сообщений, начали развиваться. Они расширили свои возможности и в конечном итоге взяли на себя роль агентов доставки сообщений для специализированных почтовых приложений.
Это расширение означало, что эти SMTP-серверы больше не ограничивались внутренними коммуникациями. Теперь они могли передавать сообщения из источников за пределами организации. Например, когда руководитель компании находится в командировке и ему необходимо отправить электронное сообщение с помощью корпоративного SMTP-сервера. Благодаря этим усовершенствованиям такая задача стала возможной.
Данный вопрос, являясь следствием быстрого развития и популярности Всемирной паутины, означает, что SMTP должен был включать в себя особые правила и методы для ретрансляции сообщений и авторизации пользователей для предотвращения таких злоупотреблений, как ретрансляция нежелательной почты (спам).
Поскольку этот протокол сначала был с текстовым (ASCII) интерфейсом, то он плохо работал с бинарными файлами и символами многих неанглийских языков. Такие стандарты, как Multipurpose Internet Mail Extensions (MIME), были разработаны для кодирования двоичных файлов для передачи через SMTP. Разработанные после Sendmail агенты пересылки, как правило, также осуществляли опцию чистых 8 бит, так что альтернативная стратегия «просто посылай восемь» может быть использована для передачи произвольных текстовых данных (в любой восьмибитной ASCII-подобной кодировке символов) через SMTP. Однако все ещё оставалась проблема разного отображения наборов символов у производителей, хотя сами почтовые адреса все ещё позволяли использовать исключительно ASCII. Сегодня агенты пересылки, работающие с чистыми 8 битами, как правило, поддерживают расширение 8BITMIME, позволяющее передавать бинарные файлы почти так же легко, как обычный текст. Недавно было создано расширение SMTPUTF8 для поддержки текста в кодировке UTF-8, благодаря чему стало возможным включать международное содержимое и адреса с использованием таких алфавитов, как кириллица или китайский.
Многие выдающиеся люди внесли свой вклад в спецификацию основного SMTP, среди них Джон Постел, Эрик Оллман, Дэйв Крокер, Нед Фрид, Рэндалл Джелленс, Джон Кленсин и Кейт Мур.
Модель обработки почты.
Электронная почта представлена почтовым клиентом (MUA, mail user agent — пользовательский почтовый агент) для почтового сервера (MSA, mail submission agent — агент отправки электронной почты) с помощью SMTP по TCP-порту 587. Оттуда MSA доставляет почту своим агентам передачи сообщений (MTA, mail transfer agent). Часто эти два агента являются просто различными образцами одного и того же программного обеспечения, запущенного с разными параметрами на одном устройстве. Локальная обработка может быть проведена как на отдельной машине, так и разделена между различными устройствами; в первом случае вовлечённые процессы имеют общий доступ к файлам, во втором случае SMTP используется для пересылки сообщения внутренне, причём каждый хост настроен на использование следующего устройства в качестве промежуточного хоста. Каждый процесс — сам по себе MTA, то есть — SMTP-сервер.
Граничный MTA должен найти целевой хост. Он использует систему доменных имен (DNS) для поиска записей почтового обменника (mail exchanger — MX) домена получателя (часть адреса, находящаяся справа от символа @). Возвращаемая запись почтового MX содержит имя целевого хоста. Затем MTA подключается к серверу обмена в качестве SMTP-клиента.
Как только цель MX принимает входящее сообщение, она передаёт его агенту доставки почты (mail delivery agent — MDA) для локальной доставки сообщения. MDA предусматривает возможность сохранять сообщения в соответствующем формате почтового ящика. Приём почты, опять же, может быть проведён как несколькими, так и одним компьютером — изображение показывает два ближайших ящика для каждого случая. MDA может доставлять сообщения прямо на хранение или передавать их по сети с помощью SMTP или любых других средств, в том числе протокола локальной пересылки почты (Local Mail Transfer Protocol — LMTP) — производного от SMTP, предназначенного для этой цели.
После доставки на локальный почтовый сервер сообщение хранится для пакетного поиска по аутентифицированным почтовым клиентам (MUA). Сообщение извлекается приложениями конечного пользователя (почтовыми клиентами) с использованием протокола IMAP (Internet Message Access Protocol), который облегчает доступ к сообщениям и управляет хранящейся почтой, или с помощью протокола POP (Post Office Protocol), который обычно использует традиционный mbox-формат файлов, или фирменными системами вроде Microsoft Exchange/Outlook или Lotus Notes/Domino. Клиенты сетевой почты могут использовать любой метод, но протокол поиска часто не соответствует официальным стандартам.
SMTP определяет передачу сообщения, а не его содержание. Таким образом, он задаёт оболочку сообщения и её параметры (такие, как отправитель оболочки), но не заголовок либо тело самого сообщения. STD 10 и RFC 5321 определяют SMTP (оболочку), в то время как STD 11 и RFC 5322 — сообщение (заголовок и тело), официально называемый форматом почтового сообщения (Internet Message Format).
Обзор протокола.
SMTP — требующий соединения текстовый протокол, по которому отправитель сообщения связывается с получателем посредством выдачи командных строк и получения необходимых данных через надёжный канал, в роли которого обычно выступает TCP-соединение (Transmission Control Protocol — протокол управления передачей). SMTP-сессия состоит из команд, посылаемых SMTP-клиентом, и соответствующих ответов SMTP-сервера. Когда сессия открыта, сервер и клиент обмениваются её параметрами. Сессия может включать ноль и более SMTP-операций (транзакций).
SMTP-операция состоит из трёх последовательностей команда/ответ (см. пример ниже). Описание последовательностей:
Помимо промежуточных ответов для DATA-команды, каждый ответ сервера может быть положительным (код ответа 2хх) или отрицательным. Последний, в свою очередь, может быть постоянным (код 5хх) либо временным (код 4хх). Отказ SMTP-сервера в передаче сообщения — постоянная ошибка; в этом случае клиент должен отправить возвращённое письмо. После сброса — положительного ответа, сообщение скорее всего будет отвержено. Также сервер может сообщить о том, что ожидаются дополнительные данные от клиента (код 3xx).
Изначальным хостом (SMTP-клиентом) может быть как почтовый клиент конечного пользователя (функционально определяемый как почтовый агент — MUA), так и агент пересылки сообщений (MTA) на сервере, то есть сервер действует как клиент в соответствующей сессии для ретрансляции сообщения. Полностью функциональные серверы поддерживают очереди сообщений для повторной передачи сообщения в случае ошибок.
MUA знает SMTP-сервер для исходящей почты из своих настроек. SMTP-сервер, действующий как клиент, то есть пересылающий сообщения, определяет, к какому серверу подключиться, просмотром ресурса записей MX (Mail eXchange) DNS для домена каждого получателя. В случае, если запись MX не найдена, совместимые MTA (не все) возвращаются к простой А-записи. Пересылающие серверы также могут быть настроены на использование Smart host.
SMTP-сервер, действующий как клиент, устанавливает TCP-соединение с сервером по разработанному для SMTP порту 25. MUA должен использовать порт 587 для подключения к агенту предоставления сообщений (MSA). Основное различие между MTA и MSA заключается в том, что SMTP-аутентификация обязательна только для последнего.
SMTP и извлечение сообщений.
SMTP — всего лишь протокол доставки. Он не может по требованию взять сообщения с удалённого сервера. Для извлечения почты и управления почтовым ящиком разработаны другие протоколы, такие как POP и IMAP. Тем не менее, SMTP предоставляет возможность начать на удалённом сервере обработку очереди сообщений, при которой запрашивающая система может получать все направленные ей сообщения (см. Remote Message Queue Starting ниже). POP и IMAP предпочтительны, когда компьютер пользователя включён не постоянно, или же временно подключён к Интернету.
Remote Message Queue Starting.
Remote Message Queue Starting (запуск удалённой очереди сообщений) — особенность SMTP, позволяющая удалённому хосту начать обработку очереди сообщений на сервере так, что он может получать предназначенные ему сообщения с помощью команды TURN. Однако эта особенность считалась небезопасной и была расширена в RFC 1985 командой ETRN, которая работает надёжнее благодаря основанному на информации DNS методу аутентификации.
On-Demand Mail Relay.
ODMR (On-Demand Mail Relay — ретрансляция почты по требованию) — стандартизированное в RFC 2645 SMTP-расширение, позволяющее проводить ретрансляцию сообщения аутентифицированному пользователю.
Интернационализация.
Многие пользователи, чей набор символов отличается от латиницы, сталкиваются с требованием адреса электронной почты на латинице.
Для решения этой проблемы был создан RFC 6531, предоставляющий возможности для интернационализации для SMTP — расширение SMTPUTF8. RFC 6531 предоставляет поддержку многобайтных и не-ASCII символов в почтовом адресе, например: δοκιμή@παράδειγμα.δοκιμή или 测试@测试.测试. Текущая поддержка ограничена, но есть большой интерес в широком распространении RFC 6531 и связанных с ним RFC в странах с обширной базой пользователей, для которых латиница не является родным алфавитом.
SMTP-сервер исходящей почты.
Почтовый клиент должен знать IP-адрес SMTP-сервера, который задаётся как часть конфигурации (обыкновенно в виде DNS-имени). Сервер будет доставлять исходящие сообщения от лица пользователя.
Ограничения доступа к серверу исходящей почты.
Администраторам сервера необходимо контролировать то, какие клиенты могут использовать сервер. Это позволяет им бороться с такими злоупотреблениями, как спам. Обычно используются два решения:
Ограничение доступа по местоположению.
В этом случае SMTP-сервер интернет-провайдера не разрешит допуск пользователям «за пределами» сети провайдера. Точнее, сервер может допустить лишь тех пользователей, чей IP-адрес предоставлен данным провайдером, что эквивалентно требованию соединения с Интернетом с помощью этого провайдера. Мобильный пользователь часто может оказаться в сети, отличной от сети своего провайдера, и потому сообщения не будут отправляться.
У данной системы есть несколько разновидностей. Например, SMTP-сервер организации может предоставлять доступ только пользователям той же сети, блокируя остальных пользователей. Также сервер может проводить ряд проверок клиентского IP-адреса. Эти методы обычно использовались организациями и учреждениями, например университетами, для внутреннего пользования сервером. Однако, большая их часть теперь использует описанные ниже методы аутентификации.
Благодаря ограничению доступа определённым адресам, администраторы сервера могут легко определить адрес любого злоумышленника.
Если пользователь может использовать различных провайдеров для соединения с Интернетом, этот вид ограничения становится нецелесообразным, а изменение настроенного адреса SMTP-сервера исходящей почты непрактично. Крайне желательно иметь возможность использовать такую информацию о настройках клиента, которая не нуждается в изменении.
Аутентификация клиента.
Вместо описанного ранее ограничения по местоположению, современные SMTP-серверы обычно требуют аутентификацию пользователей перед получением доступа. Эта система, будучи более гибкой, поддерживает мобильных пользователей и предоставляет им фиксированный выбор настроенного сервера исходящей почты.
Открытый релей.
Сервер, доступный для широкой сети и не предоставляющий эти виды ограничения доступа, называют открытым релеем. Сейчас такие серверы считаются дурным тоном.
Порты.
Администраторы сервера выбирают, какой порт будут использовать клиенты для ретрансляции исходящей почты — 25 или 587. Спецификации и многие серверы поддерживают и тот, и другой порты. Хотя некоторые серверы поддерживают порт 465 для безопасного SMTP, но предпочтительнее использовать стандартные порты и ESMTP-команды, если необходима защищённая сессия между клиентом и сервером.
Некоторые серверы настроены на отклонение всех ретрансляций по порту 25, но пользователям, прошедшим аутентификацию по порту 587, позволено перенаправлять сообщения на любой действительный адрес.
Некоторые провайдеры перехватывают порт 25, перенаправляя трафик на свой собственный SMTP-сервер вне зависимости от адреса назначения. Таким образом, их пользователи не могут получить доступ к серверу за пределами провайдерской сети по порту 25.
Некоторые серверы поддерживают аутентифицированный доступ по дополнительному, отличному от 25, порту, позволяя пользователям соединяться с ними, даже если порт 25 заблокирован.
Пример простейшей SMTP-сессии.
C: — клиент, S: — серверы
 S: (ожидает соединения)
 C: (Подключается к порту 25 сервера)
 S:220 mail.company.tld ESMTP is glad to see you!
 C:HELO
 S:250 domain name should be qualified
 C:MAIL FROM: &lt;someusername@somecompany.ru&gt;
 S:250 someusername@somecompany.ru sender accepted
 C:RCPT TO: &lt;user1@company.tld&gt;
 S:250 user1@company.tld ok
 C:RCPT TO: &lt;user2@company.tld&gt;
 S:550 user2@company.tld unknown user account
 C:DATA
 S:354 Enter mail, end with "." on a line by itself
 C:From: Some User &lt;someusername@somecompany.ru&gt;
 C:To: User1 &lt;user1@company.tld&gt;
 C:Subject: tema
 C:Content-Type: text/plain
 C:
 C:Hi!
 C:.
 S:250 769947 message accepted for delivery
 C:QUIT
 S:221 mail.company.tld CommuniGate Pro SMTP closing connection
 S: (закрывает соединение)
В результате такой сессии письмо будет доставлено адресату user1@company.tld, но не будет доставлено адресату user2@company.tld, потому что такого адреса не существует.
Дополнительные расширения.
Многие клиенты запрашивают расширения SMTP, поддерживаемые сервером, с помощью команды codice_1 из спецификации расширенного SMTP (RFC 1870). codice_1 используется только в том случае, если сервер не ответил на codice_3. Современные клиенты могут использовать ключ SIZE расширения ESMTP для запроса максимального размера сообщения, которое будет принято. Более старые клиенты и серверы могут попытаться передать чрезмерно большие сообщения, которые будут отклонены после потребления сетевых ресурсов, включая время соединения. Пользователи могут вручную заранее определить максимальный размер, принимаемый ESMTP-серверами. Клиент заменяет команду codice_1 на EHLO.
 S: 220 smtp2.example.com ESMTP Postfix
 C: EHLO bob.example.org
 S: 250-smtp2.example.com Hello bob.example.org [192.0.2.201]
 S: 250-SIZE 14680064
 S: 250-PIPELINING
 S: 250 HELP
smtp2.example.com объявляет, что он примет сообщение размером не больше чем октетов (8-битных байтов). В зависимости от фактического использования сервера, он может на данный момент не принять сообщение такой величины. В простейшем случае ESMTP-сервер объявит максимальный SIZE только при взаимодействии с пользователем через codice_1.
Расширенный SMTP-протокол.
Расширенный SMTP (ESMTP) (иногда называемый Enhanced SMTP) — это определение расширений протокола для стандарта SMTP. ESMTP был определен в ноябре 1995 года в публикации IETF RFC 1869, которая установила общую структуру для всех существующих и будущих расширений. ESMTP определяет согласованные и управляемые средства, с помощью которых могут быть идентифицированы клиенты и серверы ESMTP, а серверы могут указывать поддерживаемые расширения. Исходный протокол SMTP поддерживал только неаутентифицированные незашифрованные текстовые сообщения ASCII, восприимчивые к атакам типа «злоумышленник в середине», спуфингу и рассылке спама, и требуя, чтобы любые двоичные данные перед передачей кодировались в читаемый текст. В ряде дополнительных расширений указаны различные механизмы решения этих проблем.
Обнаружение дополнительных расширений.
Клиенты изучают поддерживаемые сервером параметры, используя приветствие EHLO вместо исходного HELO. Клиенты возвращаются к HELO, только если сервер не поддерживает расширения SMTP. Современные клиенты могут использовать ключевое слово SIZE расширения ESMTP, чтобы запросить у сервера максимальный размер сообщения, которое будет принято. Старые клиенты и серверы могут пытаться передать сообщения слишком большого размера, которые будут отклонены после использования сетевых ресурсов, включая время подключения к сетевым ссылкам, которое оплачивается поминутно. Пользователи могут заранее вручную определить максимальный размер, допустимый для серверов ESMTP. Клиент заменяет команду HELO командой EHLO.
Передача двоичных данных.
Исходный SMTP поддерживает только одно тело текста ASCII, поэтому любые двоичные данные должны быть закодированы как текст в этом теле сообщения перед передачей, а затем декодированы получателем. Обычно использовались двоичные кодировки текста, такие как uuencode и BinHex.
Для решения этой проблемы была разработана команда 8BITMIME. Он был стандартизирован в 1994 году как RFC 1652. Он упрощает прозрачный обмен сообщениями электронной почты, содержащими октеты вне семибитного набора символов ASCII, путем кодирования их как частей содержимого MIME, обычно кодируемых с помощью Base64.
Расширения механизма доставки почты.
Ретранслятор почты по требованию (ODMR) — это расширение SMTP, стандартизованное в RFC 2645, которое позволяет периодически подключенному SMTP-серверу получать электронную почту, помещенную в очередь для него, когда он подключен.
Расширение интернационализации.
Исходный SMTP поддерживает адреса электронной почты, состоящие только из символов ASCII, что неудобно для пользователей, чей собственный сценарий не основан на латинице или которые используют диакритические знаки вне набора символов ASCII. Это ограничение было снято с помощью расширений, позволяющих использовать UTF-8 в именах адресов. RFC 5336 представил экспериментальную команду UTF8SMTP, а позже был заменен RFC 6531, в котором была представлена команда SMTPUTF8. Эти расширения обеспечивают поддержку многобайтовых символов и символов, отличных от ASCII, в адресах электронной почты, например, с диакритическими знаками и другими языковыми символами, такими как греческий и китайский. Текущая поддержка ограничена, но существует большой интерес к широкому принятию RFC 6531 и связанных с ним RFC в таких странах, как Китай, с большой пользовательской базой, где латинский (ASCII) является иностранным алфавитом.
Расширения.
Как и SMTP, ESMTP — это протокол, используемый для передачи почты Интернета. Он используется как межсерверный транспортный протокол и (с принудительным ограниченным поведением) как протокол отправки почты. Основная функция идентификации для клиентов ESMTP — открыть передачу с помощью команды EHLO (Extended HELLO), а не HELO (Hello, оригинальный стандарт RFC 821). Сервер ответит успешно (код 250), отказом (код 550) или ошибкой (код 500, 501, 502, 504 или 421), в зависимости от его конфигурации. Сервер ESMTP возвращает код 250 OK в многострочном ответе со своим доменом и списком ключевых слов для обозначения поддерживаемых расширений. Сервер, соответствующий RFC 821, возвращает код ошибки 500, позволяя клиентам ESMTP попробовать либо HELO, либо QUIT. Каждое расширение услуги определяется в утвержденном формате в последующих RFC и регистрируется в Internet Assigned Numbers Authority (IANA). Первыми определениями были дополнительные услуги RFC 821: SEND, SOML (отправка или почта), SAML (отправка и почта), EXPN, HELP и TURN. Был установлен формат дополнительных SMTP-глаголов и для новых параметров в MAIL и RCPT. Некоторые относительно распространенные ключевые слова (не все из которых соответствуют командам), используемые сегодня:
Формат ESMTP был переформулирован в RFC 2821 (заменяющий RFC 821) и обновлен до последнего определения в RFC 5321 в 2008 году. Поддержка команды EHLO на серверах стала обязательной, а HELO обозначил обязательный откат. Нестандартные, незарегистрированные расширения услуг могут использоваться по двустороннему соглашению, эти услуги обозначаются ключевым словом сообщения EHLO, начинающимся с «X», и с любыми дополнительными параметрами или глаголами, отмеченными аналогичным образом. Команды SMTP не чувствительны к регистру. Они представлены здесь с заглавной буквы только для акцента. SMTP-сервер, для которого требуется особый метод использования заглавных букв, является нарушением стандарта.
Безопасность SMTP и спам.
Изначальная спецификация SMTP не включала средств для аутентификации отправителей. Впоследствии, в RFC 2554, было введено расширение. Расширение SMTP (ESMTP) предоставляет почтовым клиентам возможности задания механизма обеспечения безопасности для сервера, аутентификации и профиля безопасности SASL (Simple Authentication and Security Layer) для последующих передач сообщений.
Продукты Microsoft реализуют собственный протокол — SPA (Secure Password Authentication) с помощью расширения SMTP-AUTH.
Однако непрактичность широкого распространения реализации и управления SMTP-AUTH означает, что проблема спама не может быть решена с его помощью.
Обширное изменение SMTP, так же как и полная его замена, считаются непрактичными из-за огромной инсталлированной базы SMTP. Internet Mail 2000 был одним из претендентов для такой замены.
Спам функционирует благодаря различным факторам, в том числе не соответствующие стандартам реализации MTA, уязвимости в защите операционных систем (усугубляемые постоянным широкополосным подключением), что позволяет спамерам удалённо контролировать компьютер конечного пользователя и посылать с него спам.
Существует несколько предложений для побочных протоколов, помогающих работе SMTP. Исследовательская группа Anti-Spam (The Anti-Spam Research Group — ASRG) — подразделение Исследовательской группы Интернет-технологий работает над почтовой аутентификацией и другими предложениями для предоставления простой аутентификации, которая будет гибкой, легковесной и масштабируемой. Недавняя деятельность Инженерного совета Интернета (IETF) включает в себя MARID (2004), приведший к двум утверждённым IETF-экспериментам в 2005, и DomainKeys Identified Mail в 2006.
Расширения ESMTP.
STARTTLS в RFC 1869 предписывает начинать сессию не командой codice_1, а командой codice_3. В случае, если сервер не поддерживает расширений, то он ответит на codice_3 ошибкой, в этом случае клиент должен послать команду codice_1 и не использовать расширения протокола.
Если же сервер поддерживает ESMTP, то кроме приветствия он сообщит список поддерживаемых расширений протокола SMTP, например:
 ehlo office.company1.tld
 250-mail.company2.tld is pleased to meet you
 250-DSN
 250-SIZE
 250-STARTTLS
 250-AUTH LOGIN PLAIN CRAM-MD5 DIGEST-MD5 GSSAPI MSN NTLM
 250-ETRN
 250-TURN
 250-ATRN
 250-NO-SOLICITING
 250-HELP
 250-PIPELINING
 250 HELO

</doc>
<doc id="983" url="https://ru.wikipedia.org/wiki?curid=983" title="SSH">
SSH

SSH ( — «безопасная оболочка») — сетевой протокол прикладного уровня, позволяющий производить удалённое управление операционной системой и туннелирование TCP-соединений (например, для передачи файлов). Схож по функциональности с протоколами Telnet и rlogin, но, в отличие от них, шифрует весь трафик, включая и передаваемые пароли. SSH допускает выбор различных алгоритмов шифрования. SSH-клиенты и SSH-серверы доступны для большинства сетевых операционных систем.
SSH позволяет безопасно передавать в незащищённой среде практически любой другой сетевой протокол. Таким образом, можно не только удалённо работать на компьютере через командную оболочку, но и передавать по шифрованному каналу звуковой поток или видео (например, с веб-камеры). Также SSH может использовать сжатие передаваемых данных для последующего их шифрования, что удобно, например, для удалённого запуска клиентов X Window System.
Большинство хостинг-провайдеров за определённую плату предоставляет клиентам доступ к их домашнему каталогу по SSH. Это может быть удобно как для работы в командной строке, так и для удалённого запуска программ (в том числе графических приложений).
Техническая информация о протоколе.
SSH — это протокол прикладного уровня. SSH-сервер обычно прослушивает соединения на TCP-порту 22. Спецификация протокола SSH-2 содержится в RFC 4251. Для аутентификации сервера в SSH используется протокол аутентификации сторон на основе алгоритмов электронно-цифровой подписи RSA или DSA, но допускается также аутентификация при помощи пароля (режим обратной совместимости с Telnet) и даже ip-адреса хоста (режим обратной совместимости с rlogin).
Для создания общего секрета (сеансового ключа) используется алгоритм Диффи — Хеллмана (DH). Для шифрования передаваемых данных используется симметричное шифрование, алгоритмы AES, Blowfish или 3DES. Целостность передачи данных проверяется с помощью CRC32 в SSH1 или HMAC-SHA1/HMAC-MD5 в SSH2.
Для сжатия шифруемых данных может использоваться алгоритм LempelZiv (LZ77), который обеспечивает такой же уровень сжатия, что и архиватор ZIP. Сжатие SSH включается лишь по запросу клиента, и на практике используется редко.
История и разработка.
В 1995 году Тату Юлёнен, исследователь из Технологического университета Хельсинки, разработал первую версию протокола (теперь называемого SSH-1), вызванную атакой по сбору пароля в его университетской сети. Целью SSH было заменить более ранние протоколы rlogin, TELNET, FTP [16] и rsh, которые не обеспечивали строгую аутентификацию и конфиденциальность. Юлёнен выпустил свою реализацию как бесплатное ПО в июле 1995 года, и инструмент быстро завоевал популярность. К концу 1995 года база пользователей SSH выросла до 20 000 пользователей в пятидесяти странах.
В декабре 1995 года Юлёнен основал SSH Communications Security для продвижения и разработки SSH. Первоначальная версия программного обеспечения SSH использовала различные части бесплатного программного обеспечения, такие как GNU libgmp, но более поздние версии, выпущенные SSH Communications Security, превратились во всё более проприетарное программное обеспечение.
Было подсчитано, что к 2000 году количество пользователей выросло до 2 миллионов.
«Secsh» было официальным названием группы инженеров Интернета (IETF) для рабочей группы IETF, ответственной за версию 2 протокола SSH. В 2006 году обновлённая версия протокола SSH-2 была принята в качестве стандарта. Эта версия несовместима с SSH-1. SSH-2 отличается как безопасностью, так и улучшенными функциями по сравнению с SSH-1. Например, лучшая безопасность достигается за счёт обмена ключами Диффи-Хеллмана и строгой проверки целостности с помощью кодов аутентификации сообщений. Новые функции SSH-2 включают возможность запускать любое количество сеансов оболочки через одно соединение SSH. Из-за превосходства и популярности SSH-2 над SSH-1 некоторые реализации, такие как libssh (v0.8.0 +), Lsh и Dropbear, поддерживают только протокол SSH-2.
В январе 2006 года, намного позже, чем была создана версия 2.1, RFC 4253 указывал, что сервер SSH, который поддерживает как 2.0, так и предыдущие версии SSH, должен идентифицировать свою прототипную версию как 1.99. Это не актуальная версия, а метод определения обратной совместимости.
В 1999 году разработчики, желающие иметь свободную реализацию, вернулись к старому выпуску 1.2.12 исходной программы SSH, который последний раз выпускался под лицензией с открытым исходным кодом. Пакет OSSH Бьорна Грёнвалля был разработан на основе этой кодовой базы. Вскоре после этого разработчики OpenBSD использовали код Грёнвалля и, проделав большую работу над ним, создали OpenSSH, который поставлялся с версией OpenBSD 2.6. Начиная с этой версии, была сформирована ветвь «переносимости» для переноса OpenSSH на другие операционные системы.
По состоянию на 2005 год OpenSSH был самой популярной реализацией SSH, входящей по умолчанию в большое количество операционных систем. OSSH тем временем устарел. OpenSSH продолжает поддерживаться и поддерживает протокол SSH-2, исключив поддержку SSH-1 из кодовой базы с выпуском OpenSSH 7.6.
Стандарты и программные реализации.
Первая версия протокола, SSH-1, была разработана в 1995 году исследователем Тату Улёненом из Технологического университета Хельсинки (Финляндия). SSH-1 был написан для обеспечения большей конфиденциальности, чем протоколы rlogin, telnet и rsh. В 1996 году была разработана более безопасная версия протокола, SSH-2, несовместимая с SSH-1. Протокол приобрёл ещё большую популярность, и к 2000 году у него было около двух миллионов пользователей. В настоящее время под термином «SSH» обычно подразумевается именно SSH-2, так как первая версия протокола ввиду существенных недостатков сейчас практически не применяется.
В 2006 году протокол был утверждён рабочей группой IETF в качестве Интернет‐стандарта.
Распространены две реализации SSH: частная коммерческая и бесплатная свободная. Свободная реализация называется OpenSSH. К 2006 году 80 % компьютеров сети Интернет использовало именно OpenSSH. Частная реализация разрабатывается организацией SSH Communications Security, которая является стопроцентным подразделением корпорации Tectia, она бесплатна для некоммерческого использования. Эти реализации содержат практически одинаковый набор команд.
Протокол SSH-1, в отличие от протокола telnet, устойчив к атакам прослушивания трафика («снифинг»), но неустойчив к атакам «человек посередине». Протокол SSH-2 также устойчив к атакам путём присоединения посередине (), так как невозможно включиться в уже установленную сессию или перехватить её.
Для предотвращения атак «человек посередине» при подключении к хосту, ключ которого ещё не известен клиенту, клиентское ПО показывает пользователю «слепок ключа» (). Рекомендуется тщательно сверять показываемый клиентским ПО «слепок ключа» со слепком ключа сервера, желательно полученным по надёжным каналам связи или лично.
Поддержка SSH реализована во всех UNIX‑подобных системах, и на большинстве из них в числе стандартных утилит присутствуют клиент и сервер ssh. Существует множество реализаций SSH-клиентов и для не-UNIX ОС. Большую популярность протокол получил после широкого развития анализаторов трафика и способов нарушения работы локальных сетей, как альтернативное небезопасному протоколу Telnet решение для управления важными узлами.
Для работы по SSH нужен SSH-сервер и SSH-клиент. Сервер прослушивает соединения от клиентских машин и при установлении связи производит аутентификацию, после чего начинает обслуживание клиента. Клиент используется для входа на удалённую машину и выполнения команд.
Для соединения сервер и клиент должны создать пары ключей — открытых и закрытых — и обменяться открытыми ключами. Обычно используется также и пароль.
Примеры использования SSH.
Команда подключения к локальному SSH-серверу из командной строки GNU/Linux или FreeBSD для пользователя pacify (сервер прослушивает нестандартный порт 30000):
 $ ssh -p 30000 pacify@127.0.0.1
Генерация пары ключей (в UNIX-подобных ОС) осуществляется командой
 $ ssh-keygen
Генерация пары SSH-2 RSA-ключей длиной 4096 бита программой puttygen под UNIX‐подобными ОС:
 $ puttygen -t rsa -b 4096 -o sample
Некоторые клиенты, например, PuTTY, имеют и графический интерфейс пользователя.
Для использования SSH в Python существуют такие модули, как python-paramiko и python-twisted-conch.
SSH-туннелирование.
SSH-туннель — это туннель, создаваемый посредством SSH-соединения и используемый для шифрования туннелированных данных. Используется для того, чтобы обезопасить передачу данных в Интернете (аналогичное назначение имеет IPsec). При пересылке через SSH-туннель незашифрованный трафик любого протокола шифруется на одном конце SSH-соединения и расшифровывается на другом.
Практическая реализация может выполняться несколькими способами:
В данном случае Jabber-клиент настраивается на подключение к порту 4430 сервера localhost (если ssh-клиент запущен на той же машине что и Jabber-клиент).
Для создания ssh-туннеля необходима машина с запущенным ssh-сервером и доступом к jabber.example.com. Такая конфигурация может использоваться в случае, если с локальной машины доступ к jabber.example.com закрыт файрволом, но есть доступ к некоторому ssh-серверу, у которого ограничения доступа в Интернет отсутствуют.

</doc>
<doc id="986" url="https://ru.wikipedia.org/wiki?curid=986" title="TCP/IP">
TCP/IP

TCP/IP — сетевая модель передачи данных, представленных в цифровом виде. Модель описывает способ передачи данных от источника информации к получателю. В модели предполагается прохождение информации через четыре уровня, каждый из которых описывается правилом (протоколом передачи). Наборы правил, решающих задачу по передаче данных, составляют стек протоколов передачи данных, на которых базируется Интернет. Название TCP/IP происходит из двух важнейших протоколов семейства — Transmission Control Protocol (TCP) и Internet Protocol (IP), которые были первыми разработаны и описаны в данном стандарте. Также изредка упоминается как модель DOD (Department of Defense) в связи с историческим происхождением от сети ARPANET из 1970-х годов (под управлением DARPA, Министерства обороны США).
Набор интернет-протоколов обеспечивает сквозную передачу данных, определяющую, как данные должны пакетироваться, обрабатываться, передаваться, маршрутизироваться и приниматься. Эта функциональность организована в четыре слоя абстракции, которые классифицируют все связанные протоколы в соответствии с объёмом задействованных сетей. От самого низкого до самого высокого уровня — это уровень связи, содержащий методы связи для данных, которые остаются в пределах одного сегмента сети; интернет-уровень, обеспечивающий межсетевое взаимодействие между независимыми сетями; транспортный уровень, обрабатывающий связь между хостами; и прикладной уровень, который обеспечивает обмен данными между процессами для приложений.
Развитием архитектуры Интернета и протоколов в модели TCP/IP занимается открытое международное сообщество проектировщиков IETF.
История.
Стек протоколов TCP/IP был создан на основе NCP (Network Control Protocol) группой разработчиков под руководством Винтона Серфа в 1972 году. В июле 1976 года Винт Серф и Боб Кан впервые продемонстрировали передачу данных с использованием TCP по трём различным сетям. Пакет прошёл по следующему маршруту: Сан-Франциско — Лондон — Университет Южной Калифорнии. К концу своего путешествия пакет проделал не потеряв ни одного бита. В 1978 году Серф, Джон Постел и решили выделить в TCP две отдельные функции: межсетевой протокол). TCP был ответственен за разбивку сообщения на датаграммы () и соединение их в конечном пункте отправки. IP отвечал за передачу (с контролем получения) отдельных датаграмм. Вот так родился современный протокол Интернета. А с 1 января 1983 года ARPANET перешла на новый протокол. Этот день принято считать официальной датой рождения Интернета.
Формальная спецификация и стандарты.
Технические стандарты, лежащие в основе набора TCP/IP протоколов, были переданы Инженерному совету Интернета (IETF).
Характеристикой архитектуры Internet Protocol Suite является широкое разделение на рабочие области для протоколов, составляющих его основную функциональность. Определяющей спецификацией пакета является RFC 1122, которая в общих чертах описывает четыре уровня абстракции. Они выдержали испытание временем, поскольку IETF никогда не изменяла эту структуру. Как таковая модель сети TCP/IP предшествует модели OSI, более всеобъемлющей эталонной структуре для общих сетевых систем.
Уровни стека TCP/IP.
Стек протоколов TCP/IP включает в себя четыре уровня:
Протоколы этих уровней полностью реализуют функциональные возможности модели OSI. На стеке протоколов TCP/IP построено всё взаимодействие пользователей в IP-сетях. Стек является независимым от физической среды передачи данных, благодаря чему, в частности, обеспечивается полностью прозрачное взаимодействие между проводными и беспроводными сетями.
Прикладной уровень.
На прикладном уровне (Application layer) работает большинство сетевых приложений.
Эти программы имеют свои собственные протоколы обмена информацией, например, Интернет-браузер для протокола HTTP, ftp-клиент для протокола FTP (передача файлов), почтовая программа для протокола SMTP (электронная почта), SSH (безопасное соединение с удалённой машиной), DNS (преобразование символьных имён в IP-адреса) и многие другие.
В массе своей эти протоколы работают поверх TCP или UDP и привязаны к определённому порту, например:
Эти порты определены Агентством по выделению имён и уникальных параметров протоколов (IANA).
К этому уровню относятся: Echo, Finger, Gopher, HTTP, HTTPS, IMAP, IMAPS, IRC, NNTP, NTP, POP3, POPS, QOTD, RTSP, SNMP, SSH, Telnet, XDMCP.
Транспортный уровень.
Протоколы транспортного уровня (Transport layer) могут решать проблему негарантированной доставки сообщений («дошло ли сообщение до адресата?»), а также гарантировать правильную последовательность прихода данных. В стеке TCP/IP транспортные протоколы определяют, для какого именно приложения предназначены эти данные.
Протоколы автоматической маршрутизации, логически представленные на этом уровне (поскольку работают поверх IP), на самом деле являются частью протоколов сетевого уровня; например OSPF (IP-идентификатор 89).
TCP (IP-идентификатор 6) — «гарантированный» транспортный механизм с предварительным установлением соединения, предоставляющий приложению надёжный поток данных, дающий уверенность в безошибочности получаемых данных, перезапрашивающий данные в случае потери и устраняющий дублирование данных. TCP позволяет регулировать нагрузку на сеть, а также уменьшать время ожидания данных при передаче на большие расстояния. Более того, TCP гарантирует, что полученные данные были отправлены точно в такой же последовательности. В этом его главное отличие от UDP.
UDP (IP-идентификатор 17) протокол передачи датаграмм без установления соединения. Также его называют протоколом «ненадёжной» передачи, в смысле невозможности удостовериться в доставке сообщения адресату, а также возможного перемешивания пакетов.
В приложениях, требующих гарантированной передачи данных, используется протокол TCP.
UDP обычно используется в таких приложениях, как потоковое видео и компьютерные игры, где допускается потеря пакетов, а повторный запрос затруднён или не оправдан, либо в приложениях вида запрос-ответ (например, запросы к DNS), где создание соединения занимает больше ресурсов, чем повторная отправка.
И TCP, и UDP используют для определения протокола верхнего уровня число, называемое портом.
Сетевой (межсетевой) уровень.
Межсетевой уровень (Network layer) изначально разработан для передачи данных из одной сети в другую. На этом уровне работают маршрутизаторы, которые перенаправляют пакеты в нужную сеть путём расчёта адреса сети по маске сети. Примерами такого протокола является X.25 и IPC в сети ARPANET.
С развитием концепции глобальной сети в уровень были внесены дополнительные возможности по передаче из любой сети в любую сеть, независимо от протоколов нижнего уровня, а также возможность запрашивать данные от удалённой стороны, например в протоколе ICMP (используется для передачи диагностической информации IP-соединения) и IGMP (используется для управления multicast-потоками).
ICMP и IGMP расположены над IP и должны попасть на следующий — транспортный — уровень, но функционально являются протоколами сетевого уровня, и поэтому их невозможно вписать в модель OSI.
Пакеты сетевого протокола IP могут содержать код, указывающий, какой именно протокол следующего уровня нужно использовать, чтобы извлечь данные из пакета. Это число — уникальный "IP-номер протокола". ICMP и IGMP имеют номера, соответственно, 1 и 2.
К этому уровню относятся: DVMRP, ICMP, IGMP, MARS, PIM, RIP, RIP2, RSVP
Канальный уровень.
Канальный уровень () описывает способ кодирования данных для передачи пакета данных на физическом уровне (то есть специальные последовательности бит, определяющих начало и конец пакета данных, а также обеспечивающие помехоустойчивость). Ethernet, например, в полях заголовка пакета содержит указание того, какой машине или машинам в сети предназначен этот пакет.
Примеры протоколов канального уровня — Ethernet, IEEE 802.11 WLAN, SLIP, Token Ring, ATM и MPLS.
PPP не совсем вписывается в такое определение, поэтому обычно описывается в виде пары протоколов HDLC/SDLC.
MPLS занимает промежуточное положение между канальным и сетевым уровнем и, строго говоря, его нельзя отнести ни к одному из них.
Канальный уровень иногда разделяют на 2 подуровня — LLC и MAC.
Кроме того, канальный уровень описывает среду передачи данных (будь то коаксиальный кабель, витая пара, оптическое волокно или радиоканал), физические характеристики такой среды и принцип передачи данных (разделение каналов, модуляцию, амплитуду сигналов, частоту сигналов, способ синхронизации передачи, время ожидания ответа и максимальное расстояние).
При проектировании стека протоколов на канальном уровне рассматривают помехоустойчивое кодирование — позволяющие обнаруживать и исправлять ошибки в данных вследствие воздействия шумов и помех на канал связи.
Сравнение с моделью OSI.
Три верхних уровня в модели OSI, то есть уровень приложения, уровень представления и уровень сеанса, отдельно не различаются в модели TCP/IP, которая имеет только прикладной уровень над транспортным уровнем. Хотя некоторые чистые приложения протокола OSI, такие как X.400, также объединяют их, нет требования, что стек протокола TCP/IP должен накладывать монолитную архитектуру над транспортным уровнем. Например, протокол NFS-приложений работает через протокол представления данных External Data Representation (XDR), который, в свою очередь, работает по протоколу Remote Procedure Call (RPC). RPC обеспечивает надёжную передачу данных, поэтому он может безопасно использовать транспорт UDP с максимальным усилием.
Различные авторы интерпретировали модель TCP/IP по-разному и не согласны с тем, что уровень связи или вся модель TCP/IP охватывает проблемы первого уровня модели OSI (физический уровень) или предполагается, что аппаратный уровень ниже уровня канала.
Несколько авторов попытались включить слои 1 и 2 модели OSI в модель TCP/IP, поскольку они обычно упоминаются в современных стандартах (например, IEEE и ITU). Это часто приводит к модели с пятью слоями, где уровень связи или уровень доступа к сети разделяются на слои 1 и 2 модели OSI.
Усилия по разработке протокола IETF не касаются строгого расслоения. Некоторые из его протоколов могут не соответствовать чисто модели OSI, хотя RFC иногда ссылаются на неё и часто используют старые номера уровня OSI. IETF неоднократно заявлял, что разработка интернет-протокола и архитектуры не должна соответствовать требованиям OSI. В RFC 3439, адресованном интернет-архитектуре, содержится раздел, озаглавленный «Слой, считающийся вредным».
Например, считается, что уровни сеанса и представления пакета OSI включены в прикладной уровень пакета TCP/IP. Функциональность уровня сеанса можно найти в протоколах, таких как HTTP и SMTP, и более очевидна в таких протоколах, как Telnet и протокол инициации сеанса (SIP). Функциональность уровня сеанса также реализована с нумерацией портов протоколов TCP и UDP, которые охватывают транспортный уровень в наборе TCP/IP. Функции уровня представления реализуются в приложениях TCP/IP со стандартом MIME при обмене данными.
Конфликты очевидны также в оригинальной модели OSI, ISO 7498, когда не рассматриваются приложения к этой модели, например, ISO 7498/4 Management Framework или ISO 8648 Internal Organization of the Network layer (IONL). Когда рассматриваются документы IONL и Management Framework, ICMP и IGMP определяются как протоколы управления уровнем для сетевого уровня. Аналогичным образом IONL предоставляет структуру для «зависимых от подсетей объектов конвергенции», таких как ARP и RARP.
Протоколы IETF могут быть инкапсулированы рекурсивно, о чём свидетельствуют протоколы туннелирования, такие как Инкапсуляция общей маршрутизации (GRE). GRE использует тот же механизм, который OSI использует для туннелирования на сетевом уровне.
Существуют разногласия в том, как вписать модель TCP/IP в модель OSI, поскольку уровни в этих моделях не совпадают.
К тому же, модель OSI не использует дополнительный уровень — «Internetworking» — между канальным и сетевым уровнями. Примером спорного протокола может быть ARP или STP.
Вот как традиционно протоколы TCP/IP вписываются в модель OSI: 
Обычно в стеке TCP/IP верхние 3 уровня модели OSI (прикладной, представления и сеансовый) объединяют в один — прикладной. Поскольку в таком стеке не предусматривается унифицированный протокол передачи данных, функции по определению типа данных передаются приложению.
Описание модели TCP/IP в технической литературе.
В модели TCP/IP, в отличие от модели OSI, физический уровень никак не описывается. Тем не менее, в некоторых учебниках, для лучшего понимания, описывается «гибридная модель TCP/IP — OSI» из 5 уровней, содержащая дополнительный — физический уровень.
Следующая таблица показывает различные вариации в описании модели TCP/IP. Количество уровней варьируется от трёх до семи.
Некоторые из моделей в приведённой таблицы взяты из учебников, которые являются вторичными источниками и могут расходиться с RFC 1122 и другими IETF-первоисточниками.

</doc>
<doc id="989" url="https://ru.wikipedia.org/wiki?curid=989" title="WackoWiki">
WackoWiki

WackoWiki (произносится как "Ва́ккоВики", в документации часто используется просторечное название "Ва́ка") — вики-движок на PHP. В настоящий момент выпущена версия R6.1.
Основные особенности.
Основное предполагаемое применение, на которое рассчитан движок — совместная работа группы над некоторым проектом, представляющим собой набор совместно редактируемых документов. В связи с этим в движке реализован достаточно мощный механизм разграничения прав, позволяющий ограничивать возможности пользователей по воздействию на документы (создатель страницы и администратор системы имеют возможность для операций чтения, изменения и комментирования её содержимого назначить список групп и конкретных пользователей, которым данная операция доступна). Также движок поддерживает автоматическое уведомление пользователей об изменениях в наблюдаемых страницах.
Выбранный в движке способ ввода и редактирования текстов типичен для вики-движков: оформление текста делается с помощью несложной системы вики-разметки. Синтаксис разметки минимизирует переключение раскладок клавиатуры. Особенностью данной реализации является автоматический корректор типографики — некоторые действия по оформлению текста при выводе производятся автоматически, без преобразования исходного текста страницы (например, знак «минус», помещённый в тексте между словами и отделённый от них пробелами, автоматически преобразуется в типографское длинное тире, обычные парные кавычки — в кавычки-"ёлочки"). WikiEdit — javascript-расширение обычного поля ввода, позволяет вводить вики-разметку при помощи «горячих клавиш». Реализована довольно широкая номенклатура «форматеров» — средств для структурированного вывода текстов в различных формализованных видах, таких как логи IM, исходные тексты программ на языках PHP и SQL и т. п.
Для упрощения оформления ссылок на вики-страницы в движке поддерживается соглашение, по которому выражение, записанное в стиле CamelCase (например, «ВотТакоеСлово»), считается именем страницы и автоматически преобразуется при выводе в ссылку на страницу с соответствующим именем. Это упрощает оформление (чтобы поставить ссылку на страницу с подобным именем, не нужно никакой разметки), что провоцирует соответствующее именование страниц на вики-сайтах, поддерживаемых данным движком.
Для структуризации набора страниц используется механизм «кластеров». Страницы организуются в структуру, подобную древовидной файловой системе; присваиванием новой странице соответствующего имени она может быть помещена в нужное место этой структуры. Поддерживается два вида синтаксиса для описания страниц в кластере: url-like и twiki-like.
Механизм «действий» (по сути — макросов, помещаемых в текст и при выводе автоматически заменяемых на определяемую действием информацию) позволяет автоматически выводить на страницы служебную информацию, например, формировать оглавления страниц, списки содержимого кластеров, перекрёстные ссылки и многое другое.
Система многоязычна — на данный момент доступны 20 языков (bg, da, de, el, en, es, et, fa, fr, hi, hu, it, ja, ko, nl, pl, pt, ru, zh-tw, zh).&lt;br&gt;Использует кодировку UTF-8.
Поддерживаются устройства с различными размерами экранов благодаря адаптивному дизайну шаблона оформления.
История.
Движок WackoWiki был создан на основании более раннего проекта WakkaWiki (разработчики Carlos Zottman и Hendrik Mans), предназначенного для совместной разработки в рамках небольших intranet-проектов. Разработка исходного движка была остановлена на стадии версии 0.1.2, в 2003 году. На его основе было запущено несколько (не менее шести) fork-проектов, одним из которых и стал WackoWiki.

</doc>
<doc id="993" url="https://ru.wikipedia.org/wiki?curid=993" title="WWW">
WWW



</doc>
<doc id="995" url="https://ru.wikipedia.org/wiki?curid=995" title="Telnet">
Telnet

TELNET (сокр. от ) — сетевой протокол для реализации текстового терминального интерфейса по сети (в современной форме — при помощи транспорта TCP). Название «telnet» имеют также некоторые утилиты, реализующие клиентскую часть протокола. Современный стандарт протокола описан в RFC 854.
Выполняет функции протокола прикладного уровня модели OSI. Протокол telnet использовался для удалённого администрирования различными сетевыми устройствами и программными серверами, но уступил SSH из-за безопасности. Тем не менее может являться единственной возможностью взаимодействовать через CLI со встраиваемыми системами, например, с маршрутизаторами, так как на них отсутствует ssh.
Введение.
Назначение протокола TELNET — в предоставлении достаточно общего двунаправленного восьмибитного байт-ориентированного средства связи. Его основная задача заключается в том, чтобы позволить терминальным устройствам и терминальным процессам взаимодействовать друг с другом. Предполагается, что этот протокол может быть использован для связи вида терминал-терминал («связывание») или для связи процесс-процесс («распределенные вычисления»).
Устройство.
Хотя в сессии Telnet выделяют клиентскую и серверную стороны, протокол на самом деле полностью симметричен. После установления транспортного соединения (как правило, TCP) оба его конца играют роль «сетевых виртуальных терминалов» (, NVT), обменивающихся двумя типами данных:
Хотя Telnet-сессии, выполняющейся по TCP, свойственен полный дуплекс, NVT должен рассматриваться как полудуплексное устройство, работающее по умолчанию в буферизированном строковом режиме.
Прикладные данные проходят через протокол без изменений, то есть на выходе второго виртуального терминала мы видим именно то, что было введено на вход первого. С точки зрения протокола данные представляют просто последовательность байтов (октетов), по умолчанию принадлежащих набору ASCII, но при включённой опции "Binary" — любых.
Хотя были предложены расширения для идентификации набора символов, на практике ими не пользуются.
Все значения октетов прикладных данных, кроме 0xFF (десятичное: 255), передаются по транспорту как есть. Значение 0xFF передаётся последовательностью из двух октетов 0xFF. Это связано с тем, что октет 0xFF используется на транспортном уровне для кодирования опций.
Опции.
Протокол предоставляет по умолчанию минимальную функциональность и набор расширяющих её опций. Принцип оговорённых опций требует проводить переговоры при включении каждой из опций. Одна сторона инициирует запрос, а другая сторона может либо принять, либо отвергнуть предложение. Если запрос принимается, то опция немедленно вступает в силу. Опции описаны отдельно от протокола как такового, и их поддержка программным обеспечением произвольна. Клиенту протокола (сетевому терминалу) предписывается отвергать запросы на включение неподдерживаемых и неизвестных опций.
Принтер и клавиатура NVT.
Принтер NVT имеет неопределённую ширину каретки и длину страницы и должен иметь представление всех 95 печатных символов US-ASCII (коды с 32 по 126). Управляющие символы имеют следующие значения:
Поддержка действия символов, помеченных как *, обязательна. Прочие могут производить заданное действие или не производить никакого; одна сторона не обязана предполагать ничего определённого о поддержке конкретных необязательных управляющих символов другой стороной.
Последовательность «CR LF» должна обрабатываться как единый символ перевода строки и использоваться всякий раз, когда требуется их объединённое действие; последовательность «CR NUL» должна использоваться, где требуется только возврат каретки; использования символа CR следует избегать в других контекстах.
Структура команд Telnet.
Каждая команда TELNET является многобайтовой последовательностью, начинающейся с кода 0xFF (десятичное: 255) «Interpret as Command» (IAC) и кода команды. Команды, отвечающие за договорённости по опции, являются трёхбайтовыми последовательностями, где третий байт является кодом опции. Нижеперечисленные коды и кодовые последовательности имеют соответственный смысл, только когда следуют сразу за IAC.
Применения.
Исторически Telnet служил для удалённого доступа к интерфейсу командной строки операционных систем. Впоследствии его стали использовать для прочих текстовых интерфейсов, вплоть до игр MUD и анимированного ASCII-art. Теоретически даже обе стороны протокола могут являться не только людьми, но и программами.
Иногда клиенты telnet используются для доступа к другим протоколам на основе транспорта TCP, см. Telnet и другие протоколы.
Протокол telnet используется в управляющем соединении FTP, то есть заходить на сервер командой codice_1 для выполнения отладки и экспериментов не только возможно, но и правильно (в отличие от применения клиентов telnet для доступа к HTTP, IRC и большинству других протоколов).
Telnet, наряду с HTTP, является основным протоколом для удалённой работы с сетевым оборудованием (управляемые коммутаторы и маршрутизаторы) и, в отличие от веб-интерфейса, предоставляет полный доступ к функциональным возможностям устройства, но при этом требует от специалиста навыков работы с командной строкой.
Безопасность.
В протоколе не предусмотрено использование ни шифрования, ни проверки подлинности данных. Поэтому он уязвим для любого вида атак, к которым уязвим его транспорт, то есть протокол TCP. Для функциональности удалённого доступа к системе в настоящее время применяется сетевой протокол SSH (особенно его версия 2), при создании которого упор делался именно на вопросы безопасности. Так что следует иметь в виду, что сессия Telnet весьма беззащитна, если только не осуществляется в полностью контролируемой сети или с применением защиты на сетевом уровне (различные реализации виртуальных частных сетей). По причине ненадёжности от Telnet как средства управления операционными системами давно отказались.
Telnet и другие протоколы.
В среде специалистов по технологиям Интернета клиент Telnet иногда используется для осуществления ручного доступа (например, в целях отладки) к таким протоколам прикладного уровня, как HTTP, IRC, SMTP, POP3 и прочим текст-ориентированным протоколам на основе транспорта TCP.
Однако использование клиента telnet в качестве клиента TCP может вызывать следующие нежелательные эффекты:
Такие программы, как netcat, действительно обеспечивают чистый доступ к TCP, однако требуются специальные ухищрения (как-то codice_2 на UNIX-системе) для передачи перевода строки как CR LF (что требуется многими протоколами). Обычно клиент Telnet по умолчанию передаёт любой перевод строки как CR LF, независимо от его кодирования в системе клиента.
Также для отладочного доступа к прикладным протоколам (кроме FTP и, собственно, Telnet) можно использовать клиент PuTTY в режиме «Raw» (чистый доступ к TCP) — PuTTY преобразует переводы строки отдельно от поддержки протокола Telnet.

</doc>
<doc id="996" url="https://ru.wikipedia.org/wiki?curid=996" title="Вики">
Вики

Ви́ки () — веб-сайт, данные которого пользователи могут самостоятельно изменять с помощью инструментов, предоставляемых самим сайтом. Форматирование текста и вставка различных объектов в текст производятся с использованием вики-разметки. В частности, на базе этих принципов построена Википедия и другие проекты Фонда Викимедиа.
История.
Впервые термин «вики» для описания веб-сайта был использован в 1995 году Уордом Каннингемом, разработчиком первой вики-системы WikiWikiWeb, «Портлендского хранилища образцов» программного кода, созданной 25 марта 1995 года, который заимствовал слово гавайского языка, означающее «быстрый». Каннингем объяснил выбор названия движка тем, что он вспомнил работника международного аэропорта Гонолулу, посоветовавшего ему воспользоваться вики-вики шаттлом — небольшим автобусом, курсировавшим между терминалами аэропорта. Каннингем же планировал сделать движок, позволявший пользователям максимально быстро редактировать и создавать статьи. Каннингем первоначально описал вики как «простейшую онлайн-базу данных, которая может функционировать». Позже этому слову был придуман английский бэкроним («то, что я знаю, это…»).
Сущность концепции вики.
Уорд Каннингем и его соавтор Бо Леуф в их книге The Wiki Way: Quick Collaboration on the Web описали сущность концепции вики следующим образом:
Определяющие свойства.
Вики характеризуется такими признаками:
Техническая основа.
Для создания вики-среды необходимо особое ПО — "движок вики". Это частный вид систем управления сайтом, довольно простой в своём устройстве и функциональности, поскольку почти все действия по структурированию и обработке содержимого делаются пользователями вручную.
Работа Википедии и других сайтов Фонда Викимедиа основана на движке MediaWiki.
Особенности.
Язык вики поддерживает гиперссылки для создания ссылок между вики-страницами и является более наглядным, чем HTML, и более безопасным, поскольку использование JavaScript и каскадных таблиц стилей ограничено.
Вандализм.
Многие вики позволяют изменять своё содержимое всем желающим, а не только зарегистрированным пользователям. Подобно тому, как стены зданий и заборы исписывают непристойными надписями и украшают рисунками граффити, в таких вики иногда портят содержимое или добавляют что-то неуместное. Но, в отличие от стен и заборов, в вики легко вернуть содержимое к ранней версии: исправлять легче, чем портить. Если же кто-либо настойчиво и намеренно стремится навредить пользователям вики-сайта, можно закрыть ему возможность вносить правки.

</doc>
<doc id="997" url="https://ru.wikipedia.org/wiki?curid=997" title="Википедия">
Википедия

Википе́дия (, произносится , разг. «Ви́ки» по названию технологии веб-сайта, также «Руви́ки» — название русскоязычного раздела) — многоязычная общедоступная интернет-энциклопедия со свободным контентом, поддержку и написание которой осуществляют добровольцы — «википедисты», посредством и с использованием программного обеспечения (сайта) MediaWiki, а также системы редактирования на основе . Википедия является самым крупным и наиболее читаемым справочником, а также самой полной энциклопедией из когда-либо создававшихся за всю историю человечества. По состоянию на февраль 2024 года сайт находится на 7 месте по посещаемости в мире по версии компании SimilarWeb, занимающейся анализом интернет-трафика.
Запущена 15 января 2001 года Джимми Уэйлсом и Ларри Сэнгером. Владелец сайта — американская некоммерческая организация «Фонд Викимедиа».
Название энциклопедии образовано от английских слов («вики»; в свою очередь заимствовано из гавайского языка, в котором оно имеет значение «быстро») и («энциклопедия»). Одним из основных достоинств Википедии как универсальной энциклопедии является возможность представления информации на родном языке пользователя. В Википедии есть на различных языках мира, а также сотни языковых разделов, . Она содержит более 60 миллионов статей.
Главной особенностью Википедии является то, что создавать и редактировать статьи в ней может любой пользователь Интернета, поскольку она построена на принципе «вики» — технологии веб-сайта, предоставляющей пользователям инструменты для редактирования текста в нём. Все вносимые такими добровольцами изменения незамедлительно становятся доступными для просмотра всем посетителям сайта. В декабре 2013 года в заявлении ЮНЕСКО по случаю награждения Джимми Уэйлса, основателя Википедии, Золотой медалью Нильса Бора про Википедию было сказано, что она является «символом эпохи взаимодействия, в которую мы живём, и это не просто инструмент, это воплощение мечты, столь же древней, как само человечество, как собрания Александрийской библиотеки».
Поскольку Википедию, будучи не ознакомленным с темой статьи в ней, исходя из концепции «Вики», может редактировать любой интернет-пользователь, её надёжность и точность неоднозначны. Википедию критикуют за возможность добавления ложной, непроверенной или неактуальной информации и вандализма на её страницах, однако научные исследования свидетельствуют о том, что вандализм обычно оперативно устраняют.
Раздел Википедии на русском языке, по состоянию на , насчитывает различной тематики, занимая -е место по количеству статей среди .
Модель функционирования.
В отличие от традиционных энциклопедий, таких как Encyclopædia Britannica, ни одна статья в Википедии не проходит формального процесса экспертной оценки. Любая статья Википедии может редактироваться как с учётной записи , так и без регистрации в проекте (за исключением некоторых страниц, подверженных частому вандализму, которые доступны для изменения только определённым категориям участников или, в крайних случаях, только администраторам Википедии), и при этом все внесённые в статью изменения незамедлительно становятся доступными для просмотра любыми пользователями. Поэтому Википедия «не гарантирует истинности» своего содержимого, ведь в любом случае между моментом, когда в статью будет внесена какая-то недостоверная информация, и моментом, когда эта информация будет удалена из статьи другим участником Википедии (более компетентным в данной области знания), пройдёт определённое время. (Естественно, для того чтобы обнаружить и удалить из статьи явный вандализм, нужно намного меньше времени, чем для того, чтобы освободить статью от недостоверной информации, когда подобная недостоверность не является особо очевидной.)
Содержимое Википедии подпадает под действие законов и нескольких редакционных политик и руководств, которые призваны укрепить идею о том, что Википедия является энциклопедией.
Каждый вклад в Википедию должен быть по теме, являющейся энциклопедической. Тема считается энциклопедической, если она является «» на жаргоне Википедии, то есть если она получила значительное освещение во вторичных (например в центральных СМИ или серьёзных научных журналах), которые являются независимыми от предмета темы.
В Википедии должна отражаться информация, которая уже установлена и признана. Иными словами, статья не должна быть «площадкой» для размещения чьих бы то ни было собственных идей, теорий, исследований, изобретений, личных мнений, оценок чего бы то ни было, искусствоведческой критики и т. п. Информация в статьях, которая, скорее всего, будет поставлена под сомнение, требует . Сообщество Википедии сформулировало это как «», выражая тем самым ту мысль, что читателям предоставляется возможность самим проверить истинность той информации, которая представлена в статьях, и сделать свои собственные выводы. Википедия не становится на чью-либо сторону.
В рамках статьи Википедии все мнения и точки зрения должны иметь соответствующую долю освещения по данному вопросу, если они имеют свои подтверждения во внешних источниках.
Все участники, они в проекте или нет, могут пользоваться функциями программного обеспечения, на котором работает Википедия. Так, на странице «История», прилагающейся к каждой статье Википедии, доступны записи каждой предыдущей редакции статьи (версии с угрозами криминального характера, и т. п. могут быть скрыты от просмотра). Эта функция позволяет легко сравнить нынешнюю и более старые версии статьи, отменить изменения («откатить статью»), которые участник посчитает неверными, или восстановить потерянное содержимое. Страница «», прилагающаяся к каждой статье Википедии, используется в целях координации работы над текстом этой статьи между разными участниками проекта.
Постоянные участники нередко используют «», в который заносят интересные для себя статьи, и таким образом могут легко отслеживать все недавние . Компьютерные программы, называемые , в Википедии широко используются для удаления вандализма, как только он был произведён, а также для исправления общих ошибок и стилистических проблем или создания статей, например, о географических объектах или биологических видах в стандартном формате из статистических данных.
История.
Википедия началась как дополнительный проект для «Нупедии» — бесплатного англоязычного энциклопедического онлайн-проекта, статьи которого были написаны специалистами и рецензированы в рамках формального процесса. «Нупедия» была основана 9 марта 2000 года как собственность Bomis, Inc. — компании, владеющей одноимённым веб-порталом. Ключевыми фигурами были Джимми Уэйлс, Bomis и Ларри Сэнгер, главный редактор «Нупедии», а затем Википедии. «Нупедия», первоначально лицензированная в соответствии со своей лицензией , перешла на перед основанием Википедии по настоянию Ричарда Столлмана.
Основателями Википедии выступили Ларри Сэнгер и Джимми Уэйлс.
В то время как Уэйлсу приписывается определение цели создания публично редактируемой энциклопедии, Сэнгеру обычно приписывают контринтуитивную стратегию использования вики для достижения этой цели.
10 января 2001 года Ларри Сэнгер в списке рассылки «Нупедии» предложил применить концепцию «вики» в отношении «Нупедии», чтобы ускорить её развитие. Это привело к созданию веб-сайта Википедии, которая изначально задумывалась для предварительной разработки материалов, которые потом были бы размещены в «Нупедии». Название «Википедия» также было предложено Сэнгером.
Википедия была официально открыта 15 января 2001 года как одиночный англоязычный раздел на www.wikipedia.com и была анонсирована Сэнгером в списке рассылки «Нупедии». Политика «нейтральной точки зрения» в Википедии была введена в первые месяцы и была аналогична ранней политике «непредубеждения» в «Нупедии». В других отношениях, первоначально существовало относительно немного правил, и Википедия управлялась независимо от «Нупедии».
На ранней стадии Википедия развивалась за счёт участников из «Нупедии», сообщений на и индексации поисковыми машинами. Она выросла примерно до 20 тысяч статей и 18 языковых разделов к концу 2001 года. Она содержала 26 языковых разделов к концу 2002 года, 46 — к концу 2003 года и 161 — к последним дням 2004 года.
«Нупедия» и Википедия сосуществовали, пока серверы первой не были навсегда отключены в 2003 году (текст «Нупедии» был включён в Википедию). Английская Википедия прошла отметку в 2 млн статей 9 сентября 2007 года, что делает её крупнейшей энциклопедией, собравшей всё и затмившей даже энциклопедию Юнлэ (1407), которая держала рекорд ровно 600 лет.
Ссылаясь на опасения по поводу коммерческой рекламы и отсутствие контроля в осознанном англоцентризме Википедии, пользователи испанской Википедии выделились из Википедии для создания "" в феврале 2002 года.
Позднее в том же году Уэйлс объявил о том, что Википедия не будет отображать рекламу, и её веб-сайт был перемещён на wikipedia.org. Некоторые другие проекты выделились из Википедии по редакционным причинам. не требует нейтральной точки зрения и разрешает оригинальные исследования. Новые проекты, вдохновлённые Википедией, такие как , , и , были начаты в ответ на осознание ограничений Википедии, таких как политика в области рецензирования, оригинальных исследований и коммерческой рекламы.
Фонд Викимедиа () был создан из Википедии и «Нупедии» 20 июня 2003 года. Он использовался в для регистрации товарного знака «» 17 сентября 2004 года. 10 января 2006 года знаку был предоставлен зарегистрированный статус. 16 декабря 2004 года товарный знак получил защиту со стороны Японии, 20 января 2005 года — в Европейском союзе. Существуют планы лицензирования торговой марки Википедии для некоторых продуктов, таких как книги и DVD. В ноябре 2015 года Википедия получила Премию Эразма.
Сообщество.
Пользователи Википедии — это:
Участники Википедии образуют . Структура этого сообщества — , то есть это своего рода структура власти.
Участники Википедии с хорошей репутацией в сообществе могут баллотироваться на один из многих уровней добровольного руководства; это начинается с «администратора», самой большой группы привилегированных пользователей (1594 учётных записей в английской Википедии, по состоянию на 30 сентября 2008 года), которые имеют возможность удаления страниц, блокировки статей от изменений в случае вандализма или редакторских споров и блокировки участников. Несмотря на название, администраторы не имеют никаких особенных привилегий в процессе принятия решений, и им запрещено использовать свои полномочия для урегулирования споров. Роли администраторов часто описываются как «уборка» и в основном ограничиваются внесением правок, имеющих эффект в масштабах всего проекта (и поэтому запрещённых для обычных редакторов, чтобы минимизировать нарушения), а также блокировкой пользователей для предотвращения разрушительных правок, таких как вандализм. 
Поскольку Википедия развивается на основе нетрадиционной модели составления энциклопедии, вопрос «Кто пишет „Википедию“?» стал одним из наиболее часто задаваемых вопросов по проекту, часто со ссылкой на другие проекты Веб 2.0, такие как Digg или, например, News2 и Хабрахабр. Джимми Уэйлс однажды утверждал, что только «сообщество… преданная группа нескольких сотен добровольцев» делает основной вклад в Википедию и что этот проект является поэтому «очень похожим на любую традиционную организацию». Это было позже оспорено Аароном Шварцем, который заметил, что в ряде просмотренных им статей значительную долю содержимого составлял вклад участников с малым количеством правок.
Исследование учёных из Дартмутского колледжа, проведённое в 2007 году, установило, что анонимы и те пользователи, которые редко делают вклад в Википедию, являются таким же надёжным источником знаний, как и те, которые зарегистрированы на сайте. Хотя некоторые участники сильны в своей области, Википедия требует, чтобы даже их вклады были подкреплены опубликованными и поддающимися проверке источниками. Это предпочтение консенсуса наличию образования было отмечено как «антиэлитарность».
В августе 2007 года сайт, разработанный аспирантом по компьютерным наукам Вирджилом Гриффитом и названный , начал публичное функционирование. прослеживает источники миллионов изменений, произведённых в Википедии анонимными редакторами, и показывает, что многие из этих правок делаются из корпораций или правительственных учреждений в статьях, связанных с ними, их персоналом или их работой, из которых они пытаются удалить критику. 
В 2003 году в исследовании о Википедии как о сообществе студент Andrea Ciffolilli утверждал, что низкие операционные затраты участия в вики создают катализатор для совместного развития и что подход «творческого развития» поощряет участие. В своей книге «Будущее Интернета и как его остановить» 2008 года Jonathan Zittrain из Оксфордского института Интернета и Гарвардской школы права ссылается на Википедию как социологическое исследование в том, как открытое сотрудничество способствовало инноваторству в Сети. В 2007 году исследователь Одед Нов опубликовал работу о мотивации, которой руководствуются википедисты. Нов считает, что участники редактируют Википедию, исходя из следующих видов мотивации: защитной («когда я правлю „Википедию“, я чувствую себя не так одиноко»), желание внести вклад в общее дело («мне кажется, важно помогать другим»), мотивации карьеры («я могу получить новые контакты, которые могут помочь в моём бизнесе или карьере»), социальной, познавательной («написание „Википедии“ позволяет мне взглянуть на вещи по-новому»), желание быть кому-то нужным («когда я правлю „Википедию“, я чувствую себя востребованным»), потребность в положительных эмоциях («писать/править „Википедию“ — это весело»), идеологической.
Языковые разделы.
На 30 июня 2015 года существовало 290 , из них 51 раздел содержал более статей, а 237 — более 1000 статей. Посещаемость разделов изменяется со временем. К октябрю 2009 года русская Википедия вышла на 5-ю позицию в списке посещаемости. По состоянию на август 2013 года русская Википедия находилась на 4-м месте. Первые 5 разделов в это время имели следующий процент посещений, от общего числа: английская — ; испанская — ; немецкая — ; русская — ; японская — .
Википедия является сетевой энциклопедией, поэтому участники одного и того же языкового раздела могут использовать различные диалекты и могут быть из разных стран (как в случае с английским разделом). Эти различия могут привести к некоторым конфликтам из-за различного написания слов (например ' vs. ') или точек зрения. Несмотря на то, что различные языковые разделы придерживаются глобальной политики, такой как нейтральная точка зрения, они расходятся по некоторым вопросам политики и практики, особенно по вопросу, могут ли изображения, которые не лицензируются по свободной лицензии, использоваться согласно требованиям добросовестного использования.
Джимми Уэйлс описал Википедию как «усилия по созданию и распространению свободной энциклопедии самого высокого качества для каждого человека на планете на его собственном языке». Несмотря на то, что функционирование каждого языкового раздела более или менее самостоятельно, предприняты некоторые усилия для контроля всех разделов. Они координируются частично Мета-вики, вики Фонда Викимедиа, посвящённой поддержанию всех его проектов (Википедия и др.). Например, Мета-вики предоставляет всех языковых разделов Википедии и поддерживает . Список касается основного содержания таких предметов, как биография, история, география, общество, культура, наука, технология, продовольствие и математика. Что касается остального, то нередко для статей, тесно связанных с конкретным языком, нет копии в другом разделе. Например, статьи о малых городах США могут быть доступны только на английском.
Переводные статьи представляют лишь небольшую долю статей в большинстве разделов, в частности потому, что автоматизированный перевод статей не разрешён. Статьи, доступные более чем на одном языке, могут иметь «интервики»-ссылки, которые связывают статьи с их копиями в других разделах.
Критика.
Википедия . Прежде всего информация, тексты Википедии объективно подвержены . Другими основными объектами являются:
Критики Википедии указывают на то, что участники Википедии совместно пишут и пересматривают её правила, политики и руководства, а затем, зачастую чисто формально и очень негибко их придерживаясь, удаляют, аннотируя тегами комментариев, или изменяют материалы , формально не отвечающие этим правилам, политикам и руководствам (см. также и ).
Сообщество Википедии было также описано как «подобное культу», хотя и не всегда с исключительно негативной коннотацией и было раскритиковано за неспособность привлечь неопытных пользователей к работе в проекте.
Также обращают внимание на системную предвзятость, несбалансированность в освещении тем, а также критикуют её политику предпочтения консенсуса между участниками профессионализму отдельных участников в редакционном процессе.
Открытый характер модели является центральным для большой части . Например, исходя из этого, можно упрекать Википедию в том, что читатель статьи не может быть уверен без ознакомления со страницей её «истории», была ли эта статья вандализирована. Критики утверждают, что редактирование статей неэкспертами подрывает качество представленного в статье материала. Поскольку участники обычно, как правило, переписывают или редактируют отдельные небольшие части , а не всю её целиком, высоко- и низкокачественные материалы могут идти вперемешку в пределах одной статьи. Историк Рой Розенцвейг отметил: «В целом, написание является „ахиллесовой пятой“ Википедии. Комитеты редко пишут хорошо, и статьи Википедии часто имеют изменчивое качество, что является результатом связывания вместе предложений или абзацев, написанных разными людьми».
Всё это привело к вопросу о надёжности Википедии в качестве источника .
Модель Википедии позволяет редактировать её статьи всем желающим и полагается на большую группу благонамеренных редакторов в преодолении проблем, вызванных сомнительными редакторами. Она основана и на принципе, согласно которому подавляющее большинство участников Википедии . Модели редактирования Википедии свойственна возможность добавления низкокачественной информации. Возможность анонимного редактирования может быть не только большим благом для проекта, но и источником некоторого вреда.
Википедия может подвергаться воздействию вандалов. Вандализм в Википедии — явно вредительское добавление, удаление или изменение содержания, совершённое умышленно в целях скомпрометировать достоверность и авторитетность энциклопедии. В основном вандализм проявляется в замене содержимого статей Википедии на ругательства, граффити, заведомо ложные данные или другое содержимое, абсолютно не имеющее отношения к теме статьи. В случаях множественного вандализма к некоторым страницам Википедии может быть применена .
Являясь общедоступным интернет-справочником, Википедия также содержит материалы, которые другие участники Википедии могут признать нежелательными, оскорбительными или порнографическими. Например, в 2008 году Википедия отклонила массовое онлайн-обращение против включения изображения Мухаммеда в её английский раздел, сославшись на свою редакционную политику. Наличие в Википедии материалов, «неудобных» с политической точки зрения, также побудило КНР заблокировать доступ к части Википедии для китайских пользователей (см. также Блокирование Википедии британской организацией Internet Watch Foundation).
Один из основателей Википедии Ларри Сэнгер, который является и одним из её самых жёстких критиков, в 2015 году заявил, что для него Википедия стала разочарованием, поскольку она была захвачена троллями и участниками, чей антиэлитаризм поставил крест на достоверности статей. По словам Сэнгера, Википедия напоминает «психбольницу, управление которой осуществляют сумасшедшие».
Управление.
Фонд Викимедиа и движение «Викимедиа».
Техническое функционирование Википедии обеспечивает «Фонд Викимедиа» — некоммерческая организация, которая также поддерживает работу ряда других вики-проектов и осуществляет их финансирование. Фонд также владеет торговой маркой «Wikipedia», но в содержание энциклопедии и в деятельность добровольцев, создающих энциклопедию, практически никак не вмешивается. Фонд, поддерживаемые им проекты и глобальное сообщество добровольных редакторов образуют Движение Викимедиа. В разных странах созданы региональные организации (т. н. «Отделения Викимедиа») и местные ассоциации википедистов, которые также участвуют в продвижении, развитии и финансировании проекта.
Программное и аппаратное обеспечение.
Функционирование Википедии зависит от  — программного механизма для веб-сайтов, работающих по технологии «вики». написан на PHP и для хранения данных использует реляционную базу данных (можно использовать MySQL, PostgreSQL, SQLite) и поддерживает использование программ memcached и Squid. предоставляет интерфейс для работы с базой страниц, разграничение прав доступа к администрированию системы, возможность обработки текста как в собственном формате, так и в форматах HTML и TeX (для формул), возможность загрузки изображений и других файлов, а также другие возможности. Гибкая система расширений позволяет пользователям добавлять собственные новые возможности и программные интерфейсы. лицензирован под и используется всеми проектами Викимедиа, а также многими другими вики-проектами. Первоначально Википедия работала на , написанном на Perl Клиффордом Адамсом («Фаза I»), который первоначально требовал для указания ссылок на статьи; используемый стиль двойных скобок был включён позже. С января 2002 года («Фаза II») Википедия начала работать на PHP-викидвижке с базой данных MySQL; это ПО было сделано на заказ для Википедии Магнусом Манске. ПО «Фазы II» было неоднократно модифицировано с учётом экспоненциально растущего спроса. В июле 2002 года («Фаза III») Википедия перешла на третье поколение программного обеспечения, движок , первоначально написанный Даниэлем Ли Крокером.
Википедия в настоящее время работает на выделенных кластерах серверов Linux (в основном Ubuntu), с несколькими машинами OpenSolaris для ZFS. Вики-проекты Фонда Викимедиа, самым крупным из которых является Википедия, по состоянию на март 2013 года поддерживались работой нескольких кластеров, состоящих из 974 серверов.
Википедия работала на одном сервере до 2004 года, когда настройка сервера была расширена в распределённую многоуровневую архитектуру. В январе 2005 года проект работал на 39 выделенных серверах, расположенных в штате Флорида. Эта конфигурация включала в себя один главный сервер баз данных с запущенным MySQL, несколько подчинённых серверов баз данных, 21 веб-сервер с запущенным и 7 серверов кэша Squid.
Википедия получает от до запросов страниц в секунду, в зависимости от времени суток. Запрос страницы сначала передаётся внешнему уровню кэширующих серверов Squid. Запросы, которые не могут быть обслужены кэшем Squid, направляются на балансирующие нагрузку сервера с запущенным ПО , который, в свою очередь, передаёт запрос на один из веб-серверов Apache для рендеринга (перевода в HTML) страниц из базы данных. Веб-сервера доставляют страницы по запросу, выполняя рендеринг страницы для всех языковых разделов Википедии. Для увеличения скорости в дальнейшем, переведённые в HTML страницы некоторое время хранятся в распределённом кэше в памяти. Это позволяет пропустить процесс рендеринга страницы для наиболее часто запрашиваемых статей.
Лицензия текстов и медиафайлов к статьям.
Большая часть текстового содержания Википедии доступна в соответствии с лицензиями () и () — копилефт-лицензиями, разрешающими дальнейшее распространение, создание производных работ, а также коммерческое использование содержания, в то время как авторы сохраняют своё авторское право на свои работы. Часть текстов доступна только под лицензией , о чём должна иметься пометка в самой статье, на её странице обсуждения или в истории правок. Положение о том, что Википедия — это просто услуга размещения этих текстов, было успешно использовано в качестве защиты в суде.
Изначально использовалась только лицензия , однако позднее был осуществлён переход на лицензию , так как , первоначально предназначенная для руководств к программному обеспечению, сложно использовать для онлайн-справочников. 3 ноября 2008 года в ответ на просьбу Фонда Викимедиа () выпустила новую версию , разработанную специально для того, чтобы позволить Википедии перелицензировать её материалы под до 1 августа 2009 года. Википедия и её братские проекты провели широкий референдум в сообществе относительно того, стоит ли перейти на другую лицензию. В результате переход был осуществлён.
Обработка мультимедийных файлов (например файлов изображений) различна в разных языковых версиях. Некоторые языковые разделы (например английская Википедия) включают несвободные файлы в соответствии с доктриной добросовестного использования, в то время как другие предпочли не делать этого. Это происходит отчасти из-за разницы в законах об авторском праве в разных странах, например, понятие добросовестного использования не существует в японском авторском праве. Медиафайлы, доступные в соответствии с лицензиями свободного содержания (например от ), распределяются между языковыми версиями Викисклада () — общего централизованного хранилища мультимедийных файлов, включаемых в страницы проектов Фонда Викимедиа.
Издания.
На CD и DVD.
Несколько языковых версий опубликовали подборку статей Википедии в версии на оптических дисках. Английская версия, , содержала около 2000 статей. Ещё одна английская версия, разработанная Linterweb, содержит «1988+ статей». Польская версия содержит около статей. Существует также несколько немецких версий.
Первое издание немецкой Википедии было выпущено на CD в декабре 2004 года и стоило 3 €. Было разослано около 40 тысяч дисков. Второе издание вышло в апреле 2005 года как на CD, так и на DVD. Диск содержал 205 тысяч статей и 10 тысяч изображений, находящихся в общественном достоянии. Directmedia продала 30 тысяч дисков по 9,90 евро каждый. В декабре того же года появилось третье издание. В него вошли DVD 300 тысяч статей и 100 тысяч изображений) и книга объёмом 139 страниц, в которой рассказывалось, что такое Википедия, а также излагались её история и основные правила. Диск и книга были изданы компанией Zenodot Verlagsgesellschaft mbH и продавались по той же цене, что и предыдущее издание. Диск можно было бесплатно скачать в Интернете. В январе 2006 года Zenodot анонсировала выпуск печатного издания Википедии в 100 томах, по 800 страниц каждый. Последний том планировалось выпустить в 2010 году. Позже было объявлено, что проект заморожен. В декабре 2006 года был создан обновлённый образ диска. DVD не издавался, но доступен для скачивания с сайта dvd.wikimedia.org.
DVD-диск с английской Википедией, содержащий 1964 статьи по основным темам, был выпущен в сотрудничестве с компанией Linterweb в январе 2007 года и обозначен как версия 0.5. В качестве оболочки использовалась среда Kiwix, программное обеспечение с открытым исходным кодом, специально написанное для данного издания. В данный момент ведётся подготовка версий 0.7 и 1.0.
Последним на данный момент был издан DVD польского раздела. Его выпустило издательство Helion в конце июля 2007 года. Работа над изданием велась более года, на основе дампа от 4 июня 2006 года. База статей, имевшихся на тот момент, была скопирована на отдельный сервер, и их дорабатывали 13 оплачиваемых редакторов и около 20 добровольцев. В итоге на диск вошло около 239 тыс. статей и 59 тыс. изображений. Стоимость диска на момент выпуска составляла 39 злотых.
На бумаге.
В 2009 году художник Роб Мэттьюс () распечатал английского раздела Википедии на 5000 страниц и сшил их в книгу с твёрдым переплётом. Как он написал в пояснении к этому проекту:
Воспроизведение Википедии в ущербной физической форме помогает легче ставить под сомнение разумность её использования.
В 2010 году английский писатель Джеймс Брайдл () выпустил в единственном экземпляре двенадцатитомное издание объёмом 7000 страниц, озаглавленное «Иракская война: Историография изменений в Википедии», в котором отображена каждая правка в англоязычной статье про Иракскую войну с декабря 2004 года по ноябрь 2009 года.
Значение.
В дополнение к логистическому росту количества статей, Википедия неуклонно приобретала статус общего справочного сайта с момента её создания в 2001 году.
На май 2018 года, согласно Alexa, Википедия занимала 5-е место среди самых посещаемых сайтов в мире, в Рунете — 9-е место. В первой десятке Википедия является единственным некоммерческим сайтом. Рост Википедии был вызван её доминирующей позицией в результатах поиска . Около 50 % трафика с поисковых систем в Википедию пришло с , большая часть этого трафика связана с научными исследованиями.
В апреле 2007 года проектом было установлено, что треть американских интернет-пользователей консультируются с Википедией. По оценкам на октябрь 2006 года, сайт имел гипотетическую рыночную стоимость в 580 млн долларов, если бы он запустил рекламу.
Википедия используется в образовательном процессе, научных исследованиях, книгах, конференциях, при отправлении правосудия, а также в работе различных министерств и ведомств. Так, сайт Парламента Канады ссылался на статью Википедии об однополых браках в разделе «Ссылки по теме» в списке «читать далее». Утверждения энциклопедии всё чаще используются в качестве источника такими организациями, как Федеральный суд США и Всемирная организация интеллектуальной собственности — хотя в основном в качестве "поддерживающей информации", а не информации, имеющей решающее значение для дела. Содержание Википедии было цитировано в качестве источника и ссылки в некоторых докладах Разведывательного ведомства США.
В 2013 году венгерские учёные показали, что с помощью Википедии можно предсказывать популярность и кассовые сборы фильмов, ещё не вышедших в прокат.
Википедия была также использована в качестве источника в журналистике, иногда без указания авторства, а также несколько журналистов были уволены за плагиат из Википедии.
В июле 2007 года Википедии был посвящён 30-минутный документальный фильм на . Он утверждал, что количество ссылок на Википедию в популярной культуре таково, что этот термин является одним из группы избранных существительных XXI века, которые так узнаваемы (, , ), что они больше не нуждаются в объяснениях и находятся на одном уровне с такими терминами XX века, как или . Существует много пародий на открытость Википедии с персонажами, вандализирующими или изменяющими статьи онлайн-энциклопедии. Комик Стивен Колберт пародировал Википедию или ссылался на Википедию в многочисленных эпизодах его шоу "" и придумал соответствующий термин «».
Помимо выполнения функции энциклопедического справочника, Википедия стала главным объектом внимания СМИ как сетевой источник последних новостей. Когда популярный американский еженедельник "" признал некоего абстрактного представителя миллионов вкладчиков пользовательского контента в различные сайты, носящего обобщённое имя «ты», «Человеком года — 2006», тем самым отмечая ускоряющийся успех онлайн-сотрудничества и взаимодействия миллионов интернет-пользователей по всему миру, Википедия была наиболее часто упоминающимся проектом Веб 2.0, за которым следовали проекты и .
Википедия также создала формы воздействия на средства массовой информации (СМИ). Некоторые СМИ высмеивают восприимчивость Википедии к вставкам неточностей — например, статья на первой странице в "" в июле 2006 года под названием «„Википедия“ празднует 750 лет американской независимости». Другие могут опираться на утверждение Википедии о том, что любой может править, — например «», эпизод сериала «Офис», где персонаж Майкл Скотт заявил: «„Википедия“ — лучшая вещь на свете. Любой в мире может написать всё, что хочет, по любому предмету; таким образом вы знаете, что получаете лучшую возможную информацию». Пародируются также правила Википедии, например, в комиксе "xkcd" «».
Первый документальный фильм о Википедии, озаглавленный «», был выпущен в 2010 году. 
28 сентября 2007 года итальянский политик Франко Гриллини инициировал парламентский запрос с министром культурных ресурсов и деятельности о необходимости свободы панорамы. Он сказал, что отсутствие такой свободы заставило Википедию, «седьмой сайт, с которым больше всего консультируются», запретить все изображения современных итальянских зданий и искусства, и заявил, что этим был нанесён очень серьёзный ущерб туристической отрасли. 16 сентября 2007 года сообщила о том, что Википедия стала координационным центром избирательной кампании в США в 2008 году, заявив: «Введите имя кандидата в , и среди первых результатов будет страница Википедии, что делает эти статьи, возможно, такими же важными, как любое объявление в определении кандидата. В настоящее время уже президентские статьи редактируются, расчленяются и обсуждаются бесчисленное множество раз каждый день». В октябре 2007 года статья Reuters, озаглавленная «Страница Википедии — последний символ статуса», сообщила о том, как наличие статьи в Википедии подтверждает статус знаменитости.
Википедия выиграла две крупные награды в мае 2004 года. Первой была Золотая Ника цифрового сообщества на ежегодном конкурсе Prix Ars Electronica; она была получена вместе с грантом (; ) и предоставлением приглашения присутствовать на PAE Cyberarts Festival в Австрии позднее в том же году. Второй была судейская награда в категории «сообщество». Википедия была также номинирована на «Лучшую практику» . 26 января 2007 года Википедия была также признана четвёртым высшим брендом в рейтинге читателей , получив 15 % голосов в ответ на вопрос: «Какая марка имела наибольшее влияние на нашу жизнь в 2006 году?».
В сентябре 2008 года Википедия получила награду «Квадрига» "" от вместе с Борисом Тадичем, Eckart Höfling и Питером Габриэлем. Награда была вручена Джимми Уэйлсу Дэвидом Вайнбергером.
Википедия российскую государственную Премию Рунета в нескольких номинациях, прежде всего как «научно-образовательный сайт года» в экспертных голосованиях и как лидер массовых онлайн-голосований («народная десятка»).
Хотя Википедия позиционирует себя как вторичный источник информации, 2009 и 2018 годы были отмечены использованием материалов из Википедии как с атрибутированием к источникам, так и без ссылки.
27 января 2013 года в «Циркуляре малых планет» была сделана запись, согласно которой «Астероид 274301», открытый украинскими астрономами 25 августа 2008 года, был назван «274301 Wikipedia». Открытие было сделано в «Андрушёвской астрономической обсерватории», находящейся в Житомирской области.
22 октября 2014 года в польском городе Слубице был открыт первый в мире памятник Википедии.
В декабре 2021 года на аукционе Christie’s в Нью-Йорке за 750 тысяч долларов была продана первая запись в Википедии в виде NFT. Фраза «Hello, World!» была написана Джимми Уэйлсом 15 января 2001 года. iMac Уэйлса, с которого он сделал эту запись, был продан за 187,5 тысяч долларов.
Ограничение доступа к Википедии.
Время от времени некоторые страны закрывают или угрожают закрыть доступ к Википедии. В том числе:
Влияние и использование.
В 2017 году учёными из Массачусетского технологического института (MIT) и Питтсбургского университета было проведено исследование об использовании ссылок на статьи из «Википедии» в научных работах.
Исследовательский коллектив из Массачусетского технологического института и университета Питтсбурга установил прямую корреляцию между наличием информации в Википедии и вероятностью того, что учёные будут использовать её при работе над научными статьями и монографиями.
По словам авторов, его результаты свидетельствуют о том, что публикация научных знаний в доступных источниках является экономически эффективным способом продвижения науки, что особенно полезно для тех, кто не имеет доступа к традиционным источникам научной информации.
Родственные проекты.
Фонд Викимедиа, компания-владелец и организатор Википедии, поддерживает и другие проекты по созданию свободных публикаций в Интернете:
Примечания.
Комментарии
Источники

</doc>
<doc id="1003" url="https://ru.wikipedia.org/wiki?curid=1003" title="Психология">
Психология

Психоло́гия (от «душа»; «учение») — гуманитарная научная дисциплина, изучающая закономерности возникновения, развития и функционирования психики и психической деятельности человека и групп людей. Тем не менее психология объединяет в себе гуманитарный и естественно-научный подходы.
Включает в себя:
Прикладная психология тесно связана с психиатрией — отраслью медицины, назначением которой является распознавание и лечение психических расстройств, и психотерапией, занимающейся вопросами лечебного воздействия на психику и через психику на организм, направленного на избавление человека от проблем эмоционального, личностного, социального характера.
Предмет психологии.
Предмет психологии понимается различно в течение истории и с позиции различных направлений психологии. Для современной психологии поиск предмета психологии по-прежнему остаётся актуальным.
Объект психологии.
Объект психологии — психические процессы и психические явления, обеспечивающие жизнедеятельность, развитие, поведение, деятельность, взаимоотношения людей в больших и малых социальных группах.
Методы психологии.
Количественные психологические исследования поддаются статистической проверке гипотез. Хотя в этой области широко используются рандомизированные и контролируемые эксперименты в лабораторных условиях, такие исследования могут оценить только ограниченный диапазон краткосрочных явлений. Таким образом, психологи также полагаются на творческие статистические методы, чтобы извлечь знания из клинических испытаний и данных о населении.
Контролируемые эксперименты.
Настоящий эксперимент со случайным распределением объектов по признакам позволяет исследователям делать убедительные выводы о причинно-следственных связях. В эксперименте исследователь изменяет параметры влияния, называемые независимыми переменными, и измеряет результаты, называемые зависимыми переменными. Опытные экспериментальные исследования проводятся в лаборатории с тщательно контролируемой средой.
Эксперименты с повторными измерениями — это эксперименты, которые проводятся в нескольких случаях. В исследованиях эффективности психотерапии экспериментаторы часто сравнивают данное лечение с лечением плацебо или сравнивают разные виды лечения друг с другом. Тип лечения является независимой переменной. Зависимые переменные — это результаты, которые в идеале оцениваются разными специалистами. Используя перекрёстный проект, исследователи могут ещё больше повысить силу своих результатов, протестировав оба из двух методов лечения на двух группах субъектов.
Экспериментальные исследователи обычно используют статистическую модель проверки гипотез, которая включает в себя прогнозирование перед проведением эксперимента, а затем оценку того, насколько данные подтверждают прогнозы. (Эти предсказания могут исходить из более абстрактной научной гипотезы о том, как на самом деле работает изучаемое явление.) Статистические методы анализа дисперсии используются для того, чтобы отличить уникальные результаты эксперимента от нулевой гипотезы о том, что вариации являются результатом случайных колебаний данных. В психологии широко используемый стандарт придаёт статистическую значимость результатам, вероятность которых менее чем на 5 % объясняется случайностью.
Другие формы статистического анализа.
Статистические обследования используются в психологии для измерения отношений и черт характера, мониторинга изменений в настроении, проверки достоверности экспериментальных манипуляций и для других психологических тем. Чаще всего психологи используют бумажно-карандашные опросы. Тем не менее, опросы также проводятся по телефону или по электронной почте. Веб-опросы всё чаще используются для удобного охвата многих предметов.
Нейропсихологические тесты, такие как шкалы Векслера и тест сортировки карт Висконсина, в основном представляют собой вопросники или простые задачи, которые оценивают определённый тип психической функции у респондента. Они могут быть использованы в экспериментах, как и в случае экспериментов с поражением, оценивающих результаты повреждения определённой части мозга.
Технологические анализы.
Классическим и популярным инструментом, используемым для сопоставления умственной и нервной активности, является электроэнцефалограмма (ЭЭГ), техника, использующая усовершенствованные электроды на коже головы человека для измерения изменений напряжения в различных частях мозга. Ханс Бергер, первый исследователь, который использовал ЭЭГ на не вскрытом черепе, обнаружил, что мозгу характерны «мозговые волны»: электрические колебания, которые соответствуют различным состояниям сознания. Впоследствии исследователи усовершенствовали статистические методы для синтеза электродных данных и определили уникальные паттерны мозговых волн, такие как дельта-волны, наблюдаемые в фазе медленного сна.
Новые методы функциональной нейровизуализации включают функциональную магнитно-резонансную томографию и позитронно-эмиссионную томографию, которые отслеживают кровоток через мозг. Эти технологии предоставляют более точную локализацию активности мозга и создают разносторонние представления о нём. Они также обеспечивают, основанное на объективных данных, понимание, которое позволяет избежать классических проблем субъективной самоотчётности. Однако по-прежнему сложно сделать твёрдые выводы о локализации возникновения в мозгу конкретных мыслей, или даже о том, насколько полезно такая локализация соотносится с реальностью. Тем, не менее, нейровизуализация предоставила безошибочные результаты, свидетельствующие о наличии корреляции между разумом и мозгом. Некоторые из них основаны не на модели локальных функций, а на модели системы нейронных сетей.
Отрасли психологии.
Современная психология представляет собой многоотраслевую науку. Отрасли психологии являются относительно самостоятельными развивающимися направлениями. Их условно разделяют на фундаментальные (общие) и прикладные (специальные).
Фундаментальные отрасли психологии имеют общее значение в изучении психических явлений. Это базис, который объединяет все отрасли психологии, а также служит основой их развития. Фундаментальные отрасли, как правило, называют термином «общая психология». Основными понятиями, которые рассматривает общая психология, являются: познавательные процессы (ощущения, восприятия, внимание, представления, память, воображение, мышление, речь, эмоции, воля, рефлексия), исполнительные функции, психические свойства (способности, мотивация, темперамент, характер) и психические состояния. Возникновение общей психологии в качестве фундаментальной отрасли связывают с именем С. Л. Рубинштейна, создавшего в 1940 г. фундаментальный труд «Основы общей психологии». 
Прикладными называют отрасли психологии, которые имеют практическое значение. В число таких отраслей входят, например, педагогическая психология, психология развития, психология личности, дифференциальная психология, сравнительная психология, социальная психология (включая психологию толпы, психологию мира), политическая психология, клиническая (медицинская) психология, юридическая психология, экономическая психология, военная психология, психология искусства, психология творчества, психология науки, психология спорта, психология религии и многие другие.
Место психологии в системе наук.
Положение психологии связано с двумя разноплановыми традициями. Первая представляет собой её стремление стать естественнонаучной дисциплиной, вторая — стремление занять место житейской психологии. Как указывают В. В. Петухов и В. В. Столин, обе цели принципиально недостижимы. В сравнении с житейской психологией научная представляет собой специальную дисциплину со своим понятийным и методологическим аппаратом для изучения психической жизни. Вместе с этим психология имеет особенности, связанные с тем фактом, что объект её изучения способен к внутреннему отражению своих состояний. Научная и житейская психология сохраняют принципиальные различия, но при этом взаимосвязаны друг с другом.
Психология имеет связь как с естественными, так и с гуманитарными науками. Связь психологии с естественными науками имеет в своей основе биологическую природу человека. Однако особенностью человека является то, что он является социальным существом, психические явления которого во многом социально обусловлены. По этой причине психологию принято относить к гуманитарным наукам. Отличительной особенностью психологии является совпадение объекта и субъекта познания, то есть необходимость применения в качестве инструмента исследования рефлексии.
Взаимосвязь психологии и современных наук.
Философия.
Вопросы психологии долгое время рассматривались в рамках философии. Только в середине XIX века психология стала самостоятельной наукой. Но отделившись от философии, она продолжает сохранять тесную связь с ней. В настоящее время существуют научные проблемы, которые изучаются как психологией, так и философией. К числу таких проблем относятся понятия личностного смысла, цели жизни, мировоззрение, политические взгляды, моральные ценности и другое. Психология использует экспериментальные методы для проверки гипотез. Однако есть вопросы, которые невозможно решить экспериментальным путём. В таких случаях психологи могут обращаться к философии. К числу философско-психологических проблем относятся проблемы сущности и происхождения человеческого сознания, природы высших форм человеческого мышления, влияние общества на личность и личность на общество.
А. Г. Маклаков указывает, что, хотя долгое время философия разделялась на материалистическую и идеалистическую, сейчас наметилось сближение этих течений философии, и можно говорить об одинаковой значимости для психологии обоих направлений. Материалистическая философия является основной при рассмотрении проблем деятельности и происхождения высших психических функций. Идеалистическая философия, по мнению Маклакова, ставит такие проблемы как ответственность, совесть, смысл жизни, духовность. Маклаков отмечает, что использование в психологии обоих направлений (материалистического и идеалистического) «наиболее полно отражает двойственную сущность человека, его биосоциальную природу».
По мнению А. Г. Маклакова, к числу проблем, которые можно решить только при сотрудничестве психологов и философов, относятся проблемы эпистемологии. Некоторые теории психологии имеют психолого-философский характер, как, например, теоретические работы неофрейдистов. К примеру, работы Эриха Фромма используются в психологии, социологии и философии.
Социология.
Психология тесно связана с общественными науками. Она имеет много общего с социологией. Социология заимствует из социальной психологии методы изучения личности и человеческих взаимоотношений. Психология широко использует такие методы сбора научной информации как опрос и анкетирование, которые традиционно считаются социологическими. Существуют различные концепции, которые психология и социология перенимают друг у друга. Множество проблем, такие как национальная психология, психология политики, проблемы социализации и социальных установок психологи и социологи решают совместно.
Экономика.
Экономическая психология — отрасль психологии об экономическом поведении и психических процессах человека, связанных с: производством, распределением, обменом и потреблением товаров и услуг. Предмет изучения экономической психологии являются — психологические закономерности экономического поведения и взаимодействия между людьми как "субъектами" экономических отношений. Выяснилось, что экономическое поведение людей далеко от рационального, которое рассматривалось ранее как единственно верное при изучении экономики, что это поведение существенно определяется психическими факторами.
В 2002 за исследования, выполненные совместно с Амосом Тверски и другими авторами, по установлению когнитивной основы для общих человеческих заблуждений в использовании эвристик, а также для развития теории перспектив лауреатом Нобелевской премии по экономике 2002 года «за применение психологической методики в экономической науке, в особенности — при исследовании формирования суждений и принятия решений в условиях неопределённости» (совместно с В. Смитом), стал Даниел Канеман несмотря на то, что исследования проводил как психолог, а не как экономист.
Лауреатом Нобелевской премии по экономике 2017 года за вклад в область поведенческой экономики стал Ричард Талер.
История.
Важны для психологии также исторические науки. Примером синтеза истории и психологии является теория культурно-исторического развития высших психических форм Л. С. Выготского. Использование в психологии исторического метода заключается в изучении фило- и онтогенетического развития психических явлений от элементарных к сложным формам. В основе сближения истории и психологии лежит концепция о том, что современный человек является продуктом развития человечества. Вопросы исторического развития психологических явлений также изучает эволюционная психология.
Биологические науки.
Психология тесно связана с биологическими науками, включая медицину. Использование в психологии достижений этих наук основано на том, что большинство психических явлений и психических процессов физиологически обусловлены. Известны факты взаимного влияния психического и соматического друг на друга. Психическое состояние оказывает влияние на физиологическое. Особенности психики могут способствовать развитию определённых заболеваний (например, психосоматических). Обратная связь состоит в том, что многие заболевания влияют на психическое состояние.
Особенно тесная связь у психологии существует с неврологией и психиатрией. Значительное число учёных, сделавших существенный вклад в психологию по основной своей профессии были неврологами и психиатрами. Именно изучение заболеваний нервной системы и расстройств психики позволило им выявить существенные особенности структуры и функционирования психики и её связей со структурой и функционированием нервной системы, которые в нормальном состоянии остаются скрытыми или трудно обнаруживаемыми. Для изучения смежных вопросов с психиатрией в психологии выделены такие отрасли, как патопсихология, клиническая психология, психосоматика, психология аномального развития; с нейробиологией, анатомией и физиологией центральной нервной системы, отрасли — нейропсихология, психофизиология. Значительный прогресс в развитии генетики привёл к созданию психогенетики, в рамках которой на основе секвенирования генома человека проводятся исследования, позволяющие выявить влияние генетических эффектов на особенности функционирования психики.
Нейропсихология.
Подлинную революцию в психологии вызвало появление неинвазивных (неразрушающих) методик исследования, как пассивных (функциональная магнитно-резонансная томография, фМРТ), так и активных (транскраниальная магнитная стимуляция). С помощью этих методик психологи впервые получили возможность проведения воспроизводимых исследований таких прежде трудно поддававшихся объективному изучению феноменов, как сознание, сновидения, свобода воли и т. п.
Другие науки.
Психология активно взаимодействует с большим числом других наук и отраслей научного знания. Это взаимодействие проявляется, прежде всего, в создании отраслей психологии, являющихся смежными, прикладными отраслями научного знания, исследующими закономерности объективной действительности с позиции предмета психологии. Например, связь психологии с антропологией устанавливается благодаря существованию такой фундаментальной отрасли психологии, как психологии личности. Во взаимодействии с педагогикой возникает педагогическая психология; с дефектологией — специальная психология. Лингвистика, взаимодействуя с психологией, рождает психолингвистику; с юриспруденцией связь отчётливо проявляется в таких отраслях психологии, как судебная психология, психология жертвы, криминальная психология, патопсихология, психология расследования преступлений.
Дискуссии по поводу научного статуса психологии.
Статус научности психологии на протяжении длительного времени является предметом обширных дискуссий. Как отметил в 2005 году член-корреспондент РАН, заместитель директора Института психологии РАН А. В. Юревич, паразитируя на сложности предмета и успехах современной психологии, под давлением «здесь-и-теперь-психологии» современного обывателя, широко распространившейся идеологии постмодернизма на её территорию постоянно вторгаются паранаучные доктрины.
Большинство специалистов сходится во мнении, что в настоящее время психология представляет собой скопление различных фактов, теорий, предположений, методологий и целей. Среди психологов нет консенсуса ни относительно того, насколько научна современная психология, ни относительно того, может ли она быть научной в принципе. Даже среди тех, кто считает возможным приведение психологии к научным стандартам, нет согласия по поводу того, к какому типу наук её следует отнести.
Американский психолог Б. Р. Хегенхан в 2009 году указал, что учёные дают целый ряд ответов на вопрос, является ли психология наукой, и содержание этих ответов зависит от того, кто их даёт и какой аспект психологии при этом подразумевает:
Научный статус психологии служит предметом полемики в современной дискуссии между модернизмом и постмодернизмом.
Из-за высокой сложности предмета изучения, для многих психологических теорий затруднено применение критерия Поппера, поскольку в них используются неоднозначные формулировки и пересекающиеся понятия, что затрудняет их применение. Хотя для ряда таких теорий понятие научной строгости не совпадает с применяемой в детерминистских теориях, они, тем не менее, оказываются полезными. Примерами могут служить теории Зигмунда Фрейда и Альфреда Адлера. Сам Поппер полагал, что доказательство ненаучности и метафизичности теории совсем необязательно делает такую теорию бесполезной и бессмысленной.
Т. В. Корнилова и С. Д. Смирнов отметили, что из-за параллельного существования в психологии множества парадигм и постоянного появления новых мини-парадигм создаётся эффект перманентного кризиса и перманентной революции в данной науке, что, как отмечалось выше, определяется сложностью предмета исследования. Этот факт используется рядом исследователей как основание для заявлений, что психология не является развитой наукой или же вовсе не является наукой. В психологии до настоящего времени не произошло сколько-нибудь полного и чёткого размежевания между научным, околонаучным и псевдонаучным знанием. В отличие от астрономии и химии, которые полностью отмежевались от астрологии и алхимии, психология проявляет гораздо бо́льшую терпимость к парапсихологии и зачастую ассимилирует опыт житейской психологии.
В американской психологической энциклопедии сформулированы следующие принципы научной психологии: «Профессиональная и научная психология требует осуществления строгого контроля за наблюдениями при чётко заданных и допускающих повторное воспроизведение условиях. Там, где её работа опирается на случайные наблюдения, отдельные эпизоды и оценки свидетелей, она не достигает профессионального или научного уровня… Научная психология требует эмпирических наблюдений и экспериментирования для проверки своих умозрительных построений, которые нередко облекаются в форму научных теорий и воспринимаются как таковые».
В соответствии с этими принципами множество теоретических построений в области психологии, таких, например, как квантовая теория психики, теория торсионных полей, не могут быть признаны научными, поскольку экспериментально не подтверждаются. В то же время, иногда они могут представлять собой объекты, достойные исследования научной психологией, как, например, любопытные факты игры ума, или служить некоторыми побуждениями для построения теорий, которые уже экспериментально подтверждаются.
История.
Психолог С. Л. Рубинштейн на момент 1940 года охарактеризовал психологию с исторической точки зрения следующим образом:
«Психология и очень старая, и совсем ещё молодая наука, — она имеет за собой 1000-летнее прошлое, и, тем не менее, она вся ещё в будущем. Её существование как самостоятельной научной дисциплины исчисляется лишь десятилетиями, но её основная проблематика занимает её философскую мысль с тех пор, пока существует философия. Годам экспериментального исследования предшествовали столетия философских размышлений, с одной стороны, и тысячелетия практического познания людей — с другой».
Античность.
Ранние античные авторы нередко уделяли в своём творчестве внимание проблемам природы человека, его души и разума. До настоящего времени из всего спектра взглядов древних авторов дошла лишь классификация темпераментов Гиппократа, хотя многие идеи Платона оказали влияние на развитие философских основ представлений о психике, в частности, представление о человеке, как существе, раздираемом внутренним конфликтом мотивов, нашло своё отражение в психоаналитических представлениях о структуре личности. Как и у большинства других наук, «дедушкой» психологии справедливо можно назвать Аристотеля, в своём трактате «О душе» давшего развёрнутый анализ предмета психологического исследования.
Средние века.
Средневековые работы о психологии в Европе были в целом сконцентрированы на вопросах веры и разума, в заметной степени христианскими философами, начиная с Фомы Аквинского, были заимствованы идеи Аристотеля. Из восточных учёных внимание психологическим вопросам уделял Ибн Сина (Авиценна).
В Древней Руси было написано некоторое количество произведений, в которых ставились и решались такие психологические вопросы, как происхождение и сущность души, свойства ума, устройство органов чувств, борьба мотивов, возрастные и индивидуальные различия в психике людей, проблема характера, происхождение сновидений и др. Это касается, например, таких произведений, как «Повесть о Горе-Злочастии», «Домострой», «Голубиная книга», многочисленная переводная философская и медицинская литература: «Галиново на Ипократа», «Пчела», «Диоптра» Филиппа Пустынника, «Толковая Палея», «Тайная тайных».
Новое время.
В 1590 году Рудольф Гоклениус впервые использует термин «психология» для обозначения науки о душе. Его современник Оттон Касман считается первым, кто употребил термин «психология» в современном научном смысле.
Представители нового времени (например, Рене Декарт) считали, что тело и душа имеют разную природу — это был новый взгляд на проблему психологии. «Душа и тело живут и действуют по разным законам и имеют разную природу», — писал Декарт.
XVIII век.
3 августа 1795 года британский королевский астроном Невил Маскелайн впервые обнаружил ошибки, допущенные его ассистентом Дэвидом Киннбруком в расчётах. Киннбрук был уволен, но анализ ошибок, проведённый другим астрономом — Фридрихом Бесселем, — положил начало систематическому изучению времени реакции, индивидуальных различий и «ментальной хронометрии» ("mental chronometry"), как критериев когнитивных процессов.
XIX век.
XIX век стал для психологии веком постепенного зарождения её как научной дисциплины, выделения соответствующих областей из философии, медицины, точных наук.
Эрнст Вебер исследует зависимость интенсивности ощущений от интенсивности вызывающих их стимулов.
Герман Гельмгольц исследует нервную систему как основу психики, формулирует представления об «автоматических умозаключениях», лежащих в основе восприятия пространства.
Однако главное имя в истории оформления психологии как науки — Вильгельм Вундт. Ученик и соратник Гельмгольца, Вундт в 1879 году открыл первую в мире психологическую лабораторию, в которой проходили исследования феноменов сознания методом интроспекции. Этот год считается годом рождения психологии как науки.
XX век.
Первые десятилетия.
Ученик Франца Брентано Эдмунд Гуссерль выдвинул идею феноменологического метода как описания и анализа непосредственного опыта сознания. «"Феноменологическая психология — безусловно необходимый фундамент для построения строго научной психологии"», — полагал Гуссерль.
Самое начало двадцатого века отмечено бурным ростом нескольких направлений. С одной стороны, активно развивается психоанализ — школа психотерапии, первоначально основанная на работах Зигмунда Фрейда, в которых человек описывался как система из нескольких независимых структур личности, борющихся друг с другом — Оно (Ид), Я (Эго), Сверх-Я (Суперэго). В этом конфликте Оно представляет собой биологические потребности человека, из которых основное внимание психоаналитики уделяли сексуальной потребности, а Сверх-Я представляет собой требования социума, культуры. Развитие этой школы оказало сильное влияние не только на практику, но и на науку, заставив учёных обратить внимание на феномены, находящиеся за пределами сознания, на неосознаваемые детерминанты психической деятельности.
Идеи психоанализа Зигмунда Фрейда подверглись критике, развитию и расширению в различных направлениях глубинной психологии, преимущественно бывшими коллегами Фрейда, такими как Альфред Адлер (индивидуальная психология) и Карл Густав Юнг (аналитическая психология), а позднее неофрейдистами, такими как Эрих Фромм, Карен Хорни, Гарри Стек Салливан, Жак Лакан и др.
В США активно развивается бихевиоризм — основанная Дж. Уотсоном школа психологии, базирующаяся на работах И. П. Павлова и Э. Торндайка о научении. Бихевиористы следовали позитивистскому требованию об исключении из рассмотрения науки всех явлений, кроме непосредственно наблюдаемых. Человек рассматривался как «чёрный ящик», в который входят стимулы, а выходят — реакции на эти стимулы.
В Германии развивается гештальтпсихология (М. Вертгеймер, К. Коффка, В. Кёлер), являющаяся дальнейшим развитием на пути изучения феноменов сознания. В отличие от предшественников, гештальтисты не пытались выделить «кирпичики», из которых построено сознание, напротив, они полагали основным своим законом, что «целое всегда больше суммы составляющих его частей». В рамках этой школы было открыто много феноменов восприятия и мышления.
Первая мировая война стимулировала развитие прикладных аспектов психологии, в первую очередь — психодиагностики, так как армии требовалось средство оценки возможностей солдат. Разрабатываются тесты интеллекта (А. Бине, Р. Йеркс).
1930—1940-е годы.
В Германии приходят к власти нацисты, вследствие чего многие психологи (среди которых было немало евреев) вынуждены эмигрировать в США. Гештальтпсихология практически прекращает своё существование, однако К. Левин и последователи гештальтистов становятся основными фигурами американской социальной психологии. Тем не менее такие мыслители как Карл Юнг и Мартин Хайдегер остаются работать в нацистской Германии. Юнг продолжает развивать своё учение о коллективном бессознательном, в 1934 году он выпускает одну из своих фундаментальных работ «"Архетипы и коллективное бессознательное"».
Среди бихевиористов, с одной стороны, начинаются попытки, сохраняя естественно-научный фундамент, внести в объяснение поведения внутрипсихические переменные (Э. Толмен, К. Халл), с другой стороны Б. Ф. Скиннер развивает «радикальный бихевиоризм», развивая теорию оперантного научения.
Ж. Пиаже публикует результаты исследований мышления, в которых были обнаружены сходные типы ошибок у детей одного возраста, которых уже практически не встречается у более старших детей.
Активно развивается психологическая и психотерапевтическая практика. Продолжили развиваться различные направления глубинной психологии, формируются альтернативные психоанализу формы психотерапии (гештальттерапия и др.).
Л. С. Выготский формулирует основные принципы культурно-исторической психологии, основанные на марксизме. В рамках этого направления постулировалась необходимость изучать личность непосредственно в процессе развития, протекающем под влиянием истории и культуры. На базе этого направления в дальнейшем была построена теория деятельности.
Постановление «» (1936), ликвидировавшее педологию, на несколько десятилетий практически замораживает развитие психологической науки в СССР.
Вторая мировая война вызывает новый всплеск активности психологов в области прикладных технологий. Особое внимание уделяется социальной психологии и эргономике.
1950—1960-е годы.
Эти десятилетия являются эпохой расцвета психологической науки, активного роста во множестве направлений. В современных учебниках большая часть материала посвящена экспериментам и исследованиям, проведённым именно в этот период.
Теория бихевиоризма не могла дать ответы на многие вопросы, которые ставила перед наукой развивающаяся промышленность и военные технологии. Разработка максимально эффективных форм представления информации на пультах управления сложными устройствами и другие задачи требовали активного изучения не только простых реакций на стимулы, но сложных механизмов, лежащих в основе восприятия. Вследствие подобного запроса начинает развиваться область, которая позднее получит название «когнитивная психология» — ведёт свои исследования механизмов внимания Д. Бродбент, публикует знаменитую статью про «Магическое число семь плюс-минус два» Дж. Миллер.
Активно развиваются техники модификации поведения на основе теории бихевиоризма. Дж. Вольпе разрабатывает технику систематической десенсибилизации, которая оказывается весьма эффективной в лечении различных видов фобий.
На фоне этого появляются гуманистическая психология и психотерапия как попытка преодолеть сведение человека к автомату или животному (теории бихевиоризма и психоанализа). Гуманистические психологи предлагают рассматривать человека как существо более высокого уровня, наделённое свободой воли и стремлением к самоактуализации.
Происходит бурное развитие социальной психологии в США. Проводят свои знаменитые исследования Соломон Аш, Музафер Шериф, Стэнли Милгрэм, Леон Фестингер и другие известные психологи.
В конце 60-х годов вместе с ростом популярности Нью-Эйдж-культуры психология испытывает сильное влияние со стороны мистики; на волне успеха исследований психоделических веществ и новых областей сознания возникает трансперсональная психология, а также развивается ряд школ тренингов личностного роста, из которых некоторые со временем превращаются в религиозные культы: (саентология, лайфспринг).
В 1966 году создаются факультеты психологии в МГУ и ЛГУ, а также кафедра психиатрии и медицинской психологии в РУДН, что демонстрирует прекращение 30-летних гонений на психологов. В заметной степени это было связано с появлением спроса на психологов на производстве и в армии. В СССР активно развивается инженерная психология. Однако в силу объективных причин отечественной психологии приходится оставаться крайне идеологизированной в соответствии с марксистско-ленинскими построениями, — данное обстоятельство придаст её дальнейшему развитию определённую специфику. И по сей день марксистско-ленинские теории (см. теорию отражения) так или иначе сохраняют влияние на программу подготовки специалистов-психологов в некоторых вузах России.
1970—1980-е годы.
Происходит бурный рост когнитивной психологии, которая шла по пути постепенного опровержения своих исходных постулатов о сущности человеческой психики как системы переработки информации с ограниченной пропускной способностью. В этот период психология устанавливает активные связи с лингвистикой, что стало неизбежным после «хомскианской революции»; возникает психолингвистика.
В остальных областях психологии происходит стабильный рост и накопление знаний, вместе с тем вновь обостряется ощущение «вечного кризиса» психологической мысли, так как ни одно из действующих направлений не даёт надежды на скорое появление действительно полной и объясняющей поведение человека теории.
Современность.
В настоящее время важное значение в изучении психики приобрели методы, базирующиеся на различных видах томографии. Применение томографии позволяет определить структуру и исследовать функционирование нейронных сетей. Для изучения связей функционирования психики для различных видов психической деятельности при различных условиях со структурой и функционированием мозга применяется функциональная магнитно-резонансная томография, которая позволяет определить активацию областей головного мозга в ходе нормального его функционирования (см., например,). Для изучения психических процессов на молекулярном уровне, в том числе метаболизм, транспорт веществ, лиганд-рецепторные взаимодействия, экспрессия генов и т. д. применяется позитронно-эмиссионная томография (ПЭТ) (см., например,). В частности ПЭТ применяется для исследований участия различных нейромедиаторов в нейрофизиологических и психических процессах.
Психология как профессия.
Психолог — человек с психологическим образованием, выполняющий профессиональную деятельность в области психологии как науки, психологической помощи или прикладных исследований.
Следует обратить внимание на то, что деятельность психологов в Российской Федерации не является лицензируемой, а наименование «психолог» — защищённым законодательством званием.
То или иное формальное право называть себя психологами имеют люди, получившие профильное психологическое образование следующих форм и ступеней:
Критика.
Американский психолог Стивен Пинкер отмечает, что психологи зачастую игнорируют "содержание" эмоций и не принимают во внимание способность разума обращаться с различными категориями последних по-разному. Так, по мнению Пинкера, теории памяти и мышления не отличают соображения о людях от соображений о камнях или зданиях; теории эмоций не видят разницы между страхом и гневом, ревностью и любовью; теории социальных отношений не проводят различий между семьёй, друзьями, врагами и незнакомцами. Пинкер указывает, что такие темы, как любовь, ненависть, еда, секс, статус, власть, зависть, дружба, религия и др., практически не затрагиваются в учебниках психологии.
Ссылки.
Рецензируемые научные журналы:
Справочники:
Разное:

</doc>
<doc id="1004" url="https://ru.wikipedia.org/wiki?curid=1004" title="Марс (значения)">
Марс (значения)

Марс — многозначный термин.
Топоним.
Белоруссия
Россия
Украина
Франция

</doc>
<doc id="1006" url="https://ru.wikipedia.org/wiki?curid=1006" title="Венера (значения)">
Венера (значения)

Вене́ра — женское имя и произошедшее от него название, также топоним:

</doc>
<doc id="1007" url="https://ru.wikipedia.org/wiki?curid=1007" title="СССР">
СССР



</doc>
<doc id="1009" url="https://ru.wikipedia.org/wiki?curid=1009" title="Лженаука">
Лженаука



</doc>
<doc id="1012" url="https://ru.wikipedia.org/wiki?curid=1012" title="Авария в энергосистеме США и Канады (2003)">
Авария в энергосистеме США и Канады (2003)

14 августа 2003 года между 15:45 и 16:15 по стандартному восточному времени (23:45 и 0:15 по московскому времени), наблюдатели в Кливленде, Толидо, городе Нью-Йорк, Олбани, Детройте и в части Нью-Джерси сообщили о перебоях в подаче электроэнергии. Позже последовали проблемы в изначально не затронутых регионах, включая все 5 районов города Нью-Йорк и в части Лонг-Айленда, округе Уэстчестер, штатах Нью-Джерси, Вермонта и Коннектикута и большей части юга провинции Онтарио, включая Торонто.
Около 10 млн человек в Канаде (примерно треть населения) и 40 млн в США остались без электричества. Однако, большинство жизненно важных служб продолжали работать.
Закрылись многие аэропорты, включая международный аэропорт Пирсона в Торонто и все аэропорты Нью-Йорка. Во многих местах, включая Торонто и Нью-Йорк, прекратило работу метро. Застрявших в метро пассажиров пришлось эвакуировать. В отдельных местах, в частности в Детройте, были перебои с водой. Мобильные телефоны работали очень плохо, с большими перебоями, но стационарная телефонная связь продолжала функционировать. В результате у телефонных автоматов на улицах выстроились огромные очереди. Провайдеры продолжали работать, но в условиях отсутствия электричества единственным способом входа в интернет во многих местах осталось соединение через ноутбуки, работающие от аккумуляторов. Поскольку транзисторных приёмников у многих жителей США и Канады не было, они остались без возможности узнать новости. Жара в Нью-Йорке достигла 33 °C в тени, но кондиционеры и вентиляторы не работали.
Однако, в отличие от сбоя электросети Нью-Йорка 1977 года, не было массовых разграблений. Более того, уровень преступности был даже ниже, чем в другие дни.
Денежный ущерб составил 6 миллиардов долларов.
Причины аварии, как выяснилось, следующие:
Подобная авария происходила в США 9 ноября 1965 года. Тогда 30 миллионов человек остались без электричества.

</doc>
<doc id="1013" url="https://ru.wikipedia.org/wiki?curid=1013" title="1965 год">
1965 год

Персоны года.
Человек года по версии журнала Time — Уильям Уэстморленд, американский военачальник.
Родились.
"См. также: "
Скончались.
"См. также: "

</doc>
<doc id="1015" url="https://ru.wikipedia.org/wiki?curid=1015" title="Старая Ладога">
Старая Ладога

Ста́рая Ла́дога (до 1703 года Ла́дога) — село в Волховском муниципальном районе Ленинградской области, административный центр Староладожского сельского поселения.
Возникшая по данным археологии в середине VIII века Ладога названа резиденцией Рюрика в Ипатьевском списке XV века «Повести временных лет». Согласно этой версии, Рюрик находился в Ладоге до 864 года и лишь после этого основал Новгород.
Ряд постсоветских историков и публичный дискурс рассматривают Старую Ладогу как первую столицу Руси.
Происхождение названия.
Скандинавское название Ладоги — "Альдейгья, Альдейгьюборг" (), первое письменное упоминание которого в исходной форме встречается в поэме «Bandadrapa» , сочинённой около 1010 года в честь ярла Эйрика.
Название "Ладога" носит река, озеро и город. При этом до последнего времени не было вполне ясно, какое из названий является первичным. Название города выводили от наименования Ладожского озера (из «волнующийся» — от "aalto" «волна»), или от названия реки "Ладога" (ныне Ладожка, из , где "alode, aloe" — «низкая местность» и "jok(k)i" — «река»).
Лингвист Е. А. Хелимский предлагает германскую этимологию. По его мнению, первичным является название озера — от «старый источник, подобный открытому морю». Данный гидроним связан с названием Невы (которая вытекает из Ладожского озера) в германских языках — «новая». Через промежуточную форму *"Aldaugja" это слово дало , а впоследствии "Ладога".
Историк Т. Н. Джаксон пишет, что «к настоящему времени можно считать почти доказанным, что сначала возникло название реки, затем города и лишь затем озера». Поэтому первичным она считает гидроним Ладога, от др.- «нижняя река». От названия реки произошло название города , и уже оно было заимствовано славянским населением и преобразовано при помощи метатезы "ald → lad" в .
Названия жителей — "старола́дожцы", "ладожа́не".
История.
Стоянка эпохи неолита на территории села датируется 3-м тысячелетием до н. э.
После бурения на Земляном городище под культурным слоем толщиной четыре метра выявлены маломощный торфяник и отложения ладожской трансгрессии. Около 2000 лет назад уровень воды в Волхове опустился ниже десяти метров абсолютной высоты. Территория будущей Старой Ладоги стала пригодна для заселения после дальнейшего снижения уровня воды не ранее середины I тысячелетия.
Под Земляным городищем распашка поверхности производилась на раскопе 4 не позднее или несколько ранее VI века, а на раскопе 3 — начиная со второй половины VII века — первой половины VIII века. Земледелие первых ладожан подтверждается находками зёрен пшеницы, ржи, ячменя, проса и конопли. Предположительно VII веком датируется гребень эпохи Меровингов, найденный в Старой Ладоге в 2013 году. Зачаточное славянское поселение могло возникнуть на Земляном городище около 700 года или даже ранее. Лепная профилированная керамика «ладожского типа» с чётко выраженным переломом, часто ребром в верхней трети сосуда появляется изначально с середины VIII века.
В первой половине 750-х годов в низовьях Волхова в 2-х км к югу от Любшанской крепости, основанной представителями оригинальной западнославянской культуры среднеевропейского происхождения, появилось скандинавское (по мнению Е. А. Рябинина — готландское) поселение. На Земляном городище три жилища каркасно-столбовой конструкции (т. н. «большие дома») с очагом в центре имеют аналогии в Северной Европе. Древнейшая дендродата — 753 год (I ярус).
В 760-х годах (II ярус) жизнь скандинавской колонии обрывается. Поселение занимают пришедшие из более южных районов Восточной Европы (Днепровского Левобережья или Поднестровья, Подунавья, верховьев Днепра, Западной Двины или Волги) представители раннеславянской культуры, аналогичной пражской, пеньковской или колочинской культурам. Отмечено отсутствие преемственности между первыми обитателями Ладоги и последующим населением, имевшим иные культурные традиции — поселение славян было застроено домами срубной конструкции. В Ладоге, как и в других местах на северо-западе Руси (Изборске, Камно, Рыуге, Пскове) в VIII—IX веках получили распространение литейные формочки из известняка в результате возрождения моды на подобные украшения, выработанные в пражской культуре ранних славян на рубеже VI—VII веков. Первое архаическое раннегородское поселение располагалось вокруг гавани, образованной несколькими речными рукавами Ладожки-Елены (ныне исчезнувшими) и с середины VIII века до середины IX века не имело укреплений. Характеристика материалов нижних ярусов Земляного городища показывает, что Ладога в первые десятилетия существования не была и не могла быть крупным специализированным торгово-ремесленным центром. Площадь Староладожского поселения в то время не превышала 2—4 га. Судя по данным, полученным при раскопках Земляного городища (I и II яруса), появление традиции изготовления украшений из оловяннистых сплавов связано со славянской колонизацией севера лесной зоны Восточной Европы в середине — третьей четверти VIII века. В слоях VIII века при раскопках обнаружен целый производственный комплекс. В этот период поселение уже торгует с местными племенами. В сгоревшем амбаре из слоёв VIII века найдены зёрна пшеницы: 80 % это пшеница двузернянка (полба), 20 % — мягкая пшеница. В Скандинавии полбу никогда не выращивали, к тому же староладожская полба резко отличается от европейской, но морфологически близка к поволжской полбе.
С 780-х годов в Ладоге по арабской низкотемпературной технологии варились бусы. «Глазки», то есть глазчатые бусы. За них варяги скупали пушнину, которую затем вывозили по Волжскому пути в Багдад и продавали за серебряные дирхемы. Наиболее старый клад дирхемов, найденный в Ладоге, датируется 786 годом, а отдельные монеты — чеканки 738—739 годов. Арабский путешественник X века утверждал, что за один стеклянный «глазок» можно было купить раба или рабыню. Во второй половине VIII — начале IX века численность населения Ладоги составляла от нескольких десятков до 100 человек. Население, сооружавшее в VIII—IX веках малые постройки с печью-каменкой на опечках П-образной формы в углу, было родственно носителям культуры смоленско-полоцких длинных курганов. Стеклодельная мастерская, которая действовала с 780-х до конца 830-х годов, связана с «малой» срубной избой с печью-каменкой в углу.
Судя по имеющимся данным о многообразии и размахе связей, Ладога стояла в одном ряду с такими торгово-ремесленными центрами Скандинавии и Балтики, как Хедебю и Рибе в Ютландии, на юге Норвегии, на Готланде, Бирка в Швеции, Ральсвик на острове Рюген (Германия), Волин в Польше и другие на юге Балтики.
Как показывают археологические свидетельства, большинство ладожан занимались не торговлей, а земледелием и ремёслами.
Нижняя часть XI яруса отнесена в сводной хронологической таблице С. Л. Кузьмина к горизонту Е3/1 (около 810 — около 840). В Ладоге в горизонте 810—840 годов найдены округлые пластинчатые подвески со штампованным декором, параллели которых известны в могильнике культуры смоленских длинных курганов в Еленово, в Верхнем и Среднем Поднепровье, на Пастырском городище и в могильнике меровингского времени в Штраубинге (Бавария). Данное поселение просуществовало до конца 830-х годов и было захвачено варягами.
Из горизонта Е2 (около 840 — около 865) известна литейная форма двурогой подвески в виде пельты (840—855 года). Подобные украшения происходят из Великой Моравии и найдены также в Чернигове, на Княжей горе под Киевом, в Галиче, в Словакии и Болгарии. В горизонте Е2 (вторая четвертью IX века) обнаружено лунничное височное кольцо арефинского типа. В Старой Ладоге найдены формочка для отливки свинцово-оловянных украшений с негативами ранних трапеций с широким основанием из коллекции случайных находок (№ КП 7834/А-5989), розетки, круглая выпуклая бляшка, подвеска-дериват украшений круга выемчатых эмалей, бляшки-розетки со штрихами по краю. Из горизонта Е2 (№ Л-1843) известна формочка с изображениями трёхрогой лунницы с имитацией гроздей зерни на концах, найденная в строительном ярусе V (840-е —860-е годы).
Около 840 года поселение постигла катастрофа в результате вражеского вторжения, оно гибнет в пожаре. В период около 840 — около 865 годов, значительная часть поселения превращается в пустырь. Другая часть отстраивается в скандинавских традициях североевропейского халле. Норманнское население привносит свои традиции (молоточки Тора и др.). Стеклодельное производство не восстанавливается. В северной части раскопа В. И Равдоникаса появляется «большой» дом каркасно-столбовой конструкции с очагом на центральной оси, с которым связана находка палочки с руническим текстом. Также строятся два больших дома, сочетающие в своей конструкции и интерьере североевропейскую и восточноевропейскую традиции. С этими домами связаны «малые» срубные дома с печью-каменкой в углу. Для застройки V яруса характерны находки предметов мужской субкультуры: шашек, фрагментов обкладки игральной доски, культовых предметов, большого числа деревянных игрушечных мечей.
После зафиксированного на стыке ладожских горизонтов Е2-Е1 тотального пожара, произошедшего около 860 года, примерно на десятилетие, прерывается поступление серебра на остров Готланд и в Швецию. Ярусы VII—X отнесены С. Л. Кузьминым к горизонту Е1 (около 865—920-е годы). Между 863 и 871 годами (около 865 года) поселение подвергается полнейшему разгрому. Среди находок этого периода (865—890) присутствуют как вещи североевропейского круга древностей эпохи викингов, так и предметы круга древностей лесной зоны Восточной Европы. Можно уверенно констатировать, что в это время в Ладоге проживают разные этнокультурные коллективы, среди которых отчётливо выделяются скандинавы.
Примерно в 870-е годы в Старой Ладоге на месте впадения реки Ладожка в Волхов была построена, по предположению А. Н. Кирпичникова, первая деревянная крепость. В слоях последней четверти IX века были обнаружены остатки бронзолитейной мастерской. По данным дендрохронологии в 881 году строится так называемый «большой дом» (купеческая гостиница), данный дом (как и ряд других таких же домов) не является «большим домом» в североевропейском и скандинавском смысле, это просто усадьба крупнее всех остальных, являющаяся одной из первых подобных построек, типичных для всей древней Новгородской земли.
С начала 870 годов поступление серебра из Восточной Европы в Скандинавию было устойчивым и равномерным, при этом до конца X века нет сведений о нападениях скандинавов на Ладогу.
Плотность застройки Земляного городища на уровне VI-го яруса (около 865—890 годов) и VII-го (890—920 годы) яруса значительно ниже, чем в предыдущие десятилетия.
В слоях Земляного городища начала 870 — конца 890 годов найдены литые поясные бляшки, височные кольца, трапециевидные подвески, вырезанные из тонкого листа металла, что позволяет говорить о долговременном присутствии в Ладоге во второй половине I тысячелетия славян из лесной и лесостепной зон Восточной Европы. Около 894 года на участке распопа Е. А. Рябинина возводится крупногабаритное, возможно, двухэтажное сооружение. На смену «дому 894 года» приходит хоромный комплекс, находившийся под углом к рядовой застройке, группировавшейся в «гнёзда» из 3-4 «малых» жилищ и двух-трёх хозяйственных построек-клетей.
Концом IX — началом X века датируется культурный слой участка, который находится на западной окраине поселения, напротив Земляного городища.
На рубеже IX—X веков, когда Любшанская крепость уже не функционировала, в Ладоге вместо деревянных укреплений была возведена каменная крепость, подобная западноевропейским оборонительным сооружениям того времени. Стены крепости были построены без использования известкового строительного раствора. Вход в первоначальную крепость находился со стороны реки около Раскатной башни. В первой половине X века вдоль края мыса строится оборонительная стена из известняка с вертикальными деревянными опорами. Вход в крепость располагался со стороны реки и в XII веке. Суммарные размеры древнерусского поселения в X веке составляли не более 6—8 га.
Призвание варягов.
В некоторых списках «Повести временных лет» (в частности, в Ипатьевском XV века) именно Ладога, а не Новгород, названа местом, куда в 862 году был призван на княжение варяг Рюрик:
Хотя в других вариантах рассказа говорится, что он сел княжить в Новгороде. Отсюда появилась версия о том, что Ладога была первой столицей Руси (точнее, местом княжения Рюрика с 862 по 864 год). Археологические исследования, проводимые в Старой Ладоге (руководитель — А. Н. Кирпичников), доказывают тесные контакты ильменских словен, финно-угорских племён и норманнов (урман) в этом районе в IX−X веках. Против этой версии возражает историк , рассматривая тезис о первой или древней столице Руси в Старой Ладоге как «староладожский миф».
На Варяжской улице в слоях первой четверти X века были найдены фрагменты керамики с росписью люстром, относящиеся к самому раннему (месопотамскому (самаррскому)) этапу производства этой ближневосточной посуды.
В слоях X века был обнаружен берестяной свиток с изображением ладьи.
Гончарная посуда в Ладоге появляется во второй четверти X века. В 920-х годах быстро застраивается вся площадка Земляного городища (VIII ярус), уплотняется застройка на Варяжской улице, появляется и стремительно распространяется керамика, изготовленная на гончарном круге. Решающий этап формирования древнерусской культуры в Ладоге нашёл свой отражение в материалах VIII—XI ярусов (горизонт Д) Земляного городища и в синхронных слоях Варяжской улицы (920—990 годы). Около 950 года в Ладоге произошёл пожар, уничтоживший застройку VIII яруса. Он охватил как участок Земляного городища, так и часть Варяжской улицы. Возможно, пожар связан с походом княгини Ольги. Кардинальных перемен в застройке после пожара не наблюдается.
По Новгородской летописи в Ладоге находится могила Вещего Олега (по киевской версии, его могила находится в Киеве на горе Щекавице).
В 997 году на Ладогу напал Эйрик, будущий норвежский правитель. Первая ладожская каменная крепость, просуществовавшая более 100 лет, была разрушена.
Ладога была важным пунктом на так называемом пути «из варяг в греки».
В сагах есть упоминание, что когда дочь шведского короля Олафа Шётконунга, принцесса Ингигерда в 1019 году выходила замуж за новгородского князя Ярослава Мудрого, то в приданое (вено) получила город Альдейгьюборг (Старая Ладога) с прилегающими землями, которые получили с тех пор название Ингерманландии (земли Ингегерды), а ярлом (посадником) Ладоги был назначен Рёгнвальд Ульвссон — ярл Вестергётланда (родственник Ингегерды по материнской линии) (Сага об Эймунде). Ульв (Улеб) и Эйлив — сыновья Рёгнвальда. По скандинавским источникам, Эйлив стал ярлом в Ладоге после смерти отца, а Улеб упомянут в летописи под 1032 годом как новгородский воевода.
Погребения.
Ранние захоронения IX—X веков в урочище Плакун, расположенном на противоположном берегу Волхова, напротив Ладожского поселения, состоят только из кремаций. В Ладоге единственная коллекция скелетов раннего средневековья, доступная для морфологических и генетических исследований, была раскопана в 1938—1939 годах В. И. Равдоникасом и Г. П. Гроздиловым на Земляном городище. Все захоронения на кладбище были совершены в могилах без курганов в соответствии с христианской традицией. Скелеты лежали на спине с головой на запад. Согласно стратиграфии, Равдоникас предложил два периода функционирования кладбища — XI—XII и XVII—XVIII века. Несколько захоронений с нижнего горизонта датированы радиоуглеродным методом 880—1188 годами. Согласно анализу на содержание стронция, захоронения отличаются от местной фауны. Коллекция скелетов из ранних могил Старой Ладоги, хранящихся в Музее антропологии и этнографии имени Петра I (Кунсткамера), насчитывает 65 человек. Краниометрические исследования показывают, что черепа людей из южной части кладбища морфологически близки к серии эпохи викингов из Скандинавии, в то время как северная часть кладбища, возможно, принадлежит к смешанному славянскому, финскому и скандинавскому населению. По краниометрическим признакам антропологами выявлено морфологическое сходство ладожан с материалом из 5 могильников ливов, расположенных в бассейнах рек Гауя и Даугава и из могильника на юго-востоке Эстонии. Предполагавшееся сходство погребённых на Земляном городище и в курганах Шестовиц не подтверждается по данным t-критерия Стьюдента. Этническую принадлежность средневековых групп населения методами антропологии определить нельзя. Краниологическая серия XI—XII веков, включающая 47 черепов, получила название «Старая Ладога». Она была изучена В. В. Седовым 1950-е годы. Т. И. Алексеева (1969, 1973) нашла у этой группы аналогии в сериях железного века из скандинавских стран, что отличает её от всех восточнославянских серий. У жителей Старой Ладоги X—XII веков палеогенетиками определены Y-хромосомные гаплогруппы I (n=1), I1 (n=4), I1a1 (n=1), I1a1b1 (n=2), I2a1&gt;P37&gt;CTS595&gt;A8462 (n=1), T1a1a-L208/Page2&gt;T-Y138678 (n=1, образец VK17, покрытие 0,522×, мито: U5a2a1b*), R1a1a1b1a3a-Z284&gt;R1a-YP1370&gt;R1a-Y69949 (n=1, образец VK18, покрытие 0,773×, мито: H1b1), R1a-М458&gt;CTS11962 (n=1, образец VK408, мито H74), R1b1a1b1a1a2c-P312&gt;S461&gt;L21 (n=1, образец VK218, покрытие 0,582×, мито H5) и митохондриальные гаплогруппы H1b1, H5, H5a1, H6c, H74, J1c, J1c1a, J1b1a1, J2b1a, K1d, T2b, T2b6a, U4a1a, U5a2a1b, X2b4. Анализ значений изотопов стронция в зубной эмали показал, что по меньшей мере пятеро погребённых были не местными. Похожий изотопный состав зафиксирован в районе озера Меларен на восточном побережье Швеции.
Староладожская крепость.
В 1116 году ладожский посадник Павел заложил каменную крепость:
В лѣто 6624&lt;br&gt;[…]&lt;br&gt;Того же лѣта Павелъ, посадникъ ладоскыи, заложи Ладогу город каменъ
Староладожская крепость, ставшая «сердцем» сегодняшней Старой Ладоги, стоит на месте впадения реки Елена (Ладожки) в Волхов. Она была стратегически важным местом, потому что это была единственная возможная гавань, где могли остановиться морские суда, не способные плавать по порогам Волхова.
В 1142 году "«князь свейский и бискуп пришед в 60 шнеках»" — шведы нападают на Ладогу. В 1164 году имело место новое нападение шведов на Ладогу. После неудачной осады, продлившейся несколько дней, шведы отступили и были наголову разбиты новгородцами в битве на реке Воронежке.
В результате изменения системы городского землепользования, проведения планировочных работ и строительства в 1153 году каменного собора Св. Климента, в XI—XII веках в Ладоге значительно снизилась частота пожаров и произошло сокращение площади рудеральных местообитаний (сорных растений).
С XIII века.
В 1228 году финское племя емь нападало на Ладогу, но было разбито новгородцами, ижорцами и корелами.
В 1283 году шведы осаждают Ладогу, истребляют новгородских купцов, которые направляются в Обонежье.
В 1499 году Ладога, согласно писцовой книге Водской пятины, состояла из крепости и посада, который подобно Новгороду делился на концы: Никольский, Богородицкий, Семёновский, Климятский и Спасский.
В 1568 году согласно писцовой книге Водской пятины 1568/1569 годов, фиксируется три конца: Богородицкий, Воскресенский и Никольский (Писцовая книга. Появляются отдельные слободы: Ямская, Стрелецкая, Пушкарская,
Казачья, Подмонастырская и Никольская. Общая городская площадь могла достигать 16—18 га.
После завершения русско-шведской войны 1590—1595 годов, по Тявзинскому миру Ладога была признана принадлежащей России.
В 1610 году Ладога была захвачена находившимися на шведской службе французскими наёмниками Пьера Делавилля, но через год освобождена воеводой И. М. Салтыковым. По Столбовскому миру, завершившему русско-шведскую войну 1613—1617 годов, Шведская империя отказалась от притязаний на Ладогу.
Новое и Новейшее время.
В 1704 году Пётр I основал в устье Волхова Новую Ладогу и переименовал Ладогу в «Старую Ладогу», лишив её статуса города и права иметь собственный герб, а многим ладожанам повелел переехать на жительство в Новую Ладогу. До этого события Ладога была центром Ладожского уезда Водской пятины Земли Новгородской.
В 1718 году в Староладожский Успенский монастырь переведена из Суздаля первая жена Петра I — Евдокия Лопухина.
В 1719 году Старая Ладога вошла в состав Новгородской провинции (была образована в составе Санкт-Петербургской губернии).
В 1727 году Староладожский уезд Новгородской провинции был включён в состав новой Новгородской губернии.
В 1770 году Староладожский уезд был упразднён.
Старая Ладога — слобода принадлежит Новоладожским купцам и мещанам, число жителей по ревизии: 54 м п., 62 ж. п.&lt;br&gt;
В ней церкви каменные: а) Во имя Святого Великомученика Георгия. б) Девичий монастырь во имя Успения Пресвятой Богородицы. в) Упразднённая церковь во имя Святого Предтечи Иоанна. г) Монастырь во имя Святого Николая Чудотворца. (1838 год)
Старая Ладога — селение Новоладожских мещан, по просёлочной дороге, число дворов — 30, число душ — 57 м п. (1856 год)
Старая Ладога — село мещанское, при реках Волхове и Ладожке, 43 двора, жителей 103 м п., 264 ж. п.;&lt;br&gt;
Церквей православных 4. Монастырей 2. Развалины крепости называемой. (1862 год)
В XIX веке село административно относилось к Михайловской волости 1-го стана Новоладожского уезда Санкт-Петербургской губернии, в начале XX века — 2-го стана.
С 1917 по 1919 год село "Старая Ладога" входило в состав Староладожского сельсовета Михайловской волости Новоладожского уезда.
С апреля 1919 года, в состав Октябрьской волости Волховского уезда. С ноября 1919 года село "Старая Ладога" учитывалось областными административными данными, как посёлок "Старая Ладога".
С 1927 года — в Волховском районе.
По данным 1933 года "деревня Старая Ладога" являлась административным центром Староладожского сельсовета Волховского района, в который входили 17 населённых пунктов, деревни: Ахматова Гора, Валеши, Зелёная Долина, Ивановка, Каменка, Киндерево, Княщина, Лыткино, Местовка, Макинкина, Межумошье, Неважи, Окулово, Подол, Подмонастырская Слобода, "Старая Ладога", Трусово, общей численностью населения 2312 человек.
По данным 1936 года в состав Староладожского сельсовета с центром в "посёлке Старая Ладога" входили 15 населённых пунктов, 410 хозяйств и 13 колхозов.
В 1961 году население "Старой Ладоги" составляло 1059 человек.
По административным данным 1973 года в селе располагалась центральная усадьба совхоза «Волховский».
По данным 1990 года в селе проживали 2155 человек, село являлось административным центром Староладожского сельсовета, куда входили 27 населённых пунктов, общей численностью населения 3891 человек.
В 1997 году в селе проживали 2457 человек, в 2002 году — 2182 человека (русские — 95 %).
В 2003 году проводилось празднование "1250-летия Старой Ладоги" как "древней столицы Северной Руси". Президент Владимир Путин подписал указ о праздновании юбилея.
Исследования.
В 1708 году здесь состоялись первые в России археологические раскопки Вильгельма Толле, который раскопал несколько языческих могил и курганов. В 1820 году археолог Адам Чарноцкий занимался раскопками кургана, прозванного «могилой Олега Вещего». Наиболее значимый вклад в 1880-х годах внёс археолог и историк Н. Е. Бранденбург и В. В. Суслов, которые раскопали ряд ладожских сопок и разрушенных храмов. Дальнейшими систематическими раскопками на Старой Ладоге в 1909—1913 годах в районе Земляного городища занимался Н. И. Репников.
В советский период раскопки возобновились в 1938 году — экспедицией ИИМК АН СССР под руководством В. И. Равдоникаса. Археологические исследования с его участием продолжались до 1959 года. С 1972 года в Старой Ладоге начала работу экспедиция ЛОИА АН СССР под руководством А. Н. Кирпичникова. В 1998 году на Земляном городище Ладоги была обнаружена византийская свинцовая вислая печать Леонтия, митрополита Лаодикеи. Кроме этого, найдены скандинавские украшения VIII века и арабские дирхамы X века.
В 2015 году экспедиция Института истории материальной культуры (ИИМК) РАН под управлением Владимира Анатольевича Лапшина обнаружила на территории Староладожской крепости клад из 116 серебряных монет времён правления Бориса Годунова.
Символическое значение.
Рюрик был выбран в качестве нового символического основателя российской государственности, что связано с архаизирующим трендом, имеющим место в массовом популярном историческом жанре. Архаизирующая историография связана со взятой некоторыми представителями академической среды линией на идею укрепления власти и представления об автохтонности. Воспринимаются понятные идеи «возникновения российской государственности» без детальных историографических экскурсов; варяжская легенда проста и понятна.
Наиболее важным таким «местом памяти» является Старая Ладога, где Рюрик присутствует, как в публичной сфере, так и в академических работах. В 1970-х и 1980-х годах эти представления были мейнстримом для ленинградского археологического фольклора. В 1997 году связанный с Рюриком и варяжской легендой «староладожский миф» был закреплён статьёй Г. С. Лебедева и затем воспроизводился в работах А. Н. Кирпичникова (2002) и Д. А. Мачинского (2003). Таким образом в поздне- и постсоветской историографии сформировалась идея возрождения Рюрика как «основателя Руси», которая «пошла из Ладоги». В 2002—2003 годах к этой теме было привлечено внимание власти; летом 2003 года проведено официальное празднование «1250-летия Старой Ладоги — древней столицы Руси». Стали возникать новые мемориальные объекты, посвящённые древности Ладоги в контексте «возникновения Руси». Академическая и публичная активность имела следствием также переход соответствующих текстов академических авторов, посредством экскурсионного обслуживания, в среду публичной истории, в местный школьный нарратив.
С 2007 года идея нового памятника Олегу и Рюрику много раз инициировалась А. Н. Кирпичниковым, руководителем Староладожской археологической экспедиции. В феврале 2012 года в выставочном зале «Смольный» была открыта выставка, на которой представлено 38 проектов памятника, для публики. Конкурс выиграл проект скульптора Олега Шорова. Олег здесь воин, с мечом и щитом, но Рюрик изображён гражданским. Памятник был установлен в 2015 году в присутствии министра культуры Российской Федерации. Появление парного Рюрику Олега связано с наличием здесь «места памяти» — «Олеговой могилы» — современное название большого кургана, датируемого примерно концом IX—X веками. Олег-воин, который присоединил юг, сопоставлен с Рюриком, представленным как гражданский, миролюбивый основатель, избранный «первых русских выборах», как утверждают современные медиа. Памятник поставлен на Варяжской улице. Нарратив, созданный в музейном сообществе, часто называет её «улицей X века» или «древнейшей улицей на Руси». Однако воспоминания об археологических раскопках неподалеку, которые действительно выявили застройку эпохи викингов, не позволяют рассматривать эту часть Старой Ладоги как наиболее древнюю.
Символика.
Герб Староладожского сельского поселения утвержден Решением Совета депутатов муниципального образования «Староладожское сельское поселение Волховского муниципального района Ленинградской области» № 14 от 20 ноября 2007 года.
Из обоснования символики герба:
Символ сокола олицетворяет на гербе славную историю Старой Ладоги, и с одной стороны, напоминает найденную при раскопках в Старой Ладоге бронзовую бляху с изображением птицы (См., например: А. Н. Кирпичников, В. Д. Сарабьянов. «Старая Ладога. Древняя столица Руси». СПб. Славия. 2003. С. 135, 143), c другой стороны, напоминает трезубец — знак Рюриковичей.
До 2007 года село Старая Ладога не имело герба, однако из Знамённого гербовника Б. Х. Миниха (1730-е гг) известно описание герба ладожских полков: "«шлюза, ворота золотые, стены красные, поле лазоревое»".
Культура и искусство.
Первым изображением Старой Ладоги была гравюра Адама Олеария, посетившего город в 1634 году, в качестве секретаря посольства Фридриха III к царю Михаилу Фёдоровичу. Русских художников XIX—XX веков Старая Ладога привлекала своими романтическими видами берегов древнего Волхова, церквями, монастырями и величественными курганами. Недалеко от села находилась усадьба «Успенское» Алексея Томилова, бывшая в XIX веке местным очагом культуры. Здесь бывали художники И. К. Айвазовский, О. А. Кипренский, А. О. Орловский, А. Г. Венецианов, И. А. Иванов и другие. В 1844 году в деревне Лопино, расположенной напротив крепости на другом берегу Волхова, в крестьянской семье родился В. М. Максимов, будущий академик живописи и художник-передвижник, писавший картины из жизни и быта крестьян. Здесь же в 1911 году он был похоронен.
Летом 1899 года в Старой Ладоге писал этюды с натуры Николай Рерих. «"Взбираемся на бугор, — "писал Рерих о своих впечатлениях," — и перед нами один из лучших русских пейзажей"». Здесь бывали В. А. Серов, К. А. Коровин, Б. М. Кустодиев. В 1924—1926 годах в Старой Ладоге неоднократно бывал А. Н. Самохвалов, участвовавший в подготовительных работах по реставрации Георгиевского собора. По признанию художника, этот опыт многому его научил, помог понять, как композиционное слияние образов монументальной живописи и архитектурных форм «"создавало пафос полифонического звучания всего комплекса воздействующих элементов"». Результатом этих поездок стали также пейзаж «Старая Ладога» (1924) и картина «Семья рыбака» (1926, ГРМ).
В феврале 1945 года решением Леноблисполкома на баланс Художественного фонда для организации творческой базы ленинградских художников был передан Дом отдыха в Старой Ладоге (бывшее имение Шаховских, по имени последнего владельца князя Николая Ивановича Шаховского (1851—1937), тайного советника, члена Государственного банка России и его сына, Всеволода Николаевича (1874—1954), действительного статского советника, последнего министра торговли и промышленности (1915—1917) царской России, эмигрировавших во Францию в 1919 году). В 1946 году начались работы по ремонту и строительству, которые растянулись на 15 лет.
Уже с середины 1940-х в Старую Ладогу стали приезжать ленинградские художники. Для С. И. Осипова, Г. А. Савинова, Н. Е. Тимкова, А. Н. Семёнова и других мастеров эти места на многие годы стали источником вдохновения. Мысль о наследовании ценностей труда и культуры отчётливо прозвучит в их творчестве, для которого «"национальное прошлое не разлучено с современностью, а входит в неё важной составной частью"».
В начале 1960-х годов после завершения ремонта зданий старинной усадьбы в деревне Чернавино Дом творчества художников «Старая Ладога» начал работать постоянно, став на тридцать лет важным центром художественной жизни. Здесь работали художники Е. Е. Моисеенко, А. Н. Самохвалов, В. Ф. Загонек, Н. Н. Баскаков, В. И. Овчинников, В. В. Ватенин, И. И. Годлевский, В. П. Кранц, Б. В. Корнеев, М. А. Козловская, Л. С. Язгур, Д. В. Беляев, В. А. Баженов, Д. П. Бучкин, Е. П. Жукова, С. Е. Захаров, А. М. Семёнов, Т. К. Афонина, З. Н. Бызова, В. И. Борисов, И. М. Добрякова, Н. Н. Брандт, Б. С. Угаров, П. Т. Фомин, В. И. Рейхет, Л. И. Вайшля, В. И. Викулов, В. С. Саксон, Д. И. Маевский и многие другие ленинградские живописцы и графики, а также художники из других регионов России. В 1970—1980 годы Дом творчества художников «Старая Ладога» расширялся, были построены новые корпуса, что позволило круглогодично использовать творческую базу в Старой Ладоге. Расходы на проживание, питание, поездки художников оплачивал Художественный фонд. Произведения, написанные в Старой Ладоге или по собранным здесь материалам, экспонировались на крупнейших художественных выставках 1960—1980-х годов, пополняли собрания музеев. В том числе стали основой обширного фонда живописи, графики и скульптуры музея заповедника «Старая Ладога».
В начале 1990-х годов, после ликвидации Художественного фонда и из-за отсутствия средств на содержание Дом творчества художников «Старая Ладога» сначала перестал принимать художников, а затем прекратил своё существование.
География.
Село расположено в северной части района на автодороге (Зуево — Новая Ладога) в месте примыкания к ней автодорог (Старая Ладога — Кисельня) и (Старая Ладога — Трусово).
Расстояние до административного центра района, города Волхов — 12 км.
Село вытянуто вдоль левого берега реки Волхов на 5 км, включая сопочные могильники.
Население.
Динамика численности населения с 1920 по 2017 год:
Транспорт.
От Волхова до Старой Ладоги можно доехать на автобусах № 23 и 23А.
СМИ.
Радио
Улицы.
"Варяжская, Волховский переулок, Волховский проспект, Гаражная, Еленинский переулок, Княщинский переулок, Культуры, Мебельный переулок, Морозовская, Музейный переулок, Набережная, Никольская, Никольский переулок, Новая, Поземская, Почтовый переулок, Советская, Успенский переулок".

</doc>
<doc id="1019" url="https://ru.wikipedia.org/wiki?curid=1019" title="Астрометрия">
Астрометрия

Астроме́трия (от  — «звезда» и  — «измеряю») — раздел астрономии, главной задачей которого является изучение геометрических и кинематических свойств небесных тел.
Основная задача астрометрии более развёрнуто формулируется как высокоточное определение местонахождения небесных тел и векторов их скоростей в данный момент времени. Полное описание этих двух величин дают шесть астрометрических параметров:
Точное измерение этих астрометрических параметров позволяет получить об астрономическом объекте дополнительную информацию, такую как:
Многие из этих сведений необходимы для того, чтобы делать выводы о физических свойствах и внутреннем строении наблюдаемого объекта, а также давать ответы и на более фундаментальные вопросы — об объёме, массе и возрасте всей Вселенной. Таким образом, астрометрия является одним из важнейших разделов астрономии, дающим экспериментальную информацию, необходимую для развития остальных разделов (астрофизики, космологии, космогонии, небесной механики, и т. п.).
Классификация астрометрии.
Фундаментальная астрометрия.
Для точных измерений положений и движений небесных тел необходимо иметь систему отсчёта с заданными координатами. Фундаментальной астрометрией называется тот подраздел астрометрии, который занимается проблемами выбора такой системы координат, и связанных с ними вопросов — какие именно объекты выбрать для начала отсчёта (т. н., "реализации системы координат"); каким способом привязать систему координат к объектам, являющимся началом отсчёта.
Современные системы координат подразделяются на кинематические и динамические:
С начала развития астрономии и вплоть до конца XX века астрономы всегда пользовались именно динамической системой экваториальных координат. За начало отсчёта этой системы была принята точка весеннего равноденствия, традиционно обозначаемая символом formula_4, — точки пересечения эклиптики с небесным экватором, определяемая из наблюдений годового движения Солнца.
Такая динамическая система имеет ряд недостатков. Вследствие прецессии и нутации земной оси, движения оси вращения внутри Земли, а также вековых и периодических возмущений орбиты Земли от тел Солнечной системы (т. н., «прецессия от планет»), точка весеннего равноденствия движется среди звёзд. Пока в астрономии пользовались динамической системой координат, это движение вынуждены были компенсировать подсчётом влияния всех вышеперечисленных процессов, соответственно пересчитывая координаты на каждую эпоху.
Кроме того, динамическая система отсчёта не удовлетворяет предъявляемому к опорной системе требованию инерциальности.
Эти затруднения привели к целесообразности замены динамической системы координат на кинематическую. В современной астрометрии пользуются кинематической системой координат. В настоящий момент это система координат ICRF в радиодиапазоне, со внегалактическими объектами в качестве опорных, и HCRF в оптическом диапазоне, использующая привязку к системе ICRF наблюдений космического астрометрического проекта Hipparcos.
Кинематическая система отсчёта, базирующаяся на внегалактических объектах в качестве опорных, считается квазиинерциальной (поскольку ускорением в движении внегалактических объектов, и даже самим наличием этого движения, можно пренебречь).
Любая кинематическая система координат определяется с помощью фундаментального каталога, как совокупность всех астрометрических параметров объектов, зачисленных в этот каталог.
Практическая астрометрия.
Практической астрометрией называется подраздел, занимающийся проблемами:
К практической астрометрии следует отнести и обзоры неба — составление подробных фотографических карт с целью каталогизации как можно большего числа астрометрических объектов.
Изучение вращения Земли.
Так как астрометрические наблюдения в большом объёме ведутся с поверхности Земли, изучение любых вариаций её движения и движения её коры также связано с решением астрометрических задач, и является подразделом астрометрии. На движение каждой отдельно выбранной точки на поверхности Земли влияют такие процессы как прецессия, нутация, движение полюсов, замедление вращения Земли, движение литосферных плит, неравномерность хода часов в гравитационном поле. При этом параметры вращения Земли не постоянны; они меняются со временем. Одним из методов, применяемых для изучения вращения Земли, является гравиметрия
Следует отметить, что вращение Земли примерно до середины XX века использовалось в астрометрии для измерения времени, а также географических координат. После изобретения более точных способов для того и другого астрометрия теперь решает обратную задачу — изучает вариации вращения Земли, (в частности, замедление), используя стандарты точного времени; и изучает колебания земной коры, используя системы глобальной спутниковой навигации.
История астрометрии.
До появления астрофизики в начала XX века практически вся астрономия сводилась к астрометрии. Астрометрия неразрывно связана со звёздными каталогами. Первый каталог был составлен ещё в Древнем Китае астрономом Ши Шенем. Точнее, это был не каталог, а схематичная карта неба. Первый же астрометрический каталог, содержащий координаты звёзд, был создан древнегреческим астрономом Гиппархом и датируется 129 годом до нашей эры, но он не сохранился. Сравнив свои наблюдения с более ранними, Гиппарх открыл явление "предварения равноденствий", или прецессии. Стимулом для развития астрометрии являлись практические нужды человека: без компаса и механических часов навигация могла осуществляться только по наблюдениям небесных светил (см. Астрономическая навигация).
В Средние века астрометрия была широко распространена в Арабском мире. Наибольший вклад в неё внесли ал-Баттани (X в.), ал-Бируни (XI в.) и Улугбек (XV в.). В XVI веке Тихо Браге в течение 16 лет проводил наблюдения Марса, обработав которые, его преемник Иоганн Кеплер открыл законы движения планет. На основе этих эмпирических законов Исаак Ньютон описал закон всемирного тяготения и заложил основы классической механики, что привело к появлению научного подхода.
В конце XX века, после значительного кризиса, в астрометрии произошла революция, благодаря развитию вычислительной техники и усовершенствованию приёмников излучения.
Основные задачи современной астрометрии.
Первоначально задачей астрометрии было измерение положения звёзд с целью определения по ним географических координат для навигации. Если географические координаты известны, то отмечая момент прохождения светила через небесный меридиан, можно узнать местное солнечное время.
Методы астрометрии.
Астрометрические наблюдения.
Измеряемыми величинами при астрономических наблюдениях точечного источника света (в том числе и любой, за исключением Солнца, звезды) являются:
Наблюдения, показывающие эти величины, являются фотометрическими, спектроскопическими, и астрометрическими соответственно. С появлением новых, более универсальных приёмников света, такое разделение по классификации наблюдений становится всё менее заметным. Для определения астрометрических параметров небесных тел необходимы все три перечисленные типа измерений.
Точность измерений положений formula_5 зависит от радиуса formula_6 дифракционного диска изображения точечного источника и количества квантов света formula_7, пришедших от источника, следующим образом: formula_8
Астрометрические инструменты.
Предполагается, что космический аппарат Gaia достигнет точности измерения углов до "20 µas" (микросекунд дуги).
Классические астрометрические инструменты.
Классический астрограф — телескоп-рефрактор, используемый для фотографирования небесных объектов. Получили распространение в конце XIX века после изобретения фотографии. Использовался для создания обзоров неба.
Телескоп Шмидта — зеркально-линзовый телескоп, имеющий, по сравнению с классическим астрографом, бо́льшую светосилу и поле зрения. Также используется для обзоров неба.
Длиннофокусный астрограф — рефрактор с фокусным расстоянием до 19 метров. В отличие от классического астрографа даёт большее увеличение, что позволяет его использовать для измерения параллаксов.
Пассажный инструмент — рефрактор, который может вращаться только вокруг горизонтальной оси, жёстко закреплённой на двух тумбах и расположенной в направлении запад-восток. Для наблюдений доступны небесные тела в момент прохождения ими небесного меридиана, то есть во время "верхних" и "нижних" кульминаций. На оси закреплён специальный диск, по которому можно наводить трубу инструмента по высоте. Во время наблюдения фиксируется и момент времени прохождения небесного тела через меридиан.
Меридианный круг — астрометрический инструмент для точного определения экваториальных координат небесных тел по наблюдениям их прохождения через меридиан. В отличие от пассажного инструмента на оси закреплены разделённые круги, позволяющие с высокой точностью определять склонения наблюдаемых небесных тел.
Зенит-телескоп и зенит-труба используются для определения широты.

</doc>
<doc id="1020" url="https://ru.wikipedia.org/wiki?curid=1020" title="1861 год">
1861 год

Родились.
"См. также: "
Скончались.
"См. также: "

</doc>
<doc id="1021" url="https://ru.wikipedia.org/wiki?curid=1021" title="1724 год">
1724 год

Родились.
"См. также: "
Скончались.
"См. также: "

</doc>
<doc id="1022" url="https://ru.wikipedia.org/wiki?curid=1022" title="Желязны, Роджер">
Желязны, Роджер

Ро́джер Джо́зеф Желя́зны (в другом переводе — Зилазни, ; ) — американский писатель-фантаст.
Биография.
Роджер Желязны родился 13 мая 1937 года в городе Юклид (штат Огайо) в семье поляка Юзефа Желязны ("Żelazny" по-польски означает «железный») и ирландки Жозефины Суит Желязны. Уже в десять лет Роджер писал сказки. В 1955 году окончил среднюю школу и поступил на отделение психологии в кливлендский Кейсовский технологический институт. Сменил специальность, перейдя на отделение английской словесности с факультета психологии. Через два года он получил степень бакалавра и перебрался в Колумбийский университет (штат Нью-Йорк). В 1962 году получил степень магистра в Колумбийском университете по специальности «Драма Елизаветинской и Яковианской эпох».
В годы учёбы Желязны занимался дзюдо и восточными единоборствами, писал и издавал стихи, писал, но не издавал фантастические рассказы, учился играть в шахматы, изучал хинди и японский, увлёкся медитацией и мистикой.
В конце 1960 года вступил в ряды Национальной гвардии, прослужил в Техасе шесть месяцев. С 1963 года по 1966 год был резервистом армии США. Одно время входил в состав боевого расчёта ракет «Ника» (), а последние годы службы провёл в подразделении психологической войны, откуда и был с почётом уволен в запас.
В 1962 году журнал «Amazing Stories» опубликовал его первый рассказ «Игра страстей». Первую номинацию на премию «Хьюго» он получил за повесть «Роза для Экклезиаста» (1963), а в 1965 году его ждал полный успех — одна премия «Хьюго» и сразу две «Небьюла».
В 1964 году женился на Шэрон Стиберл () и развёлся в 1966 году. После Национальной гвардии он работал в системе социального страхования. В 1965 году его перевели на службу в Балтимор, штат Мэриленд, одновременно в 1967—1968 годах являлся секретарём-казначеем Ассоциации писателей-фантастов. В Балтиморе он встретил Джуди Кэллахан (), на которой женился 20 августа 1966 года. Она родила ему троих детей — сыновей Девина (1971) и Джонатана Трента (1976), а также дочь Шаннон (1979).
В 1968 году, по совету Роберта Силверберга, Роджер Желязны заводит себе литературного агента. В 1969 году увольняется с государственной службы и становится профессиональным писателем. В 1975 году он с семьёй переезжает из Балтимора в Санта-Фе (штат Нью-Мексико). Известно, что Желязны перед смертью развёлся с женой и жил некоторое время с , с которой написал несколько романов.
В Санта-Фе Роджер Желязны написал большинство своих книг, получил чёрный пояс по айкидо, воспитывал своих детей и работал «чтецом» фантастических рассказов на радио.
На счету Р. Желязны около двадцати романов и четыре сборника рассказов. Он шесть раз получал премию «Хьюго», три — «Небьюла», один раз — французскую «Аполло», был удостоен премии журнала «Локус» за создание «Хроник Амбера». Написал несколько произведений в соавторстве с Филипом Диком, Фредом Саберхагеном, Томасом Т. Томасом и Робертом Шекли.
Серия романов «Хроники Амбера» объединена сквозным сюжетом и общими главными героями.
Роджер Желязны скончался 14 июня 1995 года на 59-м году жизни в больнице Сент-Висент города Санта-Фе от почечной недостаточности, вызванной колоректальным раком. Тело писателя было кремировано, а прах, согласно его воле, развеян над горами возле Санта-Фе.
Библиография.
Хроники Амбера.
Хроники Амбера состоят из двух серий по пять романов в каждой и нескольких рассказов в жанре фэнтэзи.
Первые пять книг рассказывают о приключениях Корвина, принца Амбера:
В следующих пяти книгах второй серии главным героем является сын Корвина, Мерлин (Мерль Кори), маг и инженер-программист:
Также Желязны написал несколько рассказов, относящихся к вселенной Амбера:
Работы в соавторстве.
Желязны также был одним из авторов межавторского цикла "«Дикие карты»" (ред. Джорджем Р. Р. Мартином) (1987), написав рассказ под названием "«Спящий»".
Посмертное соавторство.
Две книги были начаты Роджером Желязны и дописаны его компаньоном и писательницей Джейн Линдскольд после смерти Желязны:
Помимо этого, Джейн Линдскольд завершила начатый в соавторстве с Желязны сценарий к компьютерной игре "«Хрономастер»" ().
Также Джон Грегори Бетанкур написал приквел по мотивам книг Роджера Желязны:

</doc>
